<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/devtools/build/v1/build_events.proto
//   Date: 2017-06-13 04:25:03

namespace google\devtools\build\v1 {

  class ConsoleOutputStream extends \DrSlump\Protobuf\Enum {
    const UNKNOWN = 0;
    const STDOUT = 1;
    const STDERR = 2;
  }
}
namespace google\devtools\build\v1\BuildEvent {

  class InvocationAttemptStarted extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $attempt_number = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.build.v1.BuildEvent.InvocationAttemptStarted');

      // OPTIONAL INT64 attempt_number = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "attempt_number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <attempt_number> has a value
     *
     * @return boolean
     */
    public function hasAttemptNumber(){
      return $this->_has(1);
    }
    
    /**
     * Clear <attempt_number> value
     *
     * @return \google\devtools\build\v1\BuildEvent\InvocationAttemptStarted
     */
    public function clearAttemptNumber(){
      return $this->_clear(1);
    }
    
    /**
     * Get <attempt_number> value
     *
     * @return int
     */
    public function getAttemptNumber(){
      return $this->_get(1);
    }
    
    /**
     * Set <attempt_number> value
     *
     * @param int $value
     * @return \google\devtools\build\v1\BuildEvent\InvocationAttemptStarted
     */
    public function setAttemptNumber( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\build\v1\BuildEvent {

  class InvocationAttemptFinished extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\Int32Value */
    public $exit_code = null;
    
    /**  @var \google\devtools\build\v1\BuildStatus */
    public $invocation_status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.build.v1.BuildEvent.InvocationAttemptFinished');

      // OPTIONAL MESSAGE exit_code = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "exit_code";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Int32Value';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE invocation_status = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "invocation_status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\BuildStatus';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <exit_code> has a value
     *
     * @return boolean
     */
    public function hasExitCode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <exit_code> value
     *
     * @return \google\devtools\build\v1\BuildEvent\InvocationAttemptFinished
     */
    public function clearExitCode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <exit_code> value
     *
     * @return \google\protobuf\Int32Value
     */
    public function getExitCode(){
      return $this->_get(2);
    }
    
    /**
     * Set <exit_code> value
     *
     * @param \google\protobuf\Int32Value $value
     * @return \google\devtools\build\v1\BuildEvent\InvocationAttemptFinished
     */
    public function setExitCode(\google\protobuf\Int32Value $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <invocation_status> has a value
     *
     * @return boolean
     */
    public function hasInvocationStatus(){
      return $this->_has(3);
    }
    
    /**
     * Clear <invocation_status> value
     *
     * @return \google\devtools\build\v1\BuildEvent\InvocationAttemptFinished
     */
    public function clearInvocationStatus(){
      return $this->_clear(3);
    }
    
    /**
     * Get <invocation_status> value
     *
     * @return \google\devtools\build\v1\BuildStatus
     */
    public function getInvocationStatus(){
      return $this->_get(3);
    }
    
    /**
     * Set <invocation_status> value
     *
     * @param \google\devtools\build\v1\BuildStatus $value
     * @return \google\devtools\build\v1\BuildEvent\InvocationAttemptFinished
     */
    public function setInvocationStatus(\google\devtools\build\v1\BuildStatus $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\build\v1\BuildEvent {

  class BuildEnqueued extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.build.v1.BuildEvent.BuildEnqueued');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\devtools\build\v1\BuildEvent {

  class BuildFinished extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\build\v1\BuildStatus */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.build.v1.BuildEvent.BuildFinished');

      // OPTIONAL MESSAGE status = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\BuildStatus';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(1);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\devtools\build\v1\BuildEvent\BuildFinished
     */
    public function clearStatus(){
      return $this->_clear(1);
    }
    
    /**
     * Get <status> value
     *
     * @return \google\devtools\build\v1\BuildStatus
     */
    public function getStatus(){
      return $this->_get(1);
    }
    
    /**
     * Set <status> value
     *
     * @param \google\devtools\build\v1\BuildStatus $value
     * @return \google\devtools\build\v1\BuildEvent\BuildFinished
     */
    public function setStatus(\google\devtools\build\v1\BuildStatus $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\build\v1\BuildEvent {

  class ConsoleOutput extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\devtools\build\v1\ConsoleOutputStream */
    public $type = null;
    
    /**  @var string */
    public $text_output = null;
    
    /**  @var string */
    public $binary_output = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.build.v1.BuildEvent.ConsoleOutput');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\ConsoleOutputStream';
      $descriptor->addField($f);

      // OPTIONAL STRING text_output = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "text_output";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES binary_output = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "binary_output";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\devtools\build\v1\BuildEvent\ConsoleOutput
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\devtools\build\v1\ConsoleOutputStream
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\devtools\build\v1\ConsoleOutputStream $value
     * @return \google\devtools\build\v1\BuildEvent\ConsoleOutput
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <text_output> has a value
     *
     * @return boolean
     */
    public function hasTextOutput(){
      return $this->_has(2);
    }
    
    /**
     * Clear <text_output> value
     *
     * @return \google\devtools\build\v1\BuildEvent\ConsoleOutput
     */
    public function clearTextOutput(){
      return $this->_clear(2);
    }
    
    /**
     * Get <text_output> value
     *
     * @return string
     */
    public function getTextOutput(){
      return $this->_get(2);
    }
    
    /**
     * Set <text_output> value
     *
     * @param string $value
     * @return \google\devtools\build\v1\BuildEvent\ConsoleOutput
     */
    public function setTextOutput( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <binary_output> has a value
     *
     * @return boolean
     */
    public function hasBinaryOutput(){
      return $this->_has(3);
    }
    
    /**
     * Clear <binary_output> value
     *
     * @return \google\devtools\build\v1\BuildEvent\ConsoleOutput
     */
    public function clearBinaryOutput(){
      return $this->_clear(3);
    }
    
    /**
     * Get <binary_output> value
     *
     * @return string
     */
    public function getBinaryOutput(){
      return $this->_get(3);
    }
    
    /**
     * Set <binary_output> value
     *
     * @param string $value
     * @return \google\devtools\build\v1\BuildEvent\ConsoleOutput
     */
    public function setBinaryOutput( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished {

  class FinishType extends \DrSlump\Protobuf\Enum {
    const FINISH_TYPE_UNSPECIFIED = 0;
    const FINISHED = 1;
    const EXPIRED = 2;
  }
}
namespace google\devtools\build\v1\BuildEvent {

  class BuildComponentStreamFinished extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished\FinishType */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished\FinishType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished\FinishType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished\FinishType $value
     * @return \google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\build\v1 {

  class BuildEvent extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\Timestamp */
    public $event_time = null;
    
    /**  @var \google\devtools\build\v1\BuildEvent\InvocationAttemptStarted */
    public $invocation_attempt_started = null;
    
    /**  @var \google\devtools\build\v1\BuildEvent\InvocationAttemptFinished */
    public $invocation_attempt_finished = null;
    
    /**  @var \google\devtools\build\v1\BuildEvent\BuildEnqueued */
    public $build_enqueued = null;
    
    /**  @var \google\devtools\build\v1\BuildEvent\BuildFinished */
    public $build_finished = null;
    
    /**  @var \google\devtools\build\v1\BuildEvent\ConsoleOutput */
    public $console_output = null;
    
    /**  @var \google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished */
    public $component_stream_finished = null;
    
    /**  @var \google\protobuf\Any */
    public $bazel_event = null;
    
    /**  @var \google\protobuf\Any */
    public $build_execution_event = null;
    
    /**  @var \google\protobuf\Any */
    public $source_fetch_event = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.build.v1.BuildEvent');

      // OPTIONAL MESSAGE event_time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "event_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE invocation_attempt_started = 51
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 51;
      $f->name      = "invocation_attempt_started";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\BuildEvent\InvocationAttemptStarted';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE invocation_attempt_finished = 52
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 52;
      $f->name      = "invocation_attempt_finished";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\BuildEvent\InvocationAttemptFinished';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE build_enqueued = 53
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 53;
      $f->name      = "build_enqueued";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\BuildEvent\BuildEnqueued';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE build_finished = 55
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 55;
      $f->name      = "build_finished";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\BuildEvent\BuildFinished';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE console_output = 56
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 56;
      $f->name      = "console_output";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\BuildEvent\ConsoleOutput';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE component_stream_finished = 59
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 59;
      $f->name      = "component_stream_finished";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE bazel_event = 60
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 60;
      $f->name      = "bazel_event";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Any';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE build_execution_event = 61
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 61;
      $f->name      = "build_execution_event";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Any';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE source_fetch_event = 62
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 62;
      $f->name      = "source_fetch_event";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Any';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <event_time> has a value
     *
     * @return boolean
     */
    public function hasEventTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <event_time> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearEventTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <event_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getEventTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <event_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setEventTime(\google\protobuf\Timestamp $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <invocation_attempt_started> has a value
     *
     * @return boolean
     */
    public function hasInvocationAttemptStarted(){
      return $this->_has(51);
    }
    
    /**
     * Clear <invocation_attempt_started> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearInvocationAttemptStarted(){
      return $this->_clear(51);
    }
    
    /**
     * Get <invocation_attempt_started> value
     *
     * @return \google\devtools\build\v1\BuildEvent\InvocationAttemptStarted
     */
    public function getInvocationAttemptStarted(){
      return $this->_get(51);
    }
    
    /**
     * Set <invocation_attempt_started> value
     *
     * @param \google\devtools\build\v1\BuildEvent\InvocationAttemptStarted $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setInvocationAttemptStarted(\google\devtools\build\v1\BuildEvent\InvocationAttemptStarted $value){
      return $this->_set(51, $value);
    }
    
    /**
     * Check if <invocation_attempt_finished> has a value
     *
     * @return boolean
     */
    public function hasInvocationAttemptFinished(){
      return $this->_has(52);
    }
    
    /**
     * Clear <invocation_attempt_finished> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearInvocationAttemptFinished(){
      return $this->_clear(52);
    }
    
    /**
     * Get <invocation_attempt_finished> value
     *
     * @return \google\devtools\build\v1\BuildEvent\InvocationAttemptFinished
     */
    public function getInvocationAttemptFinished(){
      return $this->_get(52);
    }
    
    /**
     * Set <invocation_attempt_finished> value
     *
     * @param \google\devtools\build\v1\BuildEvent\InvocationAttemptFinished $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setInvocationAttemptFinished(\google\devtools\build\v1\BuildEvent\InvocationAttemptFinished $value){
      return $this->_set(52, $value);
    }
    
    /**
     * Check if <build_enqueued> has a value
     *
     * @return boolean
     */
    public function hasBuildEnqueued(){
      return $this->_has(53);
    }
    
    /**
     * Clear <build_enqueued> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearBuildEnqueued(){
      return $this->_clear(53);
    }
    
    /**
     * Get <build_enqueued> value
     *
     * @return \google\devtools\build\v1\BuildEvent\BuildEnqueued
     */
    public function getBuildEnqueued(){
      return $this->_get(53);
    }
    
    /**
     * Set <build_enqueued> value
     *
     * @param \google\devtools\build\v1\BuildEvent\BuildEnqueued $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setBuildEnqueued(\google\devtools\build\v1\BuildEvent\BuildEnqueued $value){
      return $this->_set(53, $value);
    }
    
    /**
     * Check if <build_finished> has a value
     *
     * @return boolean
     */
    public function hasBuildFinished(){
      return $this->_has(55);
    }
    
    /**
     * Clear <build_finished> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearBuildFinished(){
      return $this->_clear(55);
    }
    
    /**
     * Get <build_finished> value
     *
     * @return \google\devtools\build\v1\BuildEvent\BuildFinished
     */
    public function getBuildFinished(){
      return $this->_get(55);
    }
    
    /**
     * Set <build_finished> value
     *
     * @param \google\devtools\build\v1\BuildEvent\BuildFinished $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setBuildFinished(\google\devtools\build\v1\BuildEvent\BuildFinished $value){
      return $this->_set(55, $value);
    }
    
    /**
     * Check if <console_output> has a value
     *
     * @return boolean
     */
    public function hasConsoleOutput(){
      return $this->_has(56);
    }
    
    /**
     * Clear <console_output> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearConsoleOutput(){
      return $this->_clear(56);
    }
    
    /**
     * Get <console_output> value
     *
     * @return \google\devtools\build\v1\BuildEvent\ConsoleOutput
     */
    public function getConsoleOutput(){
      return $this->_get(56);
    }
    
    /**
     * Set <console_output> value
     *
     * @param \google\devtools\build\v1\BuildEvent\ConsoleOutput $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setConsoleOutput(\google\devtools\build\v1\BuildEvent\ConsoleOutput $value){
      return $this->_set(56, $value);
    }
    
    /**
     * Check if <component_stream_finished> has a value
     *
     * @return boolean
     */
    public function hasComponentStreamFinished(){
      return $this->_has(59);
    }
    
    /**
     * Clear <component_stream_finished> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearComponentStreamFinished(){
      return $this->_clear(59);
    }
    
    /**
     * Get <component_stream_finished> value
     *
     * @return \google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished
     */
    public function getComponentStreamFinished(){
      return $this->_get(59);
    }
    
    /**
     * Set <component_stream_finished> value
     *
     * @param \google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setComponentStreamFinished(\google\devtools\build\v1\BuildEvent\BuildComponentStreamFinished $value){
      return $this->_set(59, $value);
    }
    
    /**
     * Check if <bazel_event> has a value
     *
     * @return boolean
     */
    public function hasBazelEvent(){
      return $this->_has(60);
    }
    
    /**
     * Clear <bazel_event> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearBazelEvent(){
      return $this->_clear(60);
    }
    
    /**
     * Get <bazel_event> value
     *
     * @return \google\protobuf\Any
     */
    public function getBazelEvent(){
      return $this->_get(60);
    }
    
    /**
     * Set <bazel_event> value
     *
     * @param \google\protobuf\Any $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setBazelEvent(\google\protobuf\Any $value){
      return $this->_set(60, $value);
    }
    
    /**
     * Check if <build_execution_event> has a value
     *
     * @return boolean
     */
    public function hasBuildExecutionEvent(){
      return $this->_has(61);
    }
    
    /**
     * Clear <build_execution_event> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearBuildExecutionEvent(){
      return $this->_clear(61);
    }
    
    /**
     * Get <build_execution_event> value
     *
     * @return \google\protobuf\Any
     */
    public function getBuildExecutionEvent(){
      return $this->_get(61);
    }
    
    /**
     * Set <build_execution_event> value
     *
     * @param \google\protobuf\Any $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setBuildExecutionEvent(\google\protobuf\Any $value){
      return $this->_set(61, $value);
    }
    
    /**
     * Check if <source_fetch_event> has a value
     *
     * @return boolean
     */
    public function hasSourceFetchEvent(){
      return $this->_has(62);
    }
    
    /**
     * Clear <source_fetch_event> value
     *
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function clearSourceFetchEvent(){
      return $this->_clear(62);
    }
    
    /**
     * Get <source_fetch_event> value
     *
     * @return \google\protobuf\Any
     */
    public function getSourceFetchEvent(){
      return $this->_get(62);
    }
    
    /**
     * Set <source_fetch_event> value
     *
     * @param \google\protobuf\Any $value
     * @return \google\devtools\build\v1\BuildEvent
     */
    public function setSourceFetchEvent(\google\protobuf\Any $value){
      return $this->_set(62, $value);
    }
  }
}

namespace google\devtools\build\v1\StreamId {

  class BuildComponent extends \DrSlump\Protobuf\Enum {
    const UNKNOWN_COMPONENT = 0;
    const CONTROLLER = 1;
    const WORKER = 2;
    const TOOL = 3;
    const DEPRECATED = 4;
  }
}
namespace google\devtools\build\v1 {

  class StreamId extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $build_id = null;
    
    /**  @var string */
    public $invocation_id = null;
    
    /**  @var int - \google\devtools\build\v1\StreamId\BuildComponent */
    public $component = null;
    
    /**  @var string */
    public $invocation = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.build.v1.StreamId');

      // OPTIONAL STRING build_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "build_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING invocation_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "invocation_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM component = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "component";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\build\v1\StreamId\BuildComponent';
      $descriptor->addField($f);

      // OPTIONAL STRING invocation = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "invocation";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <build_id> has a value
     *
     * @return boolean
     */
    public function hasBuildId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <build_id> value
     *
     * @return \google\devtools\build\v1\StreamId
     */
    public function clearBuildId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <build_id> value
     *
     * @return string
     */
    public function getBuildId(){
      return $this->_get(1);
    }
    
    /**
     * Set <build_id> value
     *
     * @param string $value
     * @return \google\devtools\build\v1\StreamId
     */
    public function setBuildId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <invocation_id> has a value
     *
     * @return boolean
     */
    public function hasInvocationId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <invocation_id> value
     *
     * @return \google\devtools\build\v1\StreamId
     */
    public function clearInvocationId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <invocation_id> value
     *
     * @return string
     */
    public function getInvocationId(){
      return $this->_get(6);
    }
    
    /**
     * Set <invocation_id> value
     *
     * @param string $value
     * @return \google\devtools\build\v1\StreamId
     */
    public function setInvocationId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <component> has a value
     *
     * @return boolean
     */
    public function hasComponent(){
      return $this->_has(3);
    }
    
    /**
     * Clear <component> value
     *
     * @return \google\devtools\build\v1\StreamId
     */
    public function clearComponent(){
      return $this->_clear(3);
    }
    
    /**
     * Get <component> value
     *
     * @return int - \google\devtools\build\v1\StreamId\BuildComponent
     */
    public function getComponent(){
      return $this->_get(3);
    }
    
    /**
     * Set <component> value
     *
     * @param int - \google\devtools\build\v1\StreamId\BuildComponent $value
     * @return \google\devtools\build\v1\StreamId
     */
    public function setComponent( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <invocation> has a value
     *
     * @return boolean
     */
    public function hasInvocation(){
      return $this->_has(4);
    }
    
    /**
     * Clear <invocation> value
     *
     * @return \google\devtools\build\v1\StreamId
     */
    public function clearInvocation(){
      return $this->_clear(4);
    }
    
    /**
     * Get <invocation> value
     *
     * @return string
     */
    public function getInvocation(){
      return $this->_get(4);
    }
    
    /**
     * Set <invocation> value
     *
     * @param string $value
     * @return \google\devtools\build\v1\StreamId
     */
    public function setInvocation( $value){
      return $this->_set(4, $value);
    }
  }
}

