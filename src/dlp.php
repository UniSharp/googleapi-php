<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/privacy/dlp/v2beta1/dlp.proto
//   Date: 2017-06-13 04:26:18

namespace google\privacy\dlp\v2beta1 {

  class Likelihood extends \DrSlump\Protobuf\Enum {
    const LIKELIHOOD_UNSPECIFIED = 0;
    const VERY_UNLIKELY = 1;
    const UNLIKELY = 2;
    const POSSIBLE = 3;
    const LIKELY = 4;
    const VERY_LIKELY = 5;
  }
}
namespace google\privacy\dlp\v2beta1 {

  class InspectConfig extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\InfoType[]  */
    public $info_types = array();
    
    /**  @var int - \google\privacy\dlp\v2beta1\Likelihood */
    public $min_likelihood = null;
    
    /**  @var int */
    public $max_findings = null;
    
    /**  @var boolean */
    public $include_quote = null;
    
    /**  @var boolean */
    public $exclude_types = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.InspectConfig');

      // REPEATED MESSAGE info_types = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "info_types";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\InfoType';
      $descriptor->addField($f);

      // OPTIONAL ENUM min_likelihood = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "min_likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL INT32 max_findings = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "max_findings";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL include_quote = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "include_quote";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL exclude_types = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "exclude_types";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <info_types> has a value
     *
     * @return boolean
     */
    public function hasInfoTypes(){
      return $this->_has(1);
    }
    
    /**
     * Clear <info_types> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function clearInfoTypes(){
      return $this->_clear(1);
    }
    
    /**
     * Get <info_types> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\InfoType
     */
    public function getInfoTypes($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <info_types> value
     *
     * @param \google\privacy\dlp\v2beta1\InfoType $value
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function setInfoTypes(\google\privacy\dlp\v2beta1\InfoType $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <info_types>
     *
     * @return \google\privacy\dlp\v2beta1\InfoType[]
     */
    public function getInfoTypesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <info_types>
     *
     * @param \google\privacy\dlp\v2beta1\InfoType $value
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function addInfoTypes(\google\privacy\dlp\v2beta1\InfoType $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <min_likelihood> has a value
     *
     * @return boolean
     */
    public function hasMinLikelihood(){
      return $this->_has(2);
    }
    
    /**
     * Clear <min_likelihood> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function clearMinLikelihood(){
      return $this->_clear(2);
    }
    
    /**
     * Get <min_likelihood> value
     *
     * @return int - \google\privacy\dlp\v2beta1\Likelihood
     */
    public function getMinLikelihood(){
      return $this->_get(2);
    }
    
    /**
     * Set <min_likelihood> value
     *
     * @param int - \google\privacy\dlp\v2beta1\Likelihood $value
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function setMinLikelihood( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <max_findings> has a value
     *
     * @return boolean
     */
    public function hasMaxFindings(){
      return $this->_has(3);
    }
    
    /**
     * Clear <max_findings> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function clearMaxFindings(){
      return $this->_clear(3);
    }
    
    /**
     * Get <max_findings> value
     *
     * @return int
     */
    public function getMaxFindings(){
      return $this->_get(3);
    }
    
    /**
     * Set <max_findings> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function setMaxFindings( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <include_quote> has a value
     *
     * @return boolean
     */
    public function hasIncludeQuote(){
      return $this->_has(4);
    }
    
    /**
     * Clear <include_quote> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function clearIncludeQuote(){
      return $this->_clear(4);
    }
    
    /**
     * Get <include_quote> value
     *
     * @return boolean
     */
    public function getIncludeQuote(){
      return $this->_get(4);
    }
    
    /**
     * Set <include_quote> value
     *
     * @param boolean $value
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function setIncludeQuote( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <exclude_types> has a value
     *
     * @return boolean
     */
    public function hasExcludeTypes(){
      return $this->_has(6);
    }
    
    /**
     * Clear <exclude_types> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function clearExcludeTypes(){
      return $this->_clear(6);
    }
    
    /**
     * Get <exclude_types> value
     *
     * @return boolean
     */
    public function getExcludeTypes(){
      return $this->_get(6);
    }
    
    /**
     * Set <exclude_types> value
     *
     * @param boolean $value
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function setExcludeTypes( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class ContentItem extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $data = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.ContentItem');

      // OPTIONAL STRING type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\privacy\dlp\v2beta1\ContentItem
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\ContentItem
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <data> value
     *
     * @return \google\privacy\dlp\v2beta1\ContentItem
     */
    public function clearData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <data> value
     *
     * @return string
     */
    public function getData(){
      return $this->_get(2);
    }
    
    /**
     * Set <data> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\ContentItem
     */
    public function setData( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\privacy\dlp\v2beta1\ContentItem
     */
    public function clearValue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(3);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\ContentItem
     */
    public function setValue( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class InspectResult extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\Finding[]  */
    public $findings = array();
    
    /**  @var boolean */
    public $findings_truncated = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.InspectResult');

      // REPEATED MESSAGE findings = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "findings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\Finding';
      $descriptor->addField($f);

      // OPTIONAL BOOL findings_truncated = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "findings_truncated";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <findings> has a value
     *
     * @return boolean
     */
    public function hasFindings(){
      return $this->_has(1);
    }
    
    /**
     * Clear <findings> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectResult
     */
    public function clearFindings(){
      return $this->_clear(1);
    }
    
    /**
     * Get <findings> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function getFindings($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <findings> value
     *
     * @param \google\privacy\dlp\v2beta1\Finding $value
     * @return \google\privacy\dlp\v2beta1\InspectResult
     */
    public function setFindings(\google\privacy\dlp\v2beta1\Finding $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <findings>
     *
     * @return \google\privacy\dlp\v2beta1\Finding[]
     */
    public function getFindingsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <findings>
     *
     * @param \google\privacy\dlp\v2beta1\Finding $value
     * @return \google\privacy\dlp\v2beta1\InspectResult
     */
    public function addFindings(\google\privacy\dlp\v2beta1\Finding $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <findings_truncated> has a value
     *
     * @return boolean
     */
    public function hasFindingsTruncated(){
      return $this->_has(2);
    }
    
    /**
     * Clear <findings_truncated> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectResult
     */
    public function clearFindingsTruncated(){
      return $this->_clear(2);
    }
    
    /**
     * Get <findings_truncated> value
     *
     * @return boolean
     */
    public function getFindingsTruncated(){
      return $this->_get(2);
    }
    
    /**
     * Set <findings_truncated> value
     *
     * @param boolean $value
     * @return \google\privacy\dlp\v2beta1\InspectResult
     */
    public function setFindingsTruncated( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class Finding extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $quote = null;
    
    /**  @var \google\privacy\dlp\v2beta1\InfoType */
    public $info_type = null;
    
    /**  @var int - \google\privacy\dlp\v2beta1\Likelihood */
    public $likelihood = null;
    
    /**  @var \google\privacy\dlp\v2beta1\Location */
    public $location = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $create_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.Finding');

      // OPTIONAL STRING quote = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "quote";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE info_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\InfoType';
      $descriptor->addField($f);

      // OPTIONAL ENUM likelihood = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\Likelihood';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE location = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "location";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\Location';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE create_time = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "create_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <quote> has a value
     *
     * @return boolean
     */
    public function hasQuote(){
      return $this->_has(1);
    }
    
    /**
     * Clear <quote> value
     *
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function clearQuote(){
      return $this->_clear(1);
    }
    
    /**
     * Get <quote> value
     *
     * @return string
     */
    public function getQuote(){
      return $this->_get(1);
    }
    
    /**
     * Set <quote> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function setQuote( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <info_type> has a value
     *
     * @return boolean
     */
    public function hasInfoType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info_type> value
     *
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function clearInfoType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info_type> value
     *
     * @return \google\privacy\dlp\v2beta1\InfoType
     */
    public function getInfoType(){
      return $this->_get(2);
    }
    
    /**
     * Set <info_type> value
     *
     * @param \google\privacy\dlp\v2beta1\InfoType $value
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function setInfoType(\google\privacy\dlp\v2beta1\InfoType $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <likelihood> has a value
     *
     * @return boolean
     */
    public function hasLikelihood(){
      return $this->_has(3);
    }
    
    /**
     * Clear <likelihood> value
     *
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function clearLikelihood(){
      return $this->_clear(3);
    }
    
    /**
     * Get <likelihood> value
     *
     * @return int - \google\privacy\dlp\v2beta1\Likelihood
     */
    public function getLikelihood(){
      return $this->_get(3);
    }
    
    /**
     * Set <likelihood> value
     *
     * @param int - \google\privacy\dlp\v2beta1\Likelihood $value
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function setLikelihood( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <location> has a value
     *
     * @return boolean
     */
    public function hasLocation(){
      return $this->_has(4);
    }
    
    /**
     * Clear <location> value
     *
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function clearLocation(){
      return $this->_clear(4);
    }
    
    /**
     * Get <location> value
     *
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function getLocation(){
      return $this->_get(4);
    }
    
    /**
     * Set <location> value
     *
     * @param \google\privacy\dlp\v2beta1\Location $value
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function setLocation(\google\privacy\dlp\v2beta1\Location $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <create_time> has a value
     *
     * @return boolean
     */
    public function hasCreateTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <create_time> value
     *
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function clearCreateTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <create_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getCreateTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <create_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\privacy\dlp\v2beta1\Finding
     */
    public function setCreateTime(\google\protobuf\Timestamp $value){
      return $this->_set(6, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class Location extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\Range */
    public $byte_range = null;
    
    /**  @var \google\privacy\dlp\v2beta1\Range */
    public $codepoint_range = null;
    
    /**  @var \google\privacy\dlp\v2beta1\ImageLocation[]  */
    public $image_boxes = array();
    
    /**  @var \google\privacy\dlp\v2beta1\RecordKey */
    public $record_key = null;
    
    /**  @var \google\privacy\dlp\v2beta1\FieldId */
    public $field_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.Location');

      // OPTIONAL MESSAGE byte_range = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "byte_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\Range';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE codepoint_range = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "codepoint_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\Range';
      $descriptor->addField($f);

      // REPEATED MESSAGE image_boxes = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "image_boxes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\ImageLocation';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE record_key = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "record_key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\RecordKey';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE field_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "field_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\FieldId';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <byte_range> has a value
     *
     * @return boolean
     */
    public function hasByteRange(){
      return $this->_has(1);
    }
    
    /**
     * Clear <byte_range> value
     *
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function clearByteRange(){
      return $this->_clear(1);
    }
    
    /**
     * Get <byte_range> value
     *
     * @return \google\privacy\dlp\v2beta1\Range
     */
    public function getByteRange(){
      return $this->_get(1);
    }
    
    /**
     * Set <byte_range> value
     *
     * @param \google\privacy\dlp\v2beta1\Range $value
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function setByteRange(\google\privacy\dlp\v2beta1\Range $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <codepoint_range> has a value
     *
     * @return boolean
     */
    public function hasCodepointRange(){
      return $this->_has(2);
    }
    
    /**
     * Clear <codepoint_range> value
     *
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function clearCodepointRange(){
      return $this->_clear(2);
    }
    
    /**
     * Get <codepoint_range> value
     *
     * @return \google\privacy\dlp\v2beta1\Range
     */
    public function getCodepointRange(){
      return $this->_get(2);
    }
    
    /**
     * Set <codepoint_range> value
     *
     * @param \google\privacy\dlp\v2beta1\Range $value
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function setCodepointRange(\google\privacy\dlp\v2beta1\Range $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <image_boxes> has a value
     *
     * @return boolean
     */
    public function hasImageBoxes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <image_boxes> value
     *
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function clearImageBoxes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <image_boxes> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\ImageLocation
     */
    public function getImageBoxes($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <image_boxes> value
     *
     * @param \google\privacy\dlp\v2beta1\ImageLocation $value
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function setImageBoxes(\google\privacy\dlp\v2beta1\ImageLocation $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <image_boxes>
     *
     * @return \google\privacy\dlp\v2beta1\ImageLocation[]
     */
    public function getImageBoxesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <image_boxes>
     *
     * @param \google\privacy\dlp\v2beta1\ImageLocation $value
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function addImageBoxes(\google\privacy\dlp\v2beta1\ImageLocation $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <record_key> has a value
     *
     * @return boolean
     */
    public function hasRecordKey(){
      return $this->_has(4);
    }
    
    /**
     * Clear <record_key> value
     *
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function clearRecordKey(){
      return $this->_clear(4);
    }
    
    /**
     * Get <record_key> value
     *
     * @return \google\privacy\dlp\v2beta1\RecordKey
     */
    public function getRecordKey(){
      return $this->_get(4);
    }
    
    /**
     * Set <record_key> value
     *
     * @param \google\privacy\dlp\v2beta1\RecordKey $value
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function setRecordKey(\google\privacy\dlp\v2beta1\RecordKey $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <field_id> has a value
     *
     * @return boolean
     */
    public function hasFieldId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <field_id> value
     *
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function clearFieldId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <field_id> value
     *
     * @return \google\privacy\dlp\v2beta1\FieldId
     */
    public function getFieldId(){
      return $this->_get(5);
    }
    
    /**
     * Set <field_id> value
     *
     * @param \google\privacy\dlp\v2beta1\FieldId $value
     * @return \google\privacy\dlp\v2beta1\Location
     */
    public function setFieldId(\google\privacy\dlp\v2beta1\FieldId $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class Range extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $start = null;
    
    /**  @var int */
    public $end = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.Range');

      // OPTIONAL INT64 start = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 end = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "end";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start> value
     *
     * @return \google\privacy\dlp\v2beta1\Range
     */
    public function clearStart(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(1);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\Range
     */
    public function setStart( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(2);
    }
    
    /**
     * Clear <end> value
     *
     * @return \google\privacy\dlp\v2beta1\Range
     */
    public function clearEnd(){
      return $this->_clear(2);
    }
    
    /**
     * Get <end> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(2);
    }
    
    /**
     * Set <end> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\Range
     */
    public function setEnd( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class ImageLocation extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $top = null;
    
    /**  @var int */
    public $left = null;
    
    /**  @var int */
    public $width = null;
    
    /**  @var int */
    public $height = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.ImageLocation');

      // OPTIONAL INT32 top = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "top";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 left = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "left";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 width = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "width";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 height = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "height";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <top> has a value
     *
     * @return boolean
     */
    public function hasTop(){
      return $this->_has(1);
    }
    
    /**
     * Clear <top> value
     *
     * @return \google\privacy\dlp\v2beta1\ImageLocation
     */
    public function clearTop(){
      return $this->_clear(1);
    }
    
    /**
     * Get <top> value
     *
     * @return int
     */
    public function getTop(){
      return $this->_get(1);
    }
    
    /**
     * Set <top> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\ImageLocation
     */
    public function setTop( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <left> has a value
     *
     * @return boolean
     */
    public function hasLeft(){
      return $this->_has(2);
    }
    
    /**
     * Clear <left> value
     *
     * @return \google\privacy\dlp\v2beta1\ImageLocation
     */
    public function clearLeft(){
      return $this->_clear(2);
    }
    
    /**
     * Get <left> value
     *
     * @return int
     */
    public function getLeft(){
      return $this->_get(2);
    }
    
    /**
     * Set <left> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\ImageLocation
     */
    public function setLeft( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <width> has a value
     *
     * @return boolean
     */
    public function hasWidth(){
      return $this->_has(3);
    }
    
    /**
     * Clear <width> value
     *
     * @return \google\privacy\dlp\v2beta1\ImageLocation
     */
    public function clearWidth(){
      return $this->_clear(3);
    }
    
    /**
     * Get <width> value
     *
     * @return int
     */
    public function getWidth(){
      return $this->_get(3);
    }
    
    /**
     * Set <width> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\ImageLocation
     */
    public function setWidth( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <height> has a value
     *
     * @return boolean
     */
    public function hasHeight(){
      return $this->_has(4);
    }
    
    /**
     * Clear <height> value
     *
     * @return \google\privacy\dlp\v2beta1\ImageLocation
     */
    public function clearHeight(){
      return $this->_clear(4);
    }
    
    /**
     * Get <height> value
     *
     * @return int
     */
    public function getHeight(){
      return $this->_get(4);
    }
    
    /**
     * Set <height> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\ImageLocation
     */
    public function setHeight( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1\RedactContentRequest {

  class ReplaceConfig extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\InfoType */
    public $info_type = null;
    
    /**  @var string */
    public $replace_with = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.RedactContentRequest.ReplaceConfig');

      // OPTIONAL MESSAGE info_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "info_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\InfoType';
      $descriptor->addField($f);

      // OPTIONAL STRING replace_with = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "replace_with";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <info_type> has a value
     *
     * @return boolean
     */
    public function hasInfoType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <info_type> value
     *
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig
     */
    public function clearInfoType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <info_type> value
     *
     * @return \google\privacy\dlp\v2beta1\InfoType
     */
    public function getInfoType(){
      return $this->_get(1);
    }
    
    /**
     * Set <info_type> value
     *
     * @param \google\privacy\dlp\v2beta1\InfoType $value
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig
     */
    public function setInfoType(\google\privacy\dlp\v2beta1\InfoType $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <replace_with> has a value
     *
     * @return boolean
     */
    public function hasReplaceWith(){
      return $this->_has(2);
    }
    
    /**
     * Clear <replace_with> value
     *
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig
     */
    public function clearReplaceWith(){
      return $this->_clear(2);
    }
    
    /**
     * Get <replace_with> value
     *
     * @return string
     */
    public function getReplaceWith(){
      return $this->_get(2);
    }
    
    /**
     * Set <replace_with> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig
     */
    public function setReplaceWith( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class RedactContentRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\InspectConfig */
    public $inspect_config = null;
    
    /**  @var \google\privacy\dlp\v2beta1\ContentItem[]  */
    public $items = array();
    
    /**  @var \google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig[]  */
    public $replace_configs = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.RedactContentRequest');

      // OPTIONAL MESSAGE inspect_config = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "inspect_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\InspectConfig';
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\ContentItem';
      $descriptor->addField($f);

      // REPEATED MESSAGE replace_configs = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "replace_configs";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <inspect_config> has a value
     *
     * @return boolean
     */
    public function hasInspectConfig(){
      return $this->_has(1);
    }
    
    /**
     * Clear <inspect_config> value
     *
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest
     */
    public function clearInspectConfig(){
      return $this->_clear(1);
    }
    
    /**
     * Get <inspect_config> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function getInspectConfig(){
      return $this->_get(1);
    }
    
    /**
     * Set <inspect_config> value
     *
     * @param \google\privacy\dlp\v2beta1\InspectConfig $value
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest
     */
    public function setInspectConfig(\google\privacy\dlp\v2beta1\InspectConfig $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(2);
    }
    
    /**
     * Clear <items> value
     *
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest
     */
    public function clearItems(){
      return $this->_clear(2);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\ContentItem
     */
    public function getItems($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \google\privacy\dlp\v2beta1\ContentItem $value
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest
     */
    public function setItems(\google\privacy\dlp\v2beta1\ContentItem $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \google\privacy\dlp\v2beta1\ContentItem[]
     */
    public function getItemsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \google\privacy\dlp\v2beta1\ContentItem $value
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest
     */
    public function addItems(\google\privacy\dlp\v2beta1\ContentItem $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <replace_configs> has a value
     *
     * @return boolean
     */
    public function hasReplaceConfigs(){
      return $this->_has(3);
    }
    
    /**
     * Clear <replace_configs> value
     *
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest
     */
    public function clearReplaceConfigs(){
      return $this->_clear(3);
    }
    
    /**
     * Get <replace_configs> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig
     */
    public function getReplaceConfigs($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <replace_configs> value
     *
     * @param \google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig $value
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest
     */
    public function setReplaceConfigs(\google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <replace_configs>
     *
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig[]
     */
    public function getReplaceConfigsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <replace_configs>
     *
     * @param \google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig $value
     * @return \google\privacy\dlp\v2beta1\RedactContentRequest
     */
    public function addReplaceConfigs(\google\privacy\dlp\v2beta1\RedactContentRequest\ReplaceConfig $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class RedactContentResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\ContentItem[]  */
    public $items = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.RedactContentResponse');

      // REPEATED MESSAGE items = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\ContentItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(1);
    }
    
    /**
     * Clear <items> value
     *
     * @return \google\privacy\dlp\v2beta1\RedactContentResponse
     */
    public function clearItems(){
      return $this->_clear(1);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\ContentItem
     */
    public function getItems($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \google\privacy\dlp\v2beta1\ContentItem $value
     * @return \google\privacy\dlp\v2beta1\RedactContentResponse
     */
    public function setItems(\google\privacy\dlp\v2beta1\ContentItem $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \google\privacy\dlp\v2beta1\ContentItem[]
     */
    public function getItemsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \google\privacy\dlp\v2beta1\ContentItem $value
     * @return \google\privacy\dlp\v2beta1\RedactContentResponse
     */
    public function addItems(\google\privacy\dlp\v2beta1\ContentItem $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class InspectContentRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\InspectConfig */
    public $inspect_config = null;
    
    /**  @var \google\privacy\dlp\v2beta1\ContentItem[]  */
    public $items = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.InspectContentRequest');

      // OPTIONAL MESSAGE inspect_config = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "inspect_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\InspectConfig';
      $descriptor->addField($f);

      // REPEATED MESSAGE items = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\ContentItem';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <inspect_config> has a value
     *
     * @return boolean
     */
    public function hasInspectConfig(){
      return $this->_has(1);
    }
    
    /**
     * Clear <inspect_config> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectContentRequest
     */
    public function clearInspectConfig(){
      return $this->_clear(1);
    }
    
    /**
     * Get <inspect_config> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function getInspectConfig(){
      return $this->_get(1);
    }
    
    /**
     * Set <inspect_config> value
     *
     * @param \google\privacy\dlp\v2beta1\InspectConfig $value
     * @return \google\privacy\dlp\v2beta1\InspectContentRequest
     */
    public function setInspectConfig(\google\privacy\dlp\v2beta1\InspectConfig $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <items> has a value
     *
     * @return boolean
     */
    public function hasItems(){
      return $this->_has(2);
    }
    
    /**
     * Clear <items> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectContentRequest
     */
    public function clearItems(){
      return $this->_clear(2);
    }
    
    /**
     * Get <items> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\ContentItem
     */
    public function getItems($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <items> value
     *
     * @param \google\privacy\dlp\v2beta1\ContentItem $value
     * @return \google\privacy\dlp\v2beta1\InspectContentRequest
     */
    public function setItems(\google\privacy\dlp\v2beta1\ContentItem $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <items>
     *
     * @return \google\privacy\dlp\v2beta1\ContentItem[]
     */
    public function getItemsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <items>
     *
     * @param \google\privacy\dlp\v2beta1\ContentItem $value
     * @return \google\privacy\dlp\v2beta1\InspectContentRequest
     */
    public function addItems(\google\privacy\dlp\v2beta1\ContentItem $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class InspectContentResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\InspectResult[]  */
    public $results = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.InspectContentResponse');

      // REPEATED MESSAGE results = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "results";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\InspectResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <results> has a value
     *
     * @return boolean
     */
    public function hasResults(){
      return $this->_has(1);
    }
    
    /**
     * Clear <results> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectContentResponse
     */
    public function clearResults(){
      return $this->_clear(1);
    }
    
    /**
     * Get <results> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\InspectResult
     */
    public function getResults($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <results> value
     *
     * @param \google\privacy\dlp\v2beta1\InspectResult $value
     * @return \google\privacy\dlp\v2beta1\InspectContentResponse
     */
    public function setResults(\google\privacy\dlp\v2beta1\InspectResult $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <results>
     *
     * @return \google\privacy\dlp\v2beta1\InspectResult[]
     */
    public function getResultsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <results>
     *
     * @param \google\privacy\dlp\v2beta1\InspectResult $value
     * @return \google\privacy\dlp\v2beta1\InspectContentResponse
     */
    public function addResults(\google\privacy\dlp\v2beta1\InspectResult $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class CreateInspectOperationRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\InspectConfig */
    public $inspect_config = null;
    
    /**  @var \google\privacy\dlp\v2beta1\StorageConfig */
    public $storage_config = null;
    
    /**  @var \google\privacy\dlp\v2beta1\OutputStorageConfig */
    public $output_config = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.CreateInspectOperationRequest');

      // OPTIONAL MESSAGE inspect_config = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "inspect_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\InspectConfig';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE storage_config = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "storage_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\StorageConfig';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE output_config = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "output_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\OutputStorageConfig';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <inspect_config> has a value
     *
     * @return boolean
     */
    public function hasInspectConfig(){
      return $this->_has(1);
    }
    
    /**
     * Clear <inspect_config> value
     *
     * @return \google\privacy\dlp\v2beta1\CreateInspectOperationRequest
     */
    public function clearInspectConfig(){
      return $this->_clear(1);
    }
    
    /**
     * Get <inspect_config> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function getInspectConfig(){
      return $this->_get(1);
    }
    
    /**
     * Set <inspect_config> value
     *
     * @param \google\privacy\dlp\v2beta1\InspectConfig $value
     * @return \google\privacy\dlp\v2beta1\CreateInspectOperationRequest
     */
    public function setInspectConfig(\google\privacy\dlp\v2beta1\InspectConfig $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <storage_config> has a value
     *
     * @return boolean
     */
    public function hasStorageConfig(){
      return $this->_has(2);
    }
    
    /**
     * Clear <storage_config> value
     *
     * @return \google\privacy\dlp\v2beta1\CreateInspectOperationRequest
     */
    public function clearStorageConfig(){
      return $this->_clear(2);
    }
    
    /**
     * Get <storage_config> value
     *
     * @return \google\privacy\dlp\v2beta1\StorageConfig
     */
    public function getStorageConfig(){
      return $this->_get(2);
    }
    
    /**
     * Set <storage_config> value
     *
     * @param \google\privacy\dlp\v2beta1\StorageConfig $value
     * @return \google\privacy\dlp\v2beta1\CreateInspectOperationRequest
     */
    public function setStorageConfig(\google\privacy\dlp\v2beta1\StorageConfig $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <output_config> has a value
     *
     * @return boolean
     */
    public function hasOutputConfig(){
      return $this->_has(3);
    }
    
    /**
     * Clear <output_config> value
     *
     * @return \google\privacy\dlp\v2beta1\CreateInspectOperationRequest
     */
    public function clearOutputConfig(){
      return $this->_clear(3);
    }
    
    /**
     * Get <output_config> value
     *
     * @return \google\privacy\dlp\v2beta1\OutputStorageConfig
     */
    public function getOutputConfig(){
      return $this->_get(3);
    }
    
    /**
     * Set <output_config> value
     *
     * @param \google\privacy\dlp\v2beta1\OutputStorageConfig $value
     * @return \google\privacy\dlp\v2beta1\CreateInspectOperationRequest
     */
    public function setOutputConfig(\google\privacy\dlp\v2beta1\OutputStorageConfig $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class OutputStorageConfig extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\CloudStoragePath */
    public $storage_path = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.OutputStorageConfig');

      // OPTIONAL MESSAGE storage_path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "storage_path";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\CloudStoragePath';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <storage_path> has a value
     *
     * @return boolean
     */
    public function hasStoragePath(){
      return $this->_has(2);
    }
    
    /**
     * Clear <storage_path> value
     *
     * @return \google\privacy\dlp\v2beta1\OutputStorageConfig
     */
    public function clearStoragePath(){
      return $this->_clear(2);
    }
    
    /**
     * Get <storage_path> value
     *
     * @return \google\privacy\dlp\v2beta1\CloudStoragePath
     */
    public function getStoragePath(){
      return $this->_get(2);
    }
    
    /**
     * Set <storage_path> value
     *
     * @param \google\privacy\dlp\v2beta1\CloudStoragePath $value
     * @return \google\privacy\dlp\v2beta1\OutputStorageConfig
     */
    public function setStoragePath(\google\privacy\dlp\v2beta1\CloudStoragePath $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class InfoTypeStatistics extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\InfoType */
    public $info_type = null;
    
    /**  @var int */
    public $count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.InfoTypeStatistics');

      // OPTIONAL MESSAGE info_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "info_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\InfoType';
      $descriptor->addField($f);

      // OPTIONAL INT64 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <info_type> has a value
     *
     * @return boolean
     */
    public function hasInfoType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <info_type> value
     *
     * @return \google\privacy\dlp\v2beta1\InfoTypeStatistics
     */
    public function clearInfoType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <info_type> value
     *
     * @return \google\privacy\dlp\v2beta1\InfoType
     */
    public function getInfoType(){
      return $this->_get(1);
    }
    
    /**
     * Set <info_type> value
     *
     * @param \google\privacy\dlp\v2beta1\InfoType $value
     * @return \google\privacy\dlp\v2beta1\InfoTypeStatistics
     */
    public function setInfoType(\google\privacy\dlp\v2beta1\InfoType $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \google\privacy\dlp\v2beta1\InfoTypeStatistics
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\InfoTypeStatistics
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class InspectOperationMetadata extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $processed_bytes = null;
    
    /**  @var int */
    public $total_estimated_bytes = null;
    
    /**  @var \google\privacy\dlp\v2beta1\InfoTypeStatistics[]  */
    public $info_type_stats = array();
    
    /**  @var \google\protobuf\Timestamp */
    public $create_time = null;
    
    /**  @var \google\privacy\dlp\v2beta1\InspectConfig */
    public $request_inspect_config = null;
    
    /**  @var \google\privacy\dlp\v2beta1\StorageConfig */
    public $request_storage_config = null;
    
    /**  @var \google\privacy\dlp\v2beta1\OutputStorageConfig */
    public $request_output_config = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.InspectOperationMetadata');

      // OPTIONAL INT64 processed_bytes = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "processed_bytes";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 total_estimated_bytes = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "total_estimated_bytes";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE info_type_stats = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info_type_stats";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\InfoTypeStatistics';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE create_time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "create_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE request_inspect_config = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "request_inspect_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\InspectConfig';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE request_storage_config = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "request_storage_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\StorageConfig';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE request_output_config = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "request_output_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\OutputStorageConfig';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <processed_bytes> has a value
     *
     * @return boolean
     */
    public function hasProcessedBytes(){
      return $this->_has(1);
    }
    
    /**
     * Clear <processed_bytes> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function clearProcessedBytes(){
      return $this->_clear(1);
    }
    
    /**
     * Get <processed_bytes> value
     *
     * @return int
     */
    public function getProcessedBytes(){
      return $this->_get(1);
    }
    
    /**
     * Set <processed_bytes> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function setProcessedBytes( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <total_estimated_bytes> has a value
     *
     * @return boolean
     */
    public function hasTotalEstimatedBytes(){
      return $this->_has(4);
    }
    
    /**
     * Clear <total_estimated_bytes> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function clearTotalEstimatedBytes(){
      return $this->_clear(4);
    }
    
    /**
     * Get <total_estimated_bytes> value
     *
     * @return int
     */
    public function getTotalEstimatedBytes(){
      return $this->_get(4);
    }
    
    /**
     * Set <total_estimated_bytes> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function setTotalEstimatedBytes( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <info_type_stats> has a value
     *
     * @return boolean
     */
    public function hasInfoTypeStats(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info_type_stats> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function clearInfoTypeStats(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info_type_stats> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\InfoTypeStatistics
     */
    public function getInfoTypeStats($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <info_type_stats> value
     *
     * @param \google\privacy\dlp\v2beta1\InfoTypeStatistics $value
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function setInfoTypeStats(\google\privacy\dlp\v2beta1\InfoTypeStatistics $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <info_type_stats>
     *
     * @return \google\privacy\dlp\v2beta1\InfoTypeStatistics[]
     */
    public function getInfoTypeStatsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <info_type_stats>
     *
     * @param \google\privacy\dlp\v2beta1\InfoTypeStatistics $value
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function addInfoTypeStats(\google\privacy\dlp\v2beta1\InfoTypeStatistics $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <create_time> has a value
     *
     * @return boolean
     */
    public function hasCreateTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <create_time> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function clearCreateTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <create_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getCreateTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <create_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function setCreateTime(\google\protobuf\Timestamp $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <request_inspect_config> has a value
     *
     * @return boolean
     */
    public function hasRequestInspectConfig(){
      return $this->_has(5);
    }
    
    /**
     * Clear <request_inspect_config> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function clearRequestInspectConfig(){
      return $this->_clear(5);
    }
    
    /**
     * Get <request_inspect_config> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectConfig
     */
    public function getRequestInspectConfig(){
      return $this->_get(5);
    }
    
    /**
     * Set <request_inspect_config> value
     *
     * @param \google\privacy\dlp\v2beta1\InspectConfig $value
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function setRequestInspectConfig(\google\privacy\dlp\v2beta1\InspectConfig $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <request_storage_config> has a value
     *
     * @return boolean
     */
    public function hasRequestStorageConfig(){
      return $this->_has(6);
    }
    
    /**
     * Clear <request_storage_config> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function clearRequestStorageConfig(){
      return $this->_clear(6);
    }
    
    /**
     * Get <request_storage_config> value
     *
     * @return \google\privacy\dlp\v2beta1\StorageConfig
     */
    public function getRequestStorageConfig(){
      return $this->_get(6);
    }
    
    /**
     * Set <request_storage_config> value
     *
     * @param \google\privacy\dlp\v2beta1\StorageConfig $value
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function setRequestStorageConfig(\google\privacy\dlp\v2beta1\StorageConfig $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <request_output_config> has a value
     *
     * @return boolean
     */
    public function hasRequestOutputConfig(){
      return $this->_has(7);
    }
    
    /**
     * Clear <request_output_config> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function clearRequestOutputConfig(){
      return $this->_clear(7);
    }
    
    /**
     * Get <request_output_config> value
     *
     * @return \google\privacy\dlp\v2beta1\OutputStorageConfig
     */
    public function getRequestOutputConfig(){
      return $this->_get(7);
    }
    
    /**
     * Set <request_output_config> value
     *
     * @param \google\privacy\dlp\v2beta1\OutputStorageConfig $value
     * @return \google\privacy\dlp\v2beta1\InspectOperationMetadata
     */
    public function setRequestOutputConfig(\google\privacy\dlp\v2beta1\OutputStorageConfig $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class InspectOperationResult extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.InspectOperationResult');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectOperationResult
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\InspectOperationResult
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class ListInspectFindingsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.ListInspectFindingsRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsRequest
     */
    public function clearPageSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsRequest
     */
    public function setPageSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsRequest
     */
    public function clearPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsRequest
     */
    public function setPageToken( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class ListInspectFindingsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\InspectResult */
    public $result = null;
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.ListInspectFindingsResponse');

      // OPTIONAL MESSAGE result = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\InspectResult';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(1);
    }
    
    /**
     * Clear <result> value
     *
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsResponse
     */
    public function clearResult(){
      return $this->_clear(1);
    }
    
    /**
     * Get <result> value
     *
     * @return \google\privacy\dlp\v2beta1\InspectResult
     */
    public function getResult(){
      return $this->_get(1);
    }
    
    /**
     * Set <result> value
     *
     * @param \google\privacy\dlp\v2beta1\InspectResult $value
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsResponse
     */
    public function setResult(\google\privacy\dlp\v2beta1\InspectResult $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\ListInspectFindingsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class InfoTypeDescription extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $display_name = null;
    
    /**  @var \google\privacy\dlp\v2beta1\CategoryDescription[]  */
    public $categories = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.InfoTypeDescription');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING display_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "display_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE categories = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "categories";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\CategoryDescription';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\privacy\dlp\v2beta1\InfoTypeDescription
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\InfoTypeDescription
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <display_name> has a value
     *
     * @return boolean
     */
    public function hasDisplayName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <display_name> value
     *
     * @return \google\privacy\dlp\v2beta1\InfoTypeDescription
     */
    public function clearDisplayName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <display_name> value
     *
     * @return string
     */
    public function getDisplayName(){
      return $this->_get(2);
    }
    
    /**
     * Set <display_name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\InfoTypeDescription
     */
    public function setDisplayName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <categories> has a value
     *
     * @return boolean
     */
    public function hasCategories(){
      return $this->_has(3);
    }
    
    /**
     * Clear <categories> value
     *
     * @return \google\privacy\dlp\v2beta1\InfoTypeDescription
     */
    public function clearCategories(){
      return $this->_clear(3);
    }
    
    /**
     * Get <categories> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\CategoryDescription
     */
    public function getCategories($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <categories> value
     *
     * @param \google\privacy\dlp\v2beta1\CategoryDescription $value
     * @return \google\privacy\dlp\v2beta1\InfoTypeDescription
     */
    public function setCategories(\google\privacy\dlp\v2beta1\CategoryDescription $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <categories>
     *
     * @return \google\privacy\dlp\v2beta1\CategoryDescription[]
     */
    public function getCategoriesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <categories>
     *
     * @param \google\privacy\dlp\v2beta1\CategoryDescription $value
     * @return \google\privacy\dlp\v2beta1\InfoTypeDescription
     */
    public function addCategories(\google\privacy\dlp\v2beta1\CategoryDescription $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class ListInfoTypesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $category = null;
    
    /**  @var string */
    public $language_code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.ListInfoTypesRequest');

      // OPTIONAL STRING category = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "category";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING language_code = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "language_code";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <category> has a value
     *
     * @return boolean
     */
    public function hasCategory(){
      return $this->_has(1);
    }
    
    /**
     * Clear <category> value
     *
     * @return \google\privacy\dlp\v2beta1\ListInfoTypesRequest
     */
    public function clearCategory(){
      return $this->_clear(1);
    }
    
    /**
     * Get <category> value
     *
     * @return string
     */
    public function getCategory(){
      return $this->_get(1);
    }
    
    /**
     * Set <category> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\ListInfoTypesRequest
     */
    public function setCategory( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <language_code> has a value
     *
     * @return boolean
     */
    public function hasLanguageCode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <language_code> value
     *
     * @return \google\privacy\dlp\v2beta1\ListInfoTypesRequest
     */
    public function clearLanguageCode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <language_code> value
     *
     * @return string
     */
    public function getLanguageCode(){
      return $this->_get(2);
    }
    
    /**
     * Set <language_code> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\ListInfoTypesRequest
     */
    public function setLanguageCode( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class ListInfoTypesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\InfoTypeDescription[]  */
    public $info_types = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.ListInfoTypesResponse');

      // REPEATED MESSAGE info_types = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "info_types";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\InfoTypeDescription';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <info_types> has a value
     *
     * @return boolean
     */
    public function hasInfoTypes(){
      return $this->_has(1);
    }
    
    /**
     * Clear <info_types> value
     *
     * @return \google\privacy\dlp\v2beta1\ListInfoTypesResponse
     */
    public function clearInfoTypes(){
      return $this->_clear(1);
    }
    
    /**
     * Get <info_types> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\InfoTypeDescription
     */
    public function getInfoTypes($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <info_types> value
     *
     * @param \google\privacy\dlp\v2beta1\InfoTypeDescription $value
     * @return \google\privacy\dlp\v2beta1\ListInfoTypesResponse
     */
    public function setInfoTypes(\google\privacy\dlp\v2beta1\InfoTypeDescription $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <info_types>
     *
     * @return \google\privacy\dlp\v2beta1\InfoTypeDescription[]
     */
    public function getInfoTypesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <info_types>
     *
     * @param \google\privacy\dlp\v2beta1\InfoTypeDescription $value
     * @return \google\privacy\dlp\v2beta1\ListInfoTypesResponse
     */
    public function addInfoTypes(\google\privacy\dlp\v2beta1\InfoTypeDescription $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class CategoryDescription extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $display_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.CategoryDescription');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING display_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "display_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\privacy\dlp\v2beta1\CategoryDescription
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\CategoryDescription
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <display_name> has a value
     *
     * @return boolean
     */
    public function hasDisplayName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <display_name> value
     *
     * @return \google\privacy\dlp\v2beta1\CategoryDescription
     */
    public function clearDisplayName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <display_name> value
     *
     * @return string
     */
    public function getDisplayName(){
      return $this->_get(2);
    }
    
    /**
     * Set <display_name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\CategoryDescription
     */
    public function setDisplayName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class ListRootCategoriesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $language_code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.ListRootCategoriesRequest');

      // OPTIONAL STRING language_code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "language_code";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <language_code> has a value
     *
     * @return boolean
     */
    public function hasLanguageCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <language_code> value
     *
     * @return \google\privacy\dlp\v2beta1\ListRootCategoriesRequest
     */
    public function clearLanguageCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <language_code> value
     *
     * @return string
     */
    public function getLanguageCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <language_code> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\ListRootCategoriesRequest
     */
    public function setLanguageCode( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class ListRootCategoriesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\CategoryDescription[]  */
    public $categories = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.ListRootCategoriesResponse');

      // REPEATED MESSAGE categories = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "categories";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\CategoryDescription';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <categories> has a value
     *
     * @return boolean
     */
    public function hasCategories(){
      return $this->_has(1);
    }
    
    /**
     * Clear <categories> value
     *
     * @return \google\privacy\dlp\v2beta1\ListRootCategoriesResponse
     */
    public function clearCategories(){
      return $this->_clear(1);
    }
    
    /**
     * Get <categories> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\CategoryDescription
     */
    public function getCategories($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <categories> value
     *
     * @param \google\privacy\dlp\v2beta1\CategoryDescription $value
     * @return \google\privacy\dlp\v2beta1\ListRootCategoriesResponse
     */
    public function setCategories(\google\privacy\dlp\v2beta1\CategoryDescription $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <categories>
     *
     * @return \google\privacy\dlp\v2beta1\CategoryDescription[]
     */
    public function getCategoriesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <categories>
     *
     * @param \google\privacy\dlp\v2beta1\CategoryDescription $value
     * @return \google\privacy\dlp\v2beta1\ListRootCategoriesResponse
     */
    public function addCategories(\google\privacy\dlp\v2beta1\CategoryDescription $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class DlpServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\privacy\dlp\v2beta1\InspectContentRequest $input
     */
    public function InspectContent(\google\privacy\dlp\v2beta1\InspectContentRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.privacy.dlp.v2beta1.DlpService/InspectContent', $argument, '\google\privacy\dlp\v2beta1\InspectContentResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\privacy\dlp\v2beta1\RedactContentRequest $input
     */
    public function RedactContent(\google\privacy\dlp\v2beta1\RedactContentRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.privacy.dlp.v2beta1.DlpService/RedactContent', $argument, '\google\privacy\dlp\v2beta1\RedactContentResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\privacy\dlp\v2beta1\CreateInspectOperationRequest $input
     */
    public function CreateInspectOperation(\google\privacy\dlp\v2beta1\CreateInspectOperationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.privacy.dlp.v2beta1.DlpService/CreateInspectOperation', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\privacy\dlp\v2beta1\ListInspectFindingsRequest $input
     */
    public function ListInspectFindings(\google\privacy\dlp\v2beta1\ListInspectFindingsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.privacy.dlp.v2beta1.DlpService/ListInspectFindings', $argument, '\google\privacy\dlp\v2beta1\ListInspectFindingsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\privacy\dlp\v2beta1\ListInfoTypesRequest $input
     */
    public function ListInfoTypes(\google\privacy\dlp\v2beta1\ListInfoTypesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.privacy.dlp.v2beta1.DlpService/ListInfoTypes', $argument, '\google\privacy\dlp\v2beta1\ListInfoTypesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\privacy\dlp\v2beta1\ListRootCategoriesRequest $input
     */
    public function ListRootCategories(\google\privacy\dlp\v2beta1\ListRootCategoriesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.privacy.dlp.v2beta1.DlpService/ListRootCategories', $argument, '\google\privacy\dlp\v2beta1\ListRootCategoriesResponse::deserialize', $metadata, $options);
    }
  }
}
