<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/devtools/clouddebugger/v2/debugger.proto
//   Date: 2017-06-13 04:25:12

namespace google\devtools\clouddebugger\v2 {

  class SetBreakpointRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $debuggee_id = null;
    
    /**  @var \google\devtools\clouddebugger\v2\Breakpoint */
    public $breakpoint = null;
    
    /**  @var string */
    public $client_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.SetBreakpointRequest');

      // OPTIONAL STRING debuggee_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "debuggee_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE breakpoint = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "breakpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint';
      $descriptor->addField($f);

      // OPTIONAL STRING client_version = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "client_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <debuggee_id> has a value
     *
     * @return boolean
     */
    public function hasDebuggeeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <debuggee_id> value
     *
     * @return \google\devtools\clouddebugger\v2\SetBreakpointRequest
     */
    public function clearDebuggeeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <debuggee_id> value
     *
     * @return string
     */
    public function getDebuggeeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <debuggee_id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\SetBreakpointRequest
     */
    public function setDebuggeeId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <breakpoint> has a value
     *
     * @return boolean
     */
    public function hasBreakpoint(){
      return $this->_has(2);
    }
    
    /**
     * Clear <breakpoint> value
     *
     * @return \google\devtools\clouddebugger\v2\SetBreakpointRequest
     */
    public function clearBreakpoint(){
      return $this->_clear(2);
    }
    
    /**
     * Get <breakpoint> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function getBreakpoint(){
      return $this->_get(2);
    }
    
    /**
     * Set <breakpoint> value
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint $value
     * @return \google\devtools\clouddebugger\v2\SetBreakpointRequest
     */
    public function setBreakpoint(\google\devtools\clouddebugger\v2\Breakpoint $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <client_version> has a value
     *
     * @return boolean
     */
    public function hasClientVersion(){
      return $this->_has(4);
    }
    
    /**
     * Clear <client_version> value
     *
     * @return \google\devtools\clouddebugger\v2\SetBreakpointRequest
     */
    public function clearClientVersion(){
      return $this->_clear(4);
    }
    
    /**
     * Get <client_version> value
     *
     * @return string
     */
    public function getClientVersion(){
      return $this->_get(4);
    }
    
    /**
     * Set <client_version> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\SetBreakpointRequest
     */
    public function setClientVersion( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class SetBreakpointResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\clouddebugger\v2\Breakpoint */
    public $breakpoint = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.SetBreakpointResponse');

      // OPTIONAL MESSAGE breakpoint = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "breakpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <breakpoint> has a value
     *
     * @return boolean
     */
    public function hasBreakpoint(){
      return $this->_has(1);
    }
    
    /**
     * Clear <breakpoint> value
     *
     * @return \google\devtools\clouddebugger\v2\SetBreakpointResponse
     */
    public function clearBreakpoint(){
      return $this->_clear(1);
    }
    
    /**
     * Get <breakpoint> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function getBreakpoint(){
      return $this->_get(1);
    }
    
    /**
     * Set <breakpoint> value
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint $value
     * @return \google\devtools\clouddebugger\v2\SetBreakpointResponse
     */
    public function setBreakpoint(\google\devtools\clouddebugger\v2\Breakpoint $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class GetBreakpointRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $debuggee_id = null;
    
    /**  @var string */
    public $breakpoint_id = null;
    
    /**  @var string */
    public $client_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.GetBreakpointRequest');

      // OPTIONAL STRING debuggee_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "debuggee_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING breakpoint_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "breakpoint_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING client_version = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "client_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <debuggee_id> has a value
     *
     * @return boolean
     */
    public function hasDebuggeeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <debuggee_id> value
     *
     * @return \google\devtools\clouddebugger\v2\GetBreakpointRequest
     */
    public function clearDebuggeeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <debuggee_id> value
     *
     * @return string
     */
    public function getDebuggeeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <debuggee_id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\GetBreakpointRequest
     */
    public function setDebuggeeId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <breakpoint_id> has a value
     *
     * @return boolean
     */
    public function hasBreakpointId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <breakpoint_id> value
     *
     * @return \google\devtools\clouddebugger\v2\GetBreakpointRequest
     */
    public function clearBreakpointId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <breakpoint_id> value
     *
     * @return string
     */
    public function getBreakpointId(){
      return $this->_get(2);
    }
    
    /**
     * Set <breakpoint_id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\GetBreakpointRequest
     */
    public function setBreakpointId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <client_version> has a value
     *
     * @return boolean
     */
    public function hasClientVersion(){
      return $this->_has(4);
    }
    
    /**
     * Clear <client_version> value
     *
     * @return \google\devtools\clouddebugger\v2\GetBreakpointRequest
     */
    public function clearClientVersion(){
      return $this->_clear(4);
    }
    
    /**
     * Get <client_version> value
     *
     * @return string
     */
    public function getClientVersion(){
      return $this->_get(4);
    }
    
    /**
     * Set <client_version> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\GetBreakpointRequest
     */
    public function setClientVersion( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class GetBreakpointResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\clouddebugger\v2\Breakpoint */
    public $breakpoint = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.GetBreakpointResponse');

      // OPTIONAL MESSAGE breakpoint = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "breakpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <breakpoint> has a value
     *
     * @return boolean
     */
    public function hasBreakpoint(){
      return $this->_has(1);
    }
    
    /**
     * Clear <breakpoint> value
     *
     * @return \google\devtools\clouddebugger\v2\GetBreakpointResponse
     */
    public function clearBreakpoint(){
      return $this->_clear(1);
    }
    
    /**
     * Get <breakpoint> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function getBreakpoint(){
      return $this->_get(1);
    }
    
    /**
     * Set <breakpoint> value
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint $value
     * @return \google\devtools\clouddebugger\v2\GetBreakpointResponse
     */
    public function setBreakpoint(\google\devtools\clouddebugger\v2\Breakpoint $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class DeleteBreakpointRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $debuggee_id = null;
    
    /**  @var string */
    public $breakpoint_id = null;
    
    /**  @var string */
    public $client_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.DeleteBreakpointRequest');

      // OPTIONAL STRING debuggee_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "debuggee_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING breakpoint_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "breakpoint_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING client_version = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "client_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <debuggee_id> has a value
     *
     * @return boolean
     */
    public function hasDebuggeeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <debuggee_id> value
     *
     * @return \google\devtools\clouddebugger\v2\DeleteBreakpointRequest
     */
    public function clearDebuggeeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <debuggee_id> value
     *
     * @return string
     */
    public function getDebuggeeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <debuggee_id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\DeleteBreakpointRequest
     */
    public function setDebuggeeId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <breakpoint_id> has a value
     *
     * @return boolean
     */
    public function hasBreakpointId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <breakpoint_id> value
     *
     * @return \google\devtools\clouddebugger\v2\DeleteBreakpointRequest
     */
    public function clearBreakpointId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <breakpoint_id> value
     *
     * @return string
     */
    public function getBreakpointId(){
      return $this->_get(2);
    }
    
    /**
     * Set <breakpoint_id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\DeleteBreakpointRequest
     */
    public function setBreakpointId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <client_version> has a value
     *
     * @return boolean
     */
    public function hasClientVersion(){
      return $this->_has(3);
    }
    
    /**
     * Clear <client_version> value
     *
     * @return \google\devtools\clouddebugger\v2\DeleteBreakpointRequest
     */
    public function clearClientVersion(){
      return $this->_clear(3);
    }
    
    /**
     * Get <client_version> value
     *
     * @return string
     */
    public function getClientVersion(){
      return $this->_get(3);
    }
    
    /**
     * Set <client_version> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\DeleteBreakpointRequest
     */
    public function setClientVersion( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2\ListBreakpointsRequest {

  class BreakpointActionValue extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\devtools\clouddebugger\v2\Breakpoint\Action */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue');

      // OPTIONAL ENUM value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint\Action';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest\BreakpointActionValue
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return int - \google\devtools\clouddebugger\v2\Breakpoint\Action
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param int - \google\devtools\clouddebugger\v2\Breakpoint\Action $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest\BreakpointActionValue
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class ListBreakpointsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $debuggee_id = null;
    
    /**  @var boolean */
    public $include_all_users = null;
    
    /**  @var boolean */
    public $include_inactive = null;
    
    /**  @var \google\devtools\clouddebugger\v2\ListBreakpointsRequest\BreakpointActionValue */
    public $action = null;
    
    /**  @var boolean */
    public $strip_results = null;
    
    /**  @var string */
    public $wait_token = null;
    
    /**  @var string */
    public $client_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.ListBreakpointsRequest');

      // OPTIONAL STRING debuggee_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "debuggee_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL include_all_users = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "include_all_users";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL include_inactive = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "include_inactive";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE action = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "action";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\ListBreakpointsRequest\BreakpointActionValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL strip_results = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "strip_results";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING wait_token = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "wait_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING client_version = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "client_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <debuggee_id> has a value
     *
     * @return boolean
     */
    public function hasDebuggeeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <debuggee_id> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function clearDebuggeeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <debuggee_id> value
     *
     * @return string
     */
    public function getDebuggeeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <debuggee_id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function setDebuggeeId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <include_all_users> has a value
     *
     * @return boolean
     */
    public function hasIncludeAllUsers(){
      return $this->_has(2);
    }
    
    /**
     * Clear <include_all_users> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function clearIncludeAllUsers(){
      return $this->_clear(2);
    }
    
    /**
     * Get <include_all_users> value
     *
     * @return boolean
     */
    public function getIncludeAllUsers(){
      return $this->_get(2);
    }
    
    /**
     * Set <include_all_users> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function setIncludeAllUsers( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <include_inactive> has a value
     *
     * @return boolean
     */
    public function hasIncludeInactive(){
      return $this->_has(3);
    }
    
    /**
     * Clear <include_inactive> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function clearIncludeInactive(){
      return $this->_clear(3);
    }
    
    /**
     * Get <include_inactive> value
     *
     * @return boolean
     */
    public function getIncludeInactive(){
      return $this->_get(3);
    }
    
    /**
     * Set <include_inactive> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function setIncludeInactive( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <action> has a value
     *
     * @return boolean
     */
    public function hasAction(){
      return $this->_has(4);
    }
    
    /**
     * Clear <action> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function clearAction(){
      return $this->_clear(4);
    }
    
    /**
     * Get <action> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest\BreakpointActionValue
     */
    public function getAction(){
      return $this->_get(4);
    }
    
    /**
     * Set <action> value
     *
     * @param \google\devtools\clouddebugger\v2\ListBreakpointsRequest\BreakpointActionValue $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function setAction(\google\devtools\clouddebugger\v2\ListBreakpointsRequest\BreakpointActionValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <strip_results> has a value
     *
     * @return boolean
     */
    public function hasStripResults(){
      return $this->_has(5);
    }
    
    /**
     * Clear <strip_results> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function clearStripResults(){
      return $this->_clear(5);
    }
    
    /**
     * Get <strip_results> value
     *
     * @return boolean
     */
    public function getStripResults(){
      return $this->_get(5);
    }
    
    /**
     * Set <strip_results> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function setStripResults( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <wait_token> has a value
     *
     * @return boolean
     */
    public function hasWaitToken(){
      return $this->_has(6);
    }
    
    /**
     * Clear <wait_token> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function clearWaitToken(){
      return $this->_clear(6);
    }
    
    /**
     * Get <wait_token> value
     *
     * @return string
     */
    public function getWaitToken(){
      return $this->_get(6);
    }
    
    /**
     * Set <wait_token> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function setWaitToken( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <client_version> has a value
     *
     * @return boolean
     */
    public function hasClientVersion(){
      return $this->_has(8);
    }
    
    /**
     * Clear <client_version> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function clearClientVersion(){
      return $this->_clear(8);
    }
    
    /**
     * Get <client_version> value
     *
     * @return string
     */
    public function getClientVersion(){
      return $this->_get(8);
    }
    
    /**
     * Set <client_version> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsRequest
     */
    public function setClientVersion( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class ListBreakpointsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\clouddebugger\v2\Breakpoint[]  */
    public $breakpoints = array();
    
    /**  @var string */
    public $next_wait_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.ListBreakpointsResponse');

      // REPEATED MESSAGE breakpoints = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "breakpoints";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint';
      $descriptor->addField($f);

      // OPTIONAL STRING next_wait_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_wait_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <breakpoints> has a value
     *
     * @return boolean
     */
    public function hasBreakpoints(){
      return $this->_has(1);
    }
    
    /**
     * Clear <breakpoints> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsResponse
     */
    public function clearBreakpoints(){
      return $this->_clear(1);
    }
    
    /**
     * Get <breakpoints> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function getBreakpoints($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <breakpoints> value
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsResponse
     */
    public function setBreakpoints(\google\devtools\clouddebugger\v2\Breakpoint $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <breakpoints>
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint[]
     */
    public function getBreakpointsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <breakpoints>
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsResponse
     */
    public function addBreakpoints(\google\devtools\clouddebugger\v2\Breakpoint $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_wait_token> has a value
     *
     * @return boolean
     */
    public function hasNextWaitToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_wait_token> value
     *
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsResponse
     */
    public function clearNextWaitToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_wait_token> value
     *
     * @return string
     */
    public function getNextWaitToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_wait_token> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\ListBreakpointsResponse
     */
    public function setNextWaitToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class ListDebuggeesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project = null;
    
    /**  @var boolean */
    public $include_inactive = null;
    
    /**  @var string */
    public $client_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.ListDebuggeesRequest');

      // OPTIONAL STRING project = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "project";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL include_inactive = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "include_inactive";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING client_version = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "client_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project> has a value
     *
     * @return boolean
     */
    public function hasProject(){
      return $this->_has(2);
    }
    
    /**
     * Clear <project> value
     *
     * @return \google\devtools\clouddebugger\v2\ListDebuggeesRequest
     */
    public function clearProject(){
      return $this->_clear(2);
    }
    
    /**
     * Get <project> value
     *
     * @return string
     */
    public function getProject(){
      return $this->_get(2);
    }
    
    /**
     * Set <project> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\ListDebuggeesRequest
     */
    public function setProject( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <include_inactive> has a value
     *
     * @return boolean
     */
    public function hasIncludeInactive(){
      return $this->_has(3);
    }
    
    /**
     * Clear <include_inactive> value
     *
     * @return \google\devtools\clouddebugger\v2\ListDebuggeesRequest
     */
    public function clearIncludeInactive(){
      return $this->_clear(3);
    }
    
    /**
     * Get <include_inactive> value
     *
     * @return boolean
     */
    public function getIncludeInactive(){
      return $this->_get(3);
    }
    
    /**
     * Set <include_inactive> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\ListDebuggeesRequest
     */
    public function setIncludeInactive( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <client_version> has a value
     *
     * @return boolean
     */
    public function hasClientVersion(){
      return $this->_has(4);
    }
    
    /**
     * Clear <client_version> value
     *
     * @return \google\devtools\clouddebugger\v2\ListDebuggeesRequest
     */
    public function clearClientVersion(){
      return $this->_clear(4);
    }
    
    /**
     * Get <client_version> value
     *
     * @return string
     */
    public function getClientVersion(){
      return $this->_get(4);
    }
    
    /**
     * Set <client_version> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\ListDebuggeesRequest
     */
    public function setClientVersion( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class ListDebuggeesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\clouddebugger\v2\Debuggee[]  */
    public $debuggees = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.ListDebuggeesResponse');

      // REPEATED MESSAGE debuggees = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "debuggees";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Debuggee';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <debuggees> has a value
     *
     * @return boolean
     */
    public function hasDebuggees(){
      return $this->_has(1);
    }
    
    /**
     * Clear <debuggees> value
     *
     * @return \google\devtools\clouddebugger\v2\ListDebuggeesResponse
     */
    public function clearDebuggees(){
      return $this->_clear(1);
    }
    
    /**
     * Get <debuggees> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function getDebuggees($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <debuggees> value
     *
     * @param \google\devtools\clouddebugger\v2\Debuggee $value
     * @return \google\devtools\clouddebugger\v2\ListDebuggeesResponse
     */
    public function setDebuggees(\google\devtools\clouddebugger\v2\Debuggee $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <debuggees>
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee[]
     */
    public function getDebuggeesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <debuggees>
     *
     * @param \google\devtools\clouddebugger\v2\Debuggee $value
     * @return \google\devtools\clouddebugger\v2\ListDebuggeesResponse
     */
    public function addDebuggees(\google\devtools\clouddebugger\v2\Debuggee $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class Debugger2Client extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\devtools\clouddebugger\v2\SetBreakpointRequest $input
     */
    public function SetBreakpoint(\google\devtools\clouddebugger\v2\SetBreakpointRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.clouddebugger.v2.Debugger2/SetBreakpoint', $argument, '\google\devtools\clouddebugger\v2\SetBreakpointResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\clouddebugger\v2\GetBreakpointRequest $input
     */
    public function GetBreakpoint(\google\devtools\clouddebugger\v2\GetBreakpointRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.clouddebugger.v2.Debugger2/GetBreakpoint', $argument, '\google\devtools\clouddebugger\v2\GetBreakpointResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\clouddebugger\v2\DeleteBreakpointRequest $input
     */
    public function DeleteBreakpoint(\google\devtools\clouddebugger\v2\DeleteBreakpointRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.clouddebugger.v2.Debugger2/DeleteBreakpoint', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\clouddebugger\v2\ListBreakpointsRequest $input
     */
    public function ListBreakpoints(\google\devtools\clouddebugger\v2\ListBreakpointsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.clouddebugger.v2.Debugger2/ListBreakpoints', $argument, '\google\devtools\clouddebugger\v2\ListBreakpointsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\clouddebugger\v2\ListDebuggeesRequest $input
     */
    public function ListDebuggees(\google\devtools\clouddebugger\v2\ListDebuggeesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.clouddebugger.v2.Debugger2/ListDebuggees', $argument, '\google\devtools\clouddebugger\v2\ListDebuggeesResponse::deserialize', $metadata, $options);
    }
  }
}
