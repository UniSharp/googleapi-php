<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/privacy/dlp/v2beta1/storage.proto
//   Date: 2017-06-13 04:26:19

namespace google\privacy\dlp\v2beta1 {

  class InfoType extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.InfoType');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\privacy\dlp\v2beta1\InfoType
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\InfoType
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class FieldId extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $column_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.FieldId');

      // OPTIONAL STRING column_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "column_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <column_name> has a value
     *
     * @return boolean
     */
    public function hasColumnName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <column_name> value
     *
     * @return \google\privacy\dlp\v2beta1\FieldId
     */
    public function clearColumnName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <column_name> value
     *
     * @return string
     */
    public function getColumnName(){
      return $this->_get(1);
    }
    
    /**
     * Set <column_name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\FieldId
     */
    public function setColumnName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class PartitionId extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $namespace_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.PartitionId');

      // OPTIONAL STRING project_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING namespace_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "namespace_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\privacy\dlp\v2beta1\PartitionId
     */
    public function clearProjectId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(2);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\PartitionId
     */
    public function setProjectId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <namespace_id> has a value
     *
     * @return boolean
     */
    public function hasNamespaceId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <namespace_id> value
     *
     * @return \google\privacy\dlp\v2beta1\PartitionId
     */
    public function clearNamespaceId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <namespace_id> value
     *
     * @return string
     */
    public function getNamespaceId(){
      return $this->_get(4);
    }
    
    /**
     * Set <namespace_id> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\PartitionId
     */
    public function setNamespaceId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class KindExpression extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.KindExpression');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\privacy\dlp\v2beta1\KindExpression
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\KindExpression
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class PropertyReference extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.PropertyReference');

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\privacy\dlp\v2beta1\PropertyReference
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\PropertyReference
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class Projection extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\PropertyReference */
    public $property = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.Projection');

      // OPTIONAL MESSAGE property = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\PropertyReference';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <property> has a value
     *
     * @return boolean
     */
    public function hasProperty(){
      return $this->_has(1);
    }
    
    /**
     * Clear <property> value
     *
     * @return \google\privacy\dlp\v2beta1\Projection
     */
    public function clearProperty(){
      return $this->_clear(1);
    }
    
    /**
     * Get <property> value
     *
     * @return \google\privacy\dlp\v2beta1\PropertyReference
     */
    public function getProperty(){
      return $this->_get(1);
    }
    
    /**
     * Set <property> value
     *
     * @param \google\privacy\dlp\v2beta1\PropertyReference $value
     * @return \google\privacy\dlp\v2beta1\Projection
     */
    public function setProperty(\google\privacy\dlp\v2beta1\PropertyReference $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class DatastoreOptions extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\PartitionId */
    public $partition_id = null;
    
    /**  @var \google\privacy\dlp\v2beta1\KindExpression */
    public $kind = null;
    
    /**  @var \google\privacy\dlp\v2beta1\Projection[]  */
    public $projection = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.DatastoreOptions');

      // OPTIONAL MESSAGE partition_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "partition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\PartitionId';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE kind = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\KindExpression';
      $descriptor->addField($f);

      // REPEATED MESSAGE projection = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "projection";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\Projection';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <partition_id> has a value
     *
     * @return boolean
     */
    public function hasPartitionId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <partition_id> value
     *
     * @return \google\privacy\dlp\v2beta1\DatastoreOptions
     */
    public function clearPartitionId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <partition_id> value
     *
     * @return \google\privacy\dlp\v2beta1\PartitionId
     */
    public function getPartitionId(){
      return $this->_get(1);
    }
    
    /**
     * Set <partition_id> value
     *
     * @param \google\privacy\dlp\v2beta1\PartitionId $value
     * @return \google\privacy\dlp\v2beta1\DatastoreOptions
     */
    public function setPartitionId(\google\privacy\dlp\v2beta1\PartitionId $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(2);
    }
    
    /**
     * Clear <kind> value
     *
     * @return \google\privacy\dlp\v2beta1\DatastoreOptions
     */
    public function clearKind(){
      return $this->_clear(2);
    }
    
    /**
     * Get <kind> value
     *
     * @return \google\privacy\dlp\v2beta1\KindExpression
     */
    public function getKind(){
      return $this->_get(2);
    }
    
    /**
     * Set <kind> value
     *
     * @param \google\privacy\dlp\v2beta1\KindExpression $value
     * @return \google\privacy\dlp\v2beta1\DatastoreOptions
     */
    public function setKind(\google\privacy\dlp\v2beta1\KindExpression $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <projection> has a value
     *
     * @return boolean
     */
    public function hasProjection(){
      return $this->_has(3);
    }
    
    /**
     * Clear <projection> value
     *
     * @return \google\privacy\dlp\v2beta1\DatastoreOptions
     */
    public function clearProjection(){
      return $this->_clear(3);
    }
    
    /**
     * Get <projection> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\Projection
     */
    public function getProjection($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <projection> value
     *
     * @param \google\privacy\dlp\v2beta1\Projection $value
     * @return \google\privacy\dlp\v2beta1\DatastoreOptions
     */
    public function setProjection(\google\privacy\dlp\v2beta1\Projection $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <projection>
     *
     * @return \google\privacy\dlp\v2beta1\Projection[]
     */
    public function getProjectionList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <projection>
     *
     * @param \google\privacy\dlp\v2beta1\Projection $value
     * @return \google\privacy\dlp\v2beta1\DatastoreOptions
     */
    public function addProjection(\google\privacy\dlp\v2beta1\Projection $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1\CloudStorageOptions {

  class FileSet extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $url = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.CloudStorageOptions.FileSet');

      // OPTIONAL STRING url = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <url> value
     *
     * @return \google\privacy\dlp\v2beta1\CloudStorageOptions\FileSet
     */
    public function clearUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\CloudStorageOptions\FileSet
     */
    public function setUrl( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class CloudStorageOptions extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\CloudStorageOptions\FileSet */
    public $file_set = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.CloudStorageOptions');

      // OPTIONAL MESSAGE file_set = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "file_set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\CloudStorageOptions\FileSet';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <file_set> has a value
     *
     * @return boolean
     */
    public function hasFileSet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <file_set> value
     *
     * @return \google\privacy\dlp\v2beta1\CloudStorageOptions
     */
    public function clearFileSet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <file_set> value
     *
     * @return \google\privacy\dlp\v2beta1\CloudStorageOptions\FileSet
     */
    public function getFileSet(){
      return $this->_get(1);
    }
    
    /**
     * Set <file_set> value
     *
     * @param \google\privacy\dlp\v2beta1\CloudStorageOptions\FileSet $value
     * @return \google\privacy\dlp\v2beta1\CloudStorageOptions
     */
    public function setFileSet(\google\privacy\dlp\v2beta1\CloudStorageOptions\FileSet $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class CloudStoragePath extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $path = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.CloudStoragePath');

      // OPTIONAL STRING path = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(1);
    }
    
    /**
     * Clear <path> value
     *
     * @return \google\privacy\dlp\v2beta1\CloudStoragePath
     */
    public function clearPath(){
      return $this->_clear(1);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(1);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\CloudStoragePath
     */
    public function setPath( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class StorageConfig extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\DatastoreOptions */
    public $datastore_options = null;
    
    /**  @var \google\privacy\dlp\v2beta1\CloudStorageOptions */
    public $cloud_storage_options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.StorageConfig');

      // OPTIONAL MESSAGE datastore_options = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "datastore_options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\DatastoreOptions';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cloud_storage_options = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cloud_storage_options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\CloudStorageOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <datastore_options> has a value
     *
     * @return boolean
     */
    public function hasDatastoreOptions(){
      return $this->_has(2);
    }
    
    /**
     * Clear <datastore_options> value
     *
     * @return \google\privacy\dlp\v2beta1\StorageConfig
     */
    public function clearDatastoreOptions(){
      return $this->_clear(2);
    }
    
    /**
     * Get <datastore_options> value
     *
     * @return \google\privacy\dlp\v2beta1\DatastoreOptions
     */
    public function getDatastoreOptions(){
      return $this->_get(2);
    }
    
    /**
     * Set <datastore_options> value
     *
     * @param \google\privacy\dlp\v2beta1\DatastoreOptions $value
     * @return \google\privacy\dlp\v2beta1\StorageConfig
     */
    public function setDatastoreOptions(\google\privacy\dlp\v2beta1\DatastoreOptions $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cloud_storage_options> has a value
     *
     * @return boolean
     */
    public function hasCloudStorageOptions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cloud_storage_options> value
     *
     * @return \google\privacy\dlp\v2beta1\StorageConfig
     */
    public function clearCloudStorageOptions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cloud_storage_options> value
     *
     * @return \google\privacy\dlp\v2beta1\CloudStorageOptions
     */
    public function getCloudStorageOptions(){
      return $this->_get(3);
    }
    
    /**
     * Set <cloud_storage_options> value
     *
     * @param \google\privacy\dlp\v2beta1\CloudStorageOptions $value
     * @return \google\privacy\dlp\v2beta1\StorageConfig
     */
    public function setCloudStorageOptions(\google\privacy\dlp\v2beta1\CloudStorageOptions $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class CloudStorageKey extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $file_path = null;
    
    /**  @var int */
    public $start_offset = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.CloudStorageKey');

      // OPTIONAL STRING file_path = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "file_path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 start_offset = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_offset";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <file_path> has a value
     *
     * @return boolean
     */
    public function hasFilePath(){
      return $this->_has(1);
    }
    
    /**
     * Clear <file_path> value
     *
     * @return \google\privacy\dlp\v2beta1\CloudStorageKey
     */
    public function clearFilePath(){
      return $this->_clear(1);
    }
    
    /**
     * Get <file_path> value
     *
     * @return string
     */
    public function getFilePath(){
      return $this->_get(1);
    }
    
    /**
     * Set <file_path> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\CloudStorageKey
     */
    public function setFilePath( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <start_offset> has a value
     *
     * @return boolean
     */
    public function hasStartOffset(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_offset> value
     *
     * @return \google\privacy\dlp\v2beta1\CloudStorageKey
     */
    public function clearStartOffset(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_offset> value
     *
     * @return int
     */
    public function getStartOffset(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_offset> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\CloudStorageKey
     */
    public function setStartOffset( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class DatastoreKey extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\Key */
    public $entity_key = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.DatastoreKey');

      // OPTIONAL MESSAGE entity_key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entity_key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entity_key> has a value
     *
     * @return boolean
     */
    public function hasEntityKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entity_key> value
     *
     * @return \google\privacy\dlp\v2beta1\DatastoreKey
     */
    public function clearEntityKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entity_key> value
     *
     * @return \google\privacy\dlp\v2beta1\Key
     */
    public function getEntityKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <entity_key> value
     *
     * @param \google\privacy\dlp\v2beta1\Key $value
     * @return \google\privacy\dlp\v2beta1\DatastoreKey
     */
    public function setEntityKey(\google\privacy\dlp\v2beta1\Key $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1\Key {

  class PathElement extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $kind = null;
    
    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.Key.PathElement');

      // OPTIONAL STRING kind = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kind> value
     *
     * @return \google\privacy\dlp\v2beta1\Key\PathElement
     */
    public function clearKind(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kind> value
     *
     * @return string
     */
    public function getKind(){
      return $this->_get(1);
    }
    
    /**
     * Set <kind> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\Key\PathElement
     */
    public function setKind( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\privacy\dlp\v2beta1\Key\PathElement
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \google\privacy\dlp\v2beta1\Key\PathElement
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\privacy\dlp\v2beta1\Key\PathElement
     */
    public function clearName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(3);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\privacy\dlp\v2beta1\Key\PathElement
     */
    public function setName( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class Key extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\PartitionId */
    public $partition_id = null;
    
    /**  @var \google\privacy\dlp\v2beta1\Key\PathElement[]  */
    public $path = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.Key');

      // OPTIONAL MESSAGE partition_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "partition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\PartitionId';
      $descriptor->addField($f);

      // REPEATED MESSAGE path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\privacy\dlp\v2beta1\Key\PathElement';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <partition_id> has a value
     *
     * @return boolean
     */
    public function hasPartitionId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <partition_id> value
     *
     * @return \google\privacy\dlp\v2beta1\Key
     */
    public function clearPartitionId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <partition_id> value
     *
     * @return \google\privacy\dlp\v2beta1\PartitionId
     */
    public function getPartitionId(){
      return $this->_get(1);
    }
    
    /**
     * Set <partition_id> value
     *
     * @param \google\privacy\dlp\v2beta1\PartitionId $value
     * @return \google\privacy\dlp\v2beta1\Key
     */
    public function setPartitionId(\google\privacy\dlp\v2beta1\PartitionId $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(2);
    }
    
    /**
     * Clear <path> value
     *
     * @return \google\privacy\dlp\v2beta1\Key
     */
    public function clearPath(){
      return $this->_clear(2);
    }
    
    /**
     * Get <path> value
     *
     * @param int $idx
     * @return \google\privacy\dlp\v2beta1\Key\PathElement
     */
    public function getPath($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <path> value
     *
     * @param \google\privacy\dlp\v2beta1\Key\PathElement $value
     * @return \google\privacy\dlp\v2beta1\Key
     */
    public function setPath(\google\privacy\dlp\v2beta1\Key\PathElement $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <path>
     *
     * @return \google\privacy\dlp\v2beta1\Key\PathElement[]
     */
    public function getPathList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <path>
     *
     * @param \google\privacy\dlp\v2beta1\Key\PathElement $value
     * @return \google\privacy\dlp\v2beta1\Key
     */
    public function addPath(\google\privacy\dlp\v2beta1\Key\PathElement $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\privacy\dlp\v2beta1 {

  class RecordKey extends \DrSlump\Protobuf\Message {

    /**  @var \google\privacy\dlp\v2beta1\CloudStorageKey */
    public $cloud_storage_key = null;
    
    /**  @var \google\privacy\dlp\v2beta1\DatastoreKey */
    public $datastore_key = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.privacy.dlp.v2beta1.RecordKey');

      // OPTIONAL MESSAGE cloud_storage_key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cloud_storage_key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\CloudStorageKey';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE datastore_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "datastore_key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\privacy\dlp\v2beta1\DatastoreKey';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cloud_storage_key> has a value
     *
     * @return boolean
     */
    public function hasCloudStorageKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cloud_storage_key> value
     *
     * @return \google\privacy\dlp\v2beta1\RecordKey
     */
    public function clearCloudStorageKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cloud_storage_key> value
     *
     * @return \google\privacy\dlp\v2beta1\CloudStorageKey
     */
    public function getCloudStorageKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <cloud_storage_key> value
     *
     * @param \google\privacy\dlp\v2beta1\CloudStorageKey $value
     * @return \google\privacy\dlp\v2beta1\RecordKey
     */
    public function setCloudStorageKey(\google\privacy\dlp\v2beta1\CloudStorageKey $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <datastore_key> has a value
     *
     * @return boolean
     */
    public function hasDatastoreKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <datastore_key> value
     *
     * @return \google\privacy\dlp\v2beta1\RecordKey
     */
    public function clearDatastoreKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <datastore_key> value
     *
     * @return \google\privacy\dlp\v2beta1\DatastoreKey
     */
    public function getDatastoreKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <datastore_key> value
     *
     * @param \google\privacy\dlp\v2beta1\DatastoreKey $value
     * @return \google\privacy\dlp\v2beta1\RecordKey
     */
    public function setDatastoreKey(\google\privacy\dlp\v2beta1\DatastoreKey $value){
      return $this->_set(2, $value);
    }
  }
}

