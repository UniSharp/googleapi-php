<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/appengine/legacy/audit_data.proto
//   Date: 2017-06-13 04:23:09

namespace google\appengine\legacy\AuditData {

  class EventDataEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.legacy.AuditData.EventDataEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\appengine\legacy\AuditData\EventDataEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\appengine\legacy\AuditData\EventDataEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\appengine\legacy\AuditData\EventDataEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\appengine\legacy\AuditData\EventDataEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\appengine\legacy {

  class AuditData extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $event_message = null;
    
    /**  @var \google\appengine\legacy\AuditData\EventDataEntry[]  */
    public $event_data = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.legacy.AuditData');

      // OPTIONAL STRING event_message = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "event_message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE event_data = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "event_data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\appengine\legacy\AuditData\EventDataEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <event_message> has a value
     *
     * @return boolean
     */
    public function hasEventMessage(){
      return $this->_has(1);
    }
    
    /**
     * Clear <event_message> value
     *
     * @return \google\appengine\legacy\AuditData
     */
    public function clearEventMessage(){
      return $this->_clear(1);
    }
    
    /**
     * Get <event_message> value
     *
     * @return string
     */
    public function getEventMessage(){
      return $this->_get(1);
    }
    
    /**
     * Set <event_message> value
     *
     * @param string $value
     * @return \google\appengine\legacy\AuditData
     */
    public function setEventMessage( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <event_data> has a value
     *
     * @return boolean
     */
    public function hasEventData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <event_data> value
     *
     * @return \google\appengine\legacy\AuditData
     */
    public function clearEventData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <event_data> value
     *
     * @param int $idx
     * @return \google\appengine\legacy\AuditData\EventDataEntry
     */
    public function getEventData($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <event_data> value
     *
     * @param \google\appengine\legacy\AuditData\EventDataEntry $value
     * @return \google\appengine\legacy\AuditData
     */
    public function setEventData(\google\appengine\legacy\AuditData\EventDataEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <event_data>
     *
     * @return \google\appengine\legacy\AuditData\EventDataEntry[]
     */
    public function getEventDataList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <event_data>
     *
     * @param \google\appengine\legacy\AuditData\EventDataEntry $value
     * @return \google\appengine\legacy\AuditData
     */
    public function addEventData(\google\appengine\legacy\AuditData\EventDataEntry $value){
     return $this->_add(2, $value);
    }
  }
}

