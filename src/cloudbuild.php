<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/devtools/cloudbuild/v1/cloudbuild.proto
//   Date: 2017-06-13 04:25:05

namespace google\devtools\cloudbuild\v1 {

  class StorageSource extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $bucket = null;
    
    /**  @var string */
    public $object = null;
    
    /**  @var int */
    public $generation = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.StorageSource');

      // OPTIONAL STRING bucket = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING object = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "object";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 generation = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "generation";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <bucket> has a value
     *
     * @return boolean
     */
    public function hasBucket(){
      return $this->_has(1);
    }
    
    /**
     * Clear <bucket> value
     *
     * @return \google\devtools\cloudbuild\v1\StorageSource
     */
    public function clearBucket(){
      return $this->_clear(1);
    }
    
    /**
     * Get <bucket> value
     *
     * @return string
     */
    public function getBucket(){
      return $this->_get(1);
    }
    
    /**
     * Set <bucket> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\StorageSource
     */
    public function setBucket( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <object> has a value
     *
     * @return boolean
     */
    public function hasObject(){
      return $this->_has(2);
    }
    
    /**
     * Clear <object> value
     *
     * @return \google\devtools\cloudbuild\v1\StorageSource
     */
    public function clearObject(){
      return $this->_clear(2);
    }
    
    /**
     * Get <object> value
     *
     * @return string
     */
    public function getObject(){
      return $this->_get(2);
    }
    
    /**
     * Set <object> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\StorageSource
     */
    public function setObject( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <generation> has a value
     *
     * @return boolean
     */
    public function hasGeneration(){
      return $this->_has(3);
    }
    
    /**
     * Clear <generation> value
     *
     * @return \google\devtools\cloudbuild\v1\StorageSource
     */
    public function clearGeneration(){
      return $this->_clear(3);
    }
    
    /**
     * Get <generation> value
     *
     * @return int
     */
    public function getGeneration(){
      return $this->_get(3);
    }
    
    /**
     * Set <generation> value
     *
     * @param int $value
     * @return \google\devtools\cloudbuild\v1\StorageSource
     */
    public function setGeneration( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class RepoSource extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $repo_name = null;
    
    /**  @var string */
    public $branch_name = null;
    
    /**  @var string */
    public $tag_name = null;
    
    /**  @var string */
    public $commit_sha = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.RepoSource');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING repo_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "repo_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING branch_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "branch_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING tag_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "tag_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING commit_sha = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "commit_sha";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <repo_name> has a value
     *
     * @return boolean
     */
    public function hasRepoName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <repo_name> value
     *
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function clearRepoName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <repo_name> value
     *
     * @return string
     */
    public function getRepoName(){
      return $this->_get(2);
    }
    
    /**
     * Set <repo_name> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function setRepoName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <branch_name> has a value
     *
     * @return boolean
     */
    public function hasBranchName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <branch_name> value
     *
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function clearBranchName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <branch_name> value
     *
     * @return string
     */
    public function getBranchName(){
      return $this->_get(3);
    }
    
    /**
     * Set <branch_name> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function setBranchName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <tag_name> has a value
     *
     * @return boolean
     */
    public function hasTagName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <tag_name> value
     *
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function clearTagName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <tag_name> value
     *
     * @return string
     */
    public function getTagName(){
      return $this->_get(4);
    }
    
    /**
     * Set <tag_name> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function setTagName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <commit_sha> has a value
     *
     * @return boolean
     */
    public function hasCommitSha(){
      return $this->_has(5);
    }
    
    /**
     * Clear <commit_sha> value
     *
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function clearCommitSha(){
      return $this->_clear(5);
    }
    
    /**
     * Get <commit_sha> value
     *
     * @return string
     */
    public function getCommitSha(){
      return $this->_get(5);
    }
    
    /**
     * Set <commit_sha> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function setCommitSha( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class Source extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\cloudbuild\v1\StorageSource */
    public $storage_source = null;
    
    /**  @var \google\devtools\cloudbuild\v1\RepoSource */
    public $repo_source = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.Source');

      // OPTIONAL MESSAGE storage_source = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "storage_source";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\StorageSource';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE repo_source = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "repo_source";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\RepoSource';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <storage_source> has a value
     *
     * @return boolean
     */
    public function hasStorageSource(){
      return $this->_has(2);
    }
    
    /**
     * Clear <storage_source> value
     *
     * @return \google\devtools\cloudbuild\v1\Source
     */
    public function clearStorageSource(){
      return $this->_clear(2);
    }
    
    /**
     * Get <storage_source> value
     *
     * @return \google\devtools\cloudbuild\v1\StorageSource
     */
    public function getStorageSource(){
      return $this->_get(2);
    }
    
    /**
     * Set <storage_source> value
     *
     * @param \google\devtools\cloudbuild\v1\StorageSource $value
     * @return \google\devtools\cloudbuild\v1\Source
     */
    public function setStorageSource(\google\devtools\cloudbuild\v1\StorageSource $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <repo_source> has a value
     *
     * @return boolean
     */
    public function hasRepoSource(){
      return $this->_has(3);
    }
    
    /**
     * Clear <repo_source> value
     *
     * @return \google\devtools\cloudbuild\v1\Source
     */
    public function clearRepoSource(){
      return $this->_clear(3);
    }
    
    /**
     * Get <repo_source> value
     *
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function getRepoSource(){
      return $this->_get(3);
    }
    
    /**
     * Set <repo_source> value
     *
     * @param \google\devtools\cloudbuild\v1\RepoSource $value
     * @return \google\devtools\cloudbuild\v1\Source
     */
    public function setRepoSource(\google\devtools\cloudbuild\v1\RepoSource $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class BuiltImage extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $digest = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.BuiltImage');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING digest = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "digest";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\cloudbuild\v1\BuiltImage
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuiltImage
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <digest> has a value
     *
     * @return boolean
     */
    public function hasDigest(){
      return $this->_has(3);
    }
    
    /**
     * Clear <digest> value
     *
     * @return \google\devtools\cloudbuild\v1\BuiltImage
     */
    public function clearDigest(){
      return $this->_clear(3);
    }
    
    /**
     * Get <digest> value
     *
     * @return string
     */
    public function getDigest(){
      return $this->_get(3);
    }
    
    /**
     * Set <digest> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuiltImage
     */
    public function setDigest( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class BuildStep extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string[]  */
    public $env = array();
    
    /**  @var string[]  */
    public $args = array();
    
    /**  @var string */
    public $dir = null;
    
    /**  @var string */
    public $id = null;
    
    /**  @var string[]  */
    public $wait_for = array();
    
    /**  @var string */
    public $entrypoint = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.BuildStep');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING env = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "env";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING args = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "args";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING dir = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "dir";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING wait_for = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "wait_for";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING entrypoint = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "entrypoint";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <env> has a value
     *
     * @return boolean
     */
    public function hasEnv(){
      return $this->_has(2);
    }
    
    /**
     * Clear <env> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function clearEnv(){
      return $this->_clear(2);
    }
    
    /**
     * Get <env> value
     *
     * @param int $idx
     * @return string
     */
    public function getEnv($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <env> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function setEnv( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <env>
     *
     * @return string[]
     */
    public function getEnvList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <env>
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function addEnv( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <args> has a value
     *
     * @return boolean
     */
    public function hasArgs(){
      return $this->_has(3);
    }
    
    /**
     * Clear <args> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function clearArgs(){
      return $this->_clear(3);
    }
    
    /**
     * Get <args> value
     *
     * @param int $idx
     * @return string
     */
    public function getArgs($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <args> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function setArgs( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <args>
     *
     * @return string[]
     */
    public function getArgsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <args>
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function addArgs( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <dir> has a value
     *
     * @return boolean
     */
    public function hasDir(){
      return $this->_has(4);
    }
    
    /**
     * Clear <dir> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function clearDir(){
      return $this->_clear(4);
    }
    
    /**
     * Get <dir> value
     *
     * @return string
     */
    public function getDir(){
      return $this->_get(4);
    }
    
    /**
     * Set <dir> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function setDir( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function clearId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(5);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function setId( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <wait_for> has a value
     *
     * @return boolean
     */
    public function hasWaitFor(){
      return $this->_has(6);
    }
    
    /**
     * Clear <wait_for> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function clearWaitFor(){
      return $this->_clear(6);
    }
    
    /**
     * Get <wait_for> value
     *
     * @param int $idx
     * @return string
     */
    public function getWaitFor($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <wait_for> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function setWaitFor( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <wait_for>
     *
     * @return string[]
     */
    public function getWaitForList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <wait_for>
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function addWaitFor( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <entrypoint> has a value
     *
     * @return boolean
     */
    public function hasEntrypoint(){
      return $this->_has(7);
    }
    
    /**
     * Clear <entrypoint> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function clearEntrypoint(){
      return $this->_clear(7);
    }
    
    /**
     * Get <entrypoint> value
     *
     * @return string
     */
    public function getEntrypoint(){
      return $this->_get(7);
    }
    
    /**
     * Set <entrypoint> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function setEntrypoint( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class Results extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\cloudbuild\v1\BuiltImage[]  */
    public $images = array();
    
    /**  @var string[]  */
    public $build_step_images = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.Results');

      // REPEATED MESSAGE images = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "images";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudbuild\v1\BuiltImage';
      $descriptor->addField($f);

      // REPEATED STRING build_step_images = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "build_step_images";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <images> has a value
     *
     * @return boolean
     */
    public function hasImages(){
      return $this->_has(2);
    }
    
    /**
     * Clear <images> value
     *
     * @return \google\devtools\cloudbuild\v1\Results
     */
    public function clearImages(){
      return $this->_clear(2);
    }
    
    /**
     * Get <images> value
     *
     * @param int $idx
     * @return \google\devtools\cloudbuild\v1\BuiltImage
     */
    public function getImages($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <images> value
     *
     * @param \google\devtools\cloudbuild\v1\BuiltImage $value
     * @return \google\devtools\cloudbuild\v1\Results
     */
    public function setImages(\google\devtools\cloudbuild\v1\BuiltImage $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <images>
     *
     * @return \google\devtools\cloudbuild\v1\BuiltImage[]
     */
    public function getImagesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <images>
     *
     * @param \google\devtools\cloudbuild\v1\BuiltImage $value
     * @return \google\devtools\cloudbuild\v1\Results
     */
    public function addImages(\google\devtools\cloudbuild\v1\BuiltImage $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <build_step_images> has a value
     *
     * @return boolean
     */
    public function hasBuildStepImages(){
      return $this->_has(3);
    }
    
    /**
     * Clear <build_step_images> value
     *
     * @return \google\devtools\cloudbuild\v1\Results
     */
    public function clearBuildStepImages(){
      return $this->_clear(3);
    }
    
    /**
     * Get <build_step_images> value
     *
     * @param int $idx
     * @return string
     */
    public function getBuildStepImages($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <build_step_images> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Results
     */
    public function setBuildStepImages( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <build_step_images>
     *
     * @return string[]
     */
    public function getBuildStepImagesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <build_step_images>
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Results
     */
    public function addBuildStepImages( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1\Build {

  class Status extends \DrSlump\Protobuf\Enum {
    const STATUS_UNKNOWN = 0;
    const QUEUED = 1;
    const WORKING = 2;
    const SUCCESS = 3;
    const FAILURE = 4;
    const INTERNAL_ERROR = 5;
    const TIMEOUT = 6;
    const CANCELLED = 7;
  }
}
namespace google\devtools\cloudbuild\v1\Build {

  class SubstitutionsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.Build.SubstitutionsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\devtools\cloudbuild\v1\Build\SubstitutionsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build\SubstitutionsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\cloudbuild\v1\Build\SubstitutionsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build\SubstitutionsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class Build extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $project_id = null;
    
    /**  @var int - \google\devtools\cloudbuild\v1\Build\Status */
    public $status = null;
    
    /**  @var string */
    public $status_detail = null;
    
    /**  @var \google\devtools\cloudbuild\v1\Source */
    public $source = null;
    
    /**  @var \google\devtools\cloudbuild\v1\BuildStep[]  */
    public $steps = array();
    
    /**  @var \google\devtools\cloudbuild\v1\Results */
    public $results = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $create_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $start_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $finish_time = null;
    
    /**  @var \google\protobuf\Duration */
    public $timeout = null;
    
    /**  @var string[]  */
    public $images = array();
    
    /**  @var string */
    public $logs_bucket = null;
    
    /**  @var \google\devtools\cloudbuild\v1\SourceProvenance */
    public $source_provenance = null;
    
    /**  @var string */
    public $build_trigger_id = null;
    
    /**  @var \google\devtools\cloudbuild\v1\BuildOptions */
    public $options = null;
    
    /**  @var string */
    public $log_url = null;
    
    /**  @var \google\devtools\cloudbuild\v1\Build\SubstitutionsEntry[]  */
    public $substitutions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.Build');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING project_id = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\Build\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING status_detail = 24
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 24;
      $f->name      = "status_detail";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE source = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "source";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\Source';
      $descriptor->addField($f);

      // REPEATED MESSAGE steps = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "steps";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudbuild\v1\BuildStep';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE results = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "results";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\Results';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE create_time = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "create_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE start_time = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE finish_time = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "finish_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timeout = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "timeout";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Duration';
      $descriptor->addField($f);

      // REPEATED STRING images = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "images";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING logs_bucket = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "logs_bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE source_provenance = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "source_provenance";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\SourceProvenance';
      $descriptor->addField($f);

      // OPTIONAL STRING build_trigger_id = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "build_trigger_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE options = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\BuildOptions';
      $descriptor->addField($f);

      // OPTIONAL STRING log_url = 25
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 25;
      $f->name      = "log_url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE substitutions = 29
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 29;
      $f->name      = "substitutions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudbuild\v1\Build\SubstitutionsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(16);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearProjectId(){
      return $this->_clear(16);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(16);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setProjectId( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \google\devtools\cloudbuild\v1\Build\Status
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \google\devtools\cloudbuild\v1\Build\Status $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setStatus( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <status_detail> has a value
     *
     * @return boolean
     */
    public function hasStatusDetail(){
      return $this->_has(24);
    }
    
    /**
     * Clear <status_detail> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearStatusDetail(){
      return $this->_clear(24);
    }
    
    /**
     * Get <status_detail> value
     *
     * @return string
     */
    public function getStatusDetail(){
      return $this->_get(24);
    }
    
    /**
     * Set <status_detail> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setStatusDetail( $value){
      return $this->_set(24, $value);
    }
    
    /**
     * Check if <source> has a value
     *
     * @return boolean
     */
    public function hasSource(){
      return $this->_has(3);
    }
    
    /**
     * Clear <source> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearSource(){
      return $this->_clear(3);
    }
    
    /**
     * Get <source> value
     *
     * @return \google\devtools\cloudbuild\v1\Source
     */
    public function getSource(){
      return $this->_get(3);
    }
    
    /**
     * Set <source> value
     *
     * @param \google\devtools\cloudbuild\v1\Source $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setSource(\google\devtools\cloudbuild\v1\Source $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <steps> has a value
     *
     * @return boolean
     */
    public function hasSteps(){
      return $this->_has(11);
    }
    
    /**
     * Clear <steps> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearSteps(){
      return $this->_clear(11);
    }
    
    /**
     * Get <steps> value
     *
     * @param int $idx
     * @return \google\devtools\cloudbuild\v1\BuildStep
     */
    public function getSteps($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <steps> value
     *
     * @param \google\devtools\cloudbuild\v1\BuildStep $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setSteps(\google\devtools\cloudbuild\v1\BuildStep $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <steps>
     *
     * @return \google\devtools\cloudbuild\v1\BuildStep[]
     */
    public function getStepsList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <steps>
     *
     * @param \google\devtools\cloudbuild\v1\BuildStep $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function addSteps(\google\devtools\cloudbuild\v1\BuildStep $value){
     return $this->_add(11, $value);
    }
    
    /**
     * Check if <results> has a value
     *
     * @return boolean
     */
    public function hasResults(){
      return $this->_has(10);
    }
    
    /**
     * Clear <results> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearResults(){
      return $this->_clear(10);
    }
    
    /**
     * Get <results> value
     *
     * @return \google\devtools\cloudbuild\v1\Results
     */
    public function getResults(){
      return $this->_get(10);
    }
    
    /**
     * Set <results> value
     *
     * @param \google\devtools\cloudbuild\v1\Results $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setResults(\google\devtools\cloudbuild\v1\Results $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <create_time> has a value
     *
     * @return boolean
     */
    public function hasCreateTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <create_time> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearCreateTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <create_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getCreateTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <create_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setCreateTime(\google\protobuf\Timestamp $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <start_time> has a value
     *
     * @return boolean
     */
    public function hasStartTime(){
      return $this->_has(7);
    }
    
    /**
     * Clear <start_time> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearStartTime(){
      return $this->_clear(7);
    }
    
    /**
     * Get <start_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getStartTime(){
      return $this->_get(7);
    }
    
    /**
     * Set <start_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setStartTime(\google\protobuf\Timestamp $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <finish_time> has a value
     *
     * @return boolean
     */
    public function hasFinishTime(){
      return $this->_has(8);
    }
    
    /**
     * Clear <finish_time> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearFinishTime(){
      return $this->_clear(8);
    }
    
    /**
     * Get <finish_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getFinishTime(){
      return $this->_get(8);
    }
    
    /**
     * Set <finish_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setFinishTime(\google\protobuf\Timestamp $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <timeout> has a value
     *
     * @return boolean
     */
    public function hasTimeout(){
      return $this->_has(12);
    }
    
    /**
     * Clear <timeout> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearTimeout(){
      return $this->_clear(12);
    }
    
    /**
     * Get <timeout> value
     *
     * @return \google\protobuf\Duration
     */
    public function getTimeout(){
      return $this->_get(12);
    }
    
    /**
     * Set <timeout> value
     *
     * @param \google\protobuf\Duration $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setTimeout(\google\protobuf\Duration $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <images> has a value
     *
     * @return boolean
     */
    public function hasImages(){
      return $this->_has(13);
    }
    
    /**
     * Clear <images> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearImages(){
      return $this->_clear(13);
    }
    
    /**
     * Get <images> value
     *
     * @param int $idx
     * @return string
     */
    public function getImages($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <images> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setImages( $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <images>
     *
     * @return string[]
     */
    public function getImagesList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <images>
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function addImages( $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <logs_bucket> has a value
     *
     * @return boolean
     */
    public function hasLogsBucket(){
      return $this->_has(19);
    }
    
    /**
     * Clear <logs_bucket> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearLogsBucket(){
      return $this->_clear(19);
    }
    
    /**
     * Get <logs_bucket> value
     *
     * @return string
     */
    public function getLogsBucket(){
      return $this->_get(19);
    }
    
    /**
     * Set <logs_bucket> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setLogsBucket( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <source_provenance> has a value
     *
     * @return boolean
     */
    public function hasSourceProvenance(){
      return $this->_has(21);
    }
    
    /**
     * Clear <source_provenance> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearSourceProvenance(){
      return $this->_clear(21);
    }
    
    /**
     * Get <source_provenance> value
     *
     * @return \google\devtools\cloudbuild\v1\SourceProvenance
     */
    public function getSourceProvenance(){
      return $this->_get(21);
    }
    
    /**
     * Set <source_provenance> value
     *
     * @param \google\devtools\cloudbuild\v1\SourceProvenance $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setSourceProvenance(\google\devtools\cloudbuild\v1\SourceProvenance $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <build_trigger_id> has a value
     *
     * @return boolean
     */
    public function hasBuildTriggerId(){
      return $this->_has(22);
    }
    
    /**
     * Clear <build_trigger_id> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearBuildTriggerId(){
      return $this->_clear(22);
    }
    
    /**
     * Get <build_trigger_id> value
     *
     * @return string
     */
    public function getBuildTriggerId(){
      return $this->_get(22);
    }
    
    /**
     * Set <build_trigger_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setBuildTriggerId( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <options> has a value
     *
     * @return boolean
     */
    public function hasOptions(){
      return $this->_has(23);
    }
    
    /**
     * Clear <options> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearOptions(){
      return $this->_clear(23);
    }
    
    /**
     * Get <options> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildOptions
     */
    public function getOptions(){
      return $this->_get(23);
    }
    
    /**
     * Set <options> value
     *
     * @param \google\devtools\cloudbuild\v1\BuildOptions $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setOptions(\google\devtools\cloudbuild\v1\BuildOptions $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <log_url> has a value
     *
     * @return boolean
     */
    public function hasLogUrl(){
      return $this->_has(25);
    }
    
    /**
     * Clear <log_url> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearLogUrl(){
      return $this->_clear(25);
    }
    
    /**
     * Get <log_url> value
     *
     * @return string
     */
    public function getLogUrl(){
      return $this->_get(25);
    }
    
    /**
     * Set <log_url> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setLogUrl( $value){
      return $this->_set(25, $value);
    }
    
    /**
     * Check if <substitutions> has a value
     *
     * @return boolean
     */
    public function hasSubstitutions(){
      return $this->_has(29);
    }
    
    /**
     * Clear <substitutions> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function clearSubstitutions(){
      return $this->_clear(29);
    }
    
    /**
     * Get <substitutions> value
     *
     * @param int $idx
     * @return \google\devtools\cloudbuild\v1\Build\SubstitutionsEntry
     */
    public function getSubstitutions($idx = NULL){
      return $this->_get(29, $idx);
    }
    
    /**
     * Set <substitutions> value
     *
     * @param \google\devtools\cloudbuild\v1\Build\SubstitutionsEntry $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function setSubstitutions(\google\devtools\cloudbuild\v1\Build\SubstitutionsEntry $value, $idx = NULL){
      return $this->_set(29, $value, $idx);
    }
    
    /**
     * Get all elements of <substitutions>
     *
     * @return \google\devtools\cloudbuild\v1\Build\SubstitutionsEntry[]
     */
    public function getSubstitutionsList(){
     return $this->_get(29);
    }
    
    /**
     * Add a new element to <substitutions>
     *
     * @param \google\devtools\cloudbuild\v1\Build\SubstitutionsEntry $value
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function addSubstitutions(\google\devtools\cloudbuild\v1\Build\SubstitutionsEntry $value){
     return $this->_add(29, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class BuildOperationMetadata extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\cloudbuild\v1\Build */
    public $build = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.BuildOperationMetadata');

      // OPTIONAL MESSAGE build = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "build";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\Build';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <build> has a value
     *
     * @return boolean
     */
    public function hasBuild(){
      return $this->_has(1);
    }
    
    /**
     * Clear <build> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildOperationMetadata
     */
    public function clearBuild(){
      return $this->_clear(1);
    }
    
    /**
     * Get <build> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function getBuild(){
      return $this->_get(1);
    }
    
    /**
     * Set <build> value
     *
     * @param \google\devtools\cloudbuild\v1\Build $value
     * @return \google\devtools\cloudbuild\v1\BuildOperationMetadata
     */
    public function setBuild(\google\devtools\cloudbuild\v1\Build $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1\SourceProvenance {

  class FileHashesEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\devtools\cloudbuild\v1\FileHashes */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.SourceProvenance.FileHashesEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\FileHashes';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\devtools\cloudbuild\v1\FileHashes
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\devtools\cloudbuild\v1\FileHashes $value
     * @return \google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry
     */
    public function setValue(\google\devtools\cloudbuild\v1\FileHashes $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class SourceProvenance extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\cloudbuild\v1\StorageSource */
    public $resolved_storage_source = null;
    
    /**  @var \google\devtools\cloudbuild\v1\RepoSource */
    public $resolved_repo_source = null;
    
    /**  @var \google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry[]  */
    public $file_hashes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.SourceProvenance');

      // OPTIONAL MESSAGE resolved_storage_source = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "resolved_storage_source";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\StorageSource';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE resolved_repo_source = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "resolved_repo_source";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\RepoSource';
      $descriptor->addField($f);

      // REPEATED MESSAGE file_hashes = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "file_hashes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <resolved_storage_source> has a value
     *
     * @return boolean
     */
    public function hasResolvedStorageSource(){
      return $this->_has(3);
    }
    
    /**
     * Clear <resolved_storage_source> value
     *
     * @return \google\devtools\cloudbuild\v1\SourceProvenance
     */
    public function clearResolvedStorageSource(){
      return $this->_clear(3);
    }
    
    /**
     * Get <resolved_storage_source> value
     *
     * @return \google\devtools\cloudbuild\v1\StorageSource
     */
    public function getResolvedStorageSource(){
      return $this->_get(3);
    }
    
    /**
     * Set <resolved_storage_source> value
     *
     * @param \google\devtools\cloudbuild\v1\StorageSource $value
     * @return \google\devtools\cloudbuild\v1\SourceProvenance
     */
    public function setResolvedStorageSource(\google\devtools\cloudbuild\v1\StorageSource $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <resolved_repo_source> has a value
     *
     * @return boolean
     */
    public function hasResolvedRepoSource(){
      return $this->_has(6);
    }
    
    /**
     * Clear <resolved_repo_source> value
     *
     * @return \google\devtools\cloudbuild\v1\SourceProvenance
     */
    public function clearResolvedRepoSource(){
      return $this->_clear(6);
    }
    
    /**
     * Get <resolved_repo_source> value
     *
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function getResolvedRepoSource(){
      return $this->_get(6);
    }
    
    /**
     * Set <resolved_repo_source> value
     *
     * @param \google\devtools\cloudbuild\v1\RepoSource $value
     * @return \google\devtools\cloudbuild\v1\SourceProvenance
     */
    public function setResolvedRepoSource(\google\devtools\cloudbuild\v1\RepoSource $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <file_hashes> has a value
     *
     * @return boolean
     */
    public function hasFileHashes(){
      return $this->_has(4);
    }
    
    /**
     * Clear <file_hashes> value
     *
     * @return \google\devtools\cloudbuild\v1\SourceProvenance
     */
    public function clearFileHashes(){
      return $this->_clear(4);
    }
    
    /**
     * Get <file_hashes> value
     *
     * @param int $idx
     * @return \google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry
     */
    public function getFileHashes($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <file_hashes> value
     *
     * @param \google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry $value
     * @return \google\devtools\cloudbuild\v1\SourceProvenance
     */
    public function setFileHashes(\google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <file_hashes>
     *
     * @return \google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry[]
     */
    public function getFileHashesList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <file_hashes>
     *
     * @param \google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry $value
     * @return \google\devtools\cloudbuild\v1\SourceProvenance
     */
    public function addFileHashes(\google\devtools\cloudbuild\v1\SourceProvenance\FileHashesEntry $value){
     return $this->_add(4, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class FileHashes extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\cloudbuild\v1\Hash[]  */
    public $file_hash = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.FileHashes');

      // REPEATED MESSAGE file_hash = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "file_hash";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudbuild\v1\Hash';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <file_hash> has a value
     *
     * @return boolean
     */
    public function hasFileHash(){
      return $this->_has(1);
    }
    
    /**
     * Clear <file_hash> value
     *
     * @return \google\devtools\cloudbuild\v1\FileHashes
     */
    public function clearFileHash(){
      return $this->_clear(1);
    }
    
    /**
     * Get <file_hash> value
     *
     * @param int $idx
     * @return \google\devtools\cloudbuild\v1\Hash
     */
    public function getFileHash($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <file_hash> value
     *
     * @param \google\devtools\cloudbuild\v1\Hash $value
     * @return \google\devtools\cloudbuild\v1\FileHashes
     */
    public function setFileHash(\google\devtools\cloudbuild\v1\Hash $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <file_hash>
     *
     * @return \google\devtools\cloudbuild\v1\Hash[]
     */
    public function getFileHashList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <file_hash>
     *
     * @param \google\devtools\cloudbuild\v1\Hash $value
     * @return \google\devtools\cloudbuild\v1\FileHashes
     */
    public function addFileHash(\google\devtools\cloudbuild\v1\Hash $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1\Hash {

  class HashType extends \DrSlump\Protobuf\Enum {
    const NONE = 0;
    const SHA256 = 1;
  }
}
namespace google\devtools\cloudbuild\v1 {

  class Hash extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\devtools\cloudbuild\v1\Hash\HashType */
    public $type = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.Hash');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\Hash\HashType';
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\devtools\cloudbuild\v1\Hash
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\devtools\cloudbuild\v1\Hash\HashType
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\devtools\cloudbuild\v1\Hash\HashType $value
     * @return \google\devtools\cloudbuild\v1\Hash
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\cloudbuild\v1\Hash
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\Hash
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class CreateBuildRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var \google\devtools\cloudbuild\v1\Build */
    public $build = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.CreateBuildRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE build = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "build";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\Build';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\CreateBuildRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\CreateBuildRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <build> has a value
     *
     * @return boolean
     */
    public function hasBuild(){
      return $this->_has(2);
    }
    
    /**
     * Clear <build> value
     *
     * @return \google\devtools\cloudbuild\v1\CreateBuildRequest
     */
    public function clearBuild(){
      return $this->_clear(2);
    }
    
    /**
     * Get <build> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function getBuild(){
      return $this->_get(2);
    }
    
    /**
     * Set <build> value
     *
     * @param \google\devtools\cloudbuild\v1\Build $value
     * @return \google\devtools\cloudbuild\v1\CreateBuildRequest
     */
    public function setBuild(\google\devtools\cloudbuild\v1\Build $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class GetBuildRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.GetBuildRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\GetBuildRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\GetBuildRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\devtools\cloudbuild\v1\GetBuildRequest
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\GetBuildRequest
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class ListBuildsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    
    /**  @var string */
    public $filter = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.ListBuildsRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING filter = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\ListBuildsRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\ListBuildsRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\devtools\cloudbuild\v1\ListBuildsRequest
     */
    public function clearPageSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\devtools\cloudbuild\v1\ListBuildsRequest
     */
    public function setPageSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\devtools\cloudbuild\v1\ListBuildsRequest
     */
    public function clearPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\ListBuildsRequest
     */
    public function setPageToken( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(8);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\devtools\cloudbuild\v1\ListBuildsRequest
     */
    public function clearFilter(){
      return $this->_clear(8);
    }
    
    /**
     * Get <filter> value
     *
     * @return string
     */
    public function getFilter(){
      return $this->_get(8);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\ListBuildsRequest
     */
    public function setFilter( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class ListBuildsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\cloudbuild\v1\Build[]  */
    public $builds = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.ListBuildsResponse');

      // REPEATED MESSAGE builds = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "builds";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudbuild\v1\Build';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <builds> has a value
     *
     * @return boolean
     */
    public function hasBuilds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <builds> value
     *
     * @return \google\devtools\cloudbuild\v1\ListBuildsResponse
     */
    public function clearBuilds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <builds> value
     *
     * @param int $idx
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function getBuilds($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <builds> value
     *
     * @param \google\devtools\cloudbuild\v1\Build $value
     * @return \google\devtools\cloudbuild\v1\ListBuildsResponse
     */
    public function setBuilds(\google\devtools\cloudbuild\v1\Build $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <builds>
     *
     * @return \google\devtools\cloudbuild\v1\Build[]
     */
    public function getBuildsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <builds>
     *
     * @param \google\devtools\cloudbuild\v1\Build $value
     * @return \google\devtools\cloudbuild\v1\ListBuildsResponse
     */
    public function addBuilds(\google\devtools\cloudbuild\v1\Build $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\devtools\cloudbuild\v1\ListBuildsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\ListBuildsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class CancelBuildRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.CancelBuildRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\CancelBuildRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\CancelBuildRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\devtools\cloudbuild\v1\CancelBuildRequest
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\CancelBuildRequest
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1\BuildTrigger {

  class SubstitutionsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.BuildTrigger.SubstitutionsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class BuildTrigger extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var \google\devtools\cloudbuild\v1\RepoSource */
    public $trigger_template = null;
    
    /**  @var \google\devtools\cloudbuild\v1\Build */
    public $build = null;
    
    /**  @var string */
    public $filename = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $create_time = null;
    
    /**  @var boolean */
    public $disabled = null;
    
    /**  @var \google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry[]  */
    public $substitutions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.BuildTrigger');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE trigger_template = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "trigger_template";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\RepoSource';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE build = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "build";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\Build';
      $descriptor->addField($f);

      // OPTIONAL STRING filename = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "filename";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE create_time = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "create_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL BOOL disabled = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "disabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE substitutions = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "substitutions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(10);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function clearDescription(){
      return $this->_clear(10);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(10);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function setDescription( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <trigger_template> has a value
     *
     * @return boolean
     */
    public function hasTriggerTemplate(){
      return $this->_has(7);
    }
    
    /**
     * Clear <trigger_template> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function clearTriggerTemplate(){
      return $this->_clear(7);
    }
    
    /**
     * Get <trigger_template> value
     *
     * @return \google\devtools\cloudbuild\v1\RepoSource
     */
    public function getTriggerTemplate(){
      return $this->_get(7);
    }
    
    /**
     * Set <trigger_template> value
     *
     * @param \google\devtools\cloudbuild\v1\RepoSource $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function setTriggerTemplate(\google\devtools\cloudbuild\v1\RepoSource $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <build> has a value
     *
     * @return boolean
     */
    public function hasBuild(){
      return $this->_has(4);
    }
    
    /**
     * Clear <build> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function clearBuild(){
      return $this->_clear(4);
    }
    
    /**
     * Get <build> value
     *
     * @return \google\devtools\cloudbuild\v1\Build
     */
    public function getBuild(){
      return $this->_get(4);
    }
    
    /**
     * Set <build> value
     *
     * @param \google\devtools\cloudbuild\v1\Build $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function setBuild(\google\devtools\cloudbuild\v1\Build $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <filename> has a value
     *
     * @return boolean
     */
    public function hasFilename(){
      return $this->_has(8);
    }
    
    /**
     * Clear <filename> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function clearFilename(){
      return $this->_clear(8);
    }
    
    /**
     * Get <filename> value
     *
     * @return string
     */
    public function getFilename(){
      return $this->_get(8);
    }
    
    /**
     * Set <filename> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function setFilename( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <create_time> has a value
     *
     * @return boolean
     */
    public function hasCreateTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <create_time> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function clearCreateTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <create_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getCreateTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <create_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function setCreateTime(\google\protobuf\Timestamp $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <disabled> has a value
     *
     * @return boolean
     */
    public function hasDisabled(){
      return $this->_has(9);
    }
    
    /**
     * Clear <disabled> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function clearDisabled(){
      return $this->_clear(9);
    }
    
    /**
     * Get <disabled> value
     *
     * @return boolean
     */
    public function getDisabled(){
      return $this->_get(9);
    }
    
    /**
     * Set <disabled> value
     *
     * @param boolean $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function setDisabled( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <substitutions> has a value
     *
     * @return boolean
     */
    public function hasSubstitutions(){
      return $this->_has(11);
    }
    
    /**
     * Clear <substitutions> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function clearSubstitutions(){
      return $this->_clear(11);
    }
    
    /**
     * Get <substitutions> value
     *
     * @param int $idx
     * @return \google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry
     */
    public function getSubstitutions($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <substitutions> value
     *
     * @param \google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function setSubstitutions(\google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <substitutions>
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry[]
     */
    public function getSubstitutionsList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <substitutions>
     *
     * @param \google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry $value
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function addSubstitutions(\google\devtools\cloudbuild\v1\BuildTrigger\SubstitutionsEntry $value){
     return $this->_add(11, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class CreateBuildTriggerRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var \google\devtools\cloudbuild\v1\BuildTrigger */
    public $trigger = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.CreateBuildTriggerRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE trigger = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trigger";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\BuildTrigger';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\CreateBuildTriggerRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\CreateBuildTriggerRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trigger> has a value
     *
     * @return boolean
     */
    public function hasTrigger(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trigger> value
     *
     * @return \google\devtools\cloudbuild\v1\CreateBuildTriggerRequest
     */
    public function clearTrigger(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trigger> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function getTrigger(){
      return $this->_get(2);
    }
    
    /**
     * Set <trigger> value
     *
     * @param \google\devtools\cloudbuild\v1\BuildTrigger $value
     * @return \google\devtools\cloudbuild\v1\CreateBuildTriggerRequest
     */
    public function setTrigger(\google\devtools\cloudbuild\v1\BuildTrigger $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class GetBuildTriggerRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $trigger_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.GetBuildTriggerRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING trigger_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trigger_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\GetBuildTriggerRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\GetBuildTriggerRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trigger_id> has a value
     *
     * @return boolean
     */
    public function hasTriggerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trigger_id> value
     *
     * @return \google\devtools\cloudbuild\v1\GetBuildTriggerRequest
     */
    public function clearTriggerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trigger_id> value
     *
     * @return string
     */
    public function getTriggerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <trigger_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\GetBuildTriggerRequest
     */
    public function setTriggerId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class ListBuildTriggersRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.ListBuildTriggersRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\ListBuildTriggersRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\ListBuildTriggersRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class ListBuildTriggersResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\cloudbuild\v1\BuildTrigger[]  */
    public $triggers = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.ListBuildTriggersResponse');

      // REPEATED MESSAGE triggers = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "triggers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudbuild\v1\BuildTrigger';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <triggers> has a value
     *
     * @return boolean
     */
    public function hasTriggers(){
      return $this->_has(1);
    }
    
    /**
     * Clear <triggers> value
     *
     * @return \google\devtools\cloudbuild\v1\ListBuildTriggersResponse
     */
    public function clearTriggers(){
      return $this->_clear(1);
    }
    
    /**
     * Get <triggers> value
     *
     * @param int $idx
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function getTriggers($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <triggers> value
     *
     * @param \google\devtools\cloudbuild\v1\BuildTrigger $value
     * @return \google\devtools\cloudbuild\v1\ListBuildTriggersResponse
     */
    public function setTriggers(\google\devtools\cloudbuild\v1\BuildTrigger $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <triggers>
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger[]
     */
    public function getTriggersList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <triggers>
     *
     * @param \google\devtools\cloudbuild\v1\BuildTrigger $value
     * @return \google\devtools\cloudbuild\v1\ListBuildTriggersResponse
     */
    public function addTriggers(\google\devtools\cloudbuild\v1\BuildTrigger $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class DeleteBuildTriggerRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $trigger_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.DeleteBuildTriggerRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING trigger_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trigger_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\DeleteBuildTriggerRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\DeleteBuildTriggerRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trigger_id> has a value
     *
     * @return boolean
     */
    public function hasTriggerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trigger_id> value
     *
     * @return \google\devtools\cloudbuild\v1\DeleteBuildTriggerRequest
     */
    public function clearTriggerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trigger_id> value
     *
     * @return string
     */
    public function getTriggerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <trigger_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\DeleteBuildTriggerRequest
     */
    public function setTriggerId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class UpdateBuildTriggerRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $trigger_id = null;
    
    /**  @var \google\devtools\cloudbuild\v1\BuildTrigger */
    public $trigger = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.UpdateBuildTriggerRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING trigger_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trigger_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE trigger = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "trigger";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\BuildTrigger';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\cloudbuild\v1\UpdateBuildTriggerRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\UpdateBuildTriggerRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trigger_id> has a value
     *
     * @return boolean
     */
    public function hasTriggerId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trigger_id> value
     *
     * @return \google\devtools\cloudbuild\v1\UpdateBuildTriggerRequest
     */
    public function clearTriggerId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trigger_id> value
     *
     * @return string
     */
    public function getTriggerId(){
      return $this->_get(2);
    }
    
    /**
     * Set <trigger_id> value
     *
     * @param string $value
     * @return \google\devtools\cloudbuild\v1\UpdateBuildTriggerRequest
     */
    public function setTriggerId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <trigger> has a value
     *
     * @return boolean
     */
    public function hasTrigger(){
      return $this->_has(3);
    }
    
    /**
     * Clear <trigger> value
     *
     * @return \google\devtools\cloudbuild\v1\UpdateBuildTriggerRequest
     */
    public function clearTrigger(){
      return $this->_clear(3);
    }
    
    /**
     * Get <trigger> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildTrigger
     */
    public function getTrigger(){
      return $this->_get(3);
    }
    
    /**
     * Set <trigger> value
     *
     * @param \google\devtools\cloudbuild\v1\BuildTrigger $value
     * @return \google\devtools\cloudbuild\v1\UpdateBuildTriggerRequest
     */
    public function setTrigger(\google\devtools\cloudbuild\v1\BuildTrigger $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1\BuildOptions {

  class VerifyOption extends \DrSlump\Protobuf\Enum {
    const NOT_VERIFIED = 0;
    const VERIFIED = 1;
  }
}
namespace google\devtools\cloudbuild\v1 {

  class BuildOptions extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\devtools\cloudbuild\v1\Hash\HashType[]  */
    public $source_provenance_hash = array();
    
    /**  @var int - \google\devtools\cloudbuild\v1\BuildOptions\VerifyOption */
    public $requested_verify_option = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.cloudbuild.v1.BuildOptions');

      // REPEATED ENUM source_provenance_hash = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "source_provenance_hash";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\cloudbuild\v1\Hash\HashType';
      $descriptor->addField($f);

      // OPTIONAL ENUM requested_verify_option = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "requested_verify_option";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\cloudbuild\v1\BuildOptions\VerifyOption';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <source_provenance_hash> has a value
     *
     * @return boolean
     */
    public function hasSourceProvenanceHash(){
      return $this->_has(1);
    }
    
    /**
     * Clear <source_provenance_hash> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildOptions
     */
    public function clearSourceProvenanceHash(){
      return $this->_clear(1);
    }
    
    /**
     * Get <source_provenance_hash> value
     *
     * @param int $idx
     * @return int - \google\devtools\cloudbuild\v1\Hash\HashType
     */
    public function getSourceProvenanceHash($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <source_provenance_hash> value
     *
     * @param int - \google\devtools\cloudbuild\v1\Hash\HashType $value
     * @return \google\devtools\cloudbuild\v1\BuildOptions
     */
    public function setSourceProvenanceHash( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <source_provenance_hash>
     *
     * @return int - \google\devtools\cloudbuild\v1\Hash\HashType[]
     */
    public function getSourceProvenanceHashList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <source_provenance_hash>
     *
     * @param int - \google\devtools\cloudbuild\v1\Hash\HashType $value
     * @return \google\devtools\cloudbuild\v1\BuildOptions
     */
    public function addSourceProvenanceHash( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <requested_verify_option> has a value
     *
     * @return boolean
     */
    public function hasRequestedVerifyOption(){
      return $this->_has(2);
    }
    
    /**
     * Clear <requested_verify_option> value
     *
     * @return \google\devtools\cloudbuild\v1\BuildOptions
     */
    public function clearRequestedVerifyOption(){
      return $this->_clear(2);
    }
    
    /**
     * Get <requested_verify_option> value
     *
     * @return int - \google\devtools\cloudbuild\v1\BuildOptions\VerifyOption
     */
    public function getRequestedVerifyOption(){
      return $this->_get(2);
    }
    
    /**
     * Set <requested_verify_option> value
     *
     * @param int - \google\devtools\cloudbuild\v1\BuildOptions\VerifyOption $value
     * @return \google\devtools\cloudbuild\v1\BuildOptions
     */
    public function setRequestedVerifyOption( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\cloudbuild\v1 {

  class CloudBuildClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\devtools\cloudbuild\v1\CreateBuildRequest $input
     */
    public function CreateBuild(\google\devtools\cloudbuild\v1\CreateBuildRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudbuild.v1.CloudBuild/CreateBuild', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudbuild\v1\GetBuildRequest $input
     */
    public function GetBuild(\google\devtools\cloudbuild\v1\GetBuildRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudbuild.v1.CloudBuild/GetBuild', $argument, '\google\devtools\cloudbuild\v1\Build::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudbuild\v1\ListBuildsRequest $input
     */
    public function ListBuilds(\google\devtools\cloudbuild\v1\ListBuildsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudbuild.v1.CloudBuild/ListBuilds', $argument, '\google\devtools\cloudbuild\v1\ListBuildsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudbuild\v1\CancelBuildRequest $input
     */
    public function CancelBuild(\google\devtools\cloudbuild\v1\CancelBuildRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudbuild.v1.CloudBuild/CancelBuild', $argument, '\google\devtools\cloudbuild\v1\Build::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudbuild\v1\CreateBuildTriggerRequest $input
     */
    public function CreateBuildTrigger(\google\devtools\cloudbuild\v1\CreateBuildTriggerRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudbuild.v1.CloudBuild/CreateBuildTrigger', $argument, '\google\devtools\cloudbuild\v1\BuildTrigger::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudbuild\v1\GetBuildTriggerRequest $input
     */
    public function GetBuildTrigger(\google\devtools\cloudbuild\v1\GetBuildTriggerRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudbuild.v1.CloudBuild/GetBuildTrigger', $argument, '\google\devtools\cloudbuild\v1\BuildTrigger::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudbuild\v1\ListBuildTriggersRequest $input
     */
    public function ListBuildTriggers(\google\devtools\cloudbuild\v1\ListBuildTriggersRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudbuild.v1.CloudBuild/ListBuildTriggers', $argument, '\google\devtools\cloudbuild\v1\ListBuildTriggersResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudbuild\v1\DeleteBuildTriggerRequest $input
     */
    public function DeleteBuildTrigger(\google\devtools\cloudbuild\v1\DeleteBuildTriggerRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudbuild.v1.CloudBuild/DeleteBuildTrigger', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\cloudbuild\v1\UpdateBuildTriggerRequest $input
     */
    public function UpdateBuildTrigger(\google\devtools\cloudbuild\v1\UpdateBuildTriggerRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.cloudbuild.v1.CloudBuild/UpdateBuildTrigger', $argument, '\google\devtools\cloudbuild\v1\BuildTrigger::deserialize', $metadata, $options);
    }
  }
}
