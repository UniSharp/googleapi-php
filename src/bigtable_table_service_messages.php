<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/bigtable/admin/table/v1/bigtable_table_service_messages.proto
//   Date: 2017-06-13 04:23:32

namespace google\bigtable\admin\table\v1 {

  class CreateTableRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $table_id = null;
    
    /**  @var \google\bigtable\admin\table\v1\Table */
    public $table = null;
    
    /**  @var string[]  */
    public $initial_split_keys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.table.v1.CreateTableRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING table_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "table_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE table = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "table";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\admin\table\v1\Table';
      $descriptor->addField($f);

      // REPEATED STRING initial_split_keys = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "initial_split_keys";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\table\v1\CreateTableRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\CreateTableRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <table_id> has a value
     *
     * @return boolean
     */
    public function hasTableId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <table_id> value
     *
     * @return \google\bigtable\admin\table\v1\CreateTableRequest
     */
    public function clearTableId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <table_id> value
     *
     * @return string
     */
    public function getTableId(){
      return $this->_get(2);
    }
    
    /**
     * Set <table_id> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\CreateTableRequest
     */
    public function setTableId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <table> has a value
     *
     * @return boolean
     */
    public function hasTable(){
      return $this->_has(3);
    }
    
    /**
     * Clear <table> value
     *
     * @return \google\bigtable\admin\table\v1\CreateTableRequest
     */
    public function clearTable(){
      return $this->_clear(3);
    }
    
    /**
     * Get <table> value
     *
     * @return \google\bigtable\admin\table\v1\Table
     */
    public function getTable(){
      return $this->_get(3);
    }
    
    /**
     * Set <table> value
     *
     * @param \google\bigtable\admin\table\v1\Table $value
     * @return \google\bigtable\admin\table\v1\CreateTableRequest
     */
    public function setTable(\google\bigtable\admin\table\v1\Table $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <initial_split_keys> has a value
     *
     * @return boolean
     */
    public function hasInitialSplitKeys(){
      return $this->_has(4);
    }
    
    /**
     * Clear <initial_split_keys> value
     *
     * @return \google\bigtable\admin\table\v1\CreateTableRequest
     */
    public function clearInitialSplitKeys(){
      return $this->_clear(4);
    }
    
    /**
     * Get <initial_split_keys> value
     *
     * @param int $idx
     * @return string
     */
    public function getInitialSplitKeys($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <initial_split_keys> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\CreateTableRequest
     */
    public function setInitialSplitKeys( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <initial_split_keys>
     *
     * @return string[]
     */
    public function getInitialSplitKeysList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <initial_split_keys>
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\CreateTableRequest
     */
    public function addInitialSplitKeys( $value){
     return $this->_add(4, $value);
    }
  }
}

namespace google\bigtable\admin\table\v1 {

  class ListTablesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.table.v1.ListTablesRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\table\v1\ListTablesRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\ListTablesRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\admin\table\v1 {

  class ListTablesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\admin\table\v1\Table[]  */
    public $tables = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.table.v1.ListTablesResponse');

      // REPEATED MESSAGE tables = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tables";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\admin\table\v1\Table';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tables> has a value
     *
     * @return boolean
     */
    public function hasTables(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tables> value
     *
     * @return \google\bigtable\admin\table\v1\ListTablesResponse
     */
    public function clearTables(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tables> value
     *
     * @param int $idx
     * @return \google\bigtable\admin\table\v1\Table
     */
    public function getTables($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <tables> value
     *
     * @param \google\bigtable\admin\table\v1\Table $value
     * @return \google\bigtable\admin\table\v1\ListTablesResponse
     */
    public function setTables(\google\bigtable\admin\table\v1\Table $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <tables>
     *
     * @return \google\bigtable\admin\table\v1\Table[]
     */
    public function getTablesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <tables>
     *
     * @param \google\bigtable\admin\table\v1\Table $value
     * @return \google\bigtable\admin\table\v1\ListTablesResponse
     */
    public function addTables(\google\bigtable\admin\table\v1\Table $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\bigtable\admin\table\v1 {

  class GetTableRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.table.v1.GetTableRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\table\v1\GetTableRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\GetTableRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\admin\table\v1 {

  class DeleteTableRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.table.v1.DeleteTableRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\table\v1\DeleteTableRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\DeleteTableRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\admin\table\v1 {

  class RenameTableRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $new_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.table.v1.RenameTableRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING new_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "new_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\table\v1\RenameTableRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\RenameTableRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <new_id> has a value
     *
     * @return boolean
     */
    public function hasNewId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <new_id> value
     *
     * @return \google\bigtable\admin\table\v1\RenameTableRequest
     */
    public function clearNewId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <new_id> value
     *
     * @return string
     */
    public function getNewId(){
      return $this->_get(2);
    }
    
    /**
     * Set <new_id> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\RenameTableRequest
     */
    public function setNewId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\bigtable\admin\table\v1 {

  class CreateColumnFamilyRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $column_family_id = null;
    
    /**  @var \google\bigtable\admin\table\v1\ColumnFamily */
    public $column_family = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.table.v1.CreateColumnFamilyRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING column_family_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "column_family_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE column_family = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "column_family";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\admin\table\v1\ColumnFamily';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\table\v1\CreateColumnFamilyRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\CreateColumnFamilyRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <column_family_id> has a value
     *
     * @return boolean
     */
    public function hasColumnFamilyId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <column_family_id> value
     *
     * @return \google\bigtable\admin\table\v1\CreateColumnFamilyRequest
     */
    public function clearColumnFamilyId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <column_family_id> value
     *
     * @return string
     */
    public function getColumnFamilyId(){
      return $this->_get(2);
    }
    
    /**
     * Set <column_family_id> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\CreateColumnFamilyRequest
     */
    public function setColumnFamilyId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <column_family> has a value
     *
     * @return boolean
     */
    public function hasColumnFamily(){
      return $this->_has(3);
    }
    
    /**
     * Clear <column_family> value
     *
     * @return \google\bigtable\admin\table\v1\CreateColumnFamilyRequest
     */
    public function clearColumnFamily(){
      return $this->_clear(3);
    }
    
    /**
     * Get <column_family> value
     *
     * @return \google\bigtable\admin\table\v1\ColumnFamily
     */
    public function getColumnFamily(){
      return $this->_get(3);
    }
    
    /**
     * Set <column_family> value
     *
     * @param \google\bigtable\admin\table\v1\ColumnFamily $value
     * @return \google\bigtable\admin\table\v1\CreateColumnFamilyRequest
     */
    public function setColumnFamily(\google\bigtable\admin\table\v1\ColumnFamily $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\admin\table\v1 {

  class DeleteColumnFamilyRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.table.v1.DeleteColumnFamilyRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\table\v1\DeleteColumnFamilyRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\DeleteColumnFamilyRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\admin\table\v1 {

  class BulkDeleteRowsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var string */
    public $row_key_prefix = null;
    
    /**  @var boolean */
    public $delete_all_data_from_table = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.table.v1.BulkDeleteRowsRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES row_key_prefix = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_key_prefix";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_all_data_from_table = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "delete_all_data_from_table";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\admin\table\v1\BulkDeleteRowsRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\BulkDeleteRowsRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row_key_prefix> has a value
     *
     * @return boolean
     */
    public function hasRowKeyPrefix(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_key_prefix> value
     *
     * @return \google\bigtable\admin\table\v1\BulkDeleteRowsRequest
     */
    public function clearRowKeyPrefix(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_key_prefix> value
     *
     * @return string
     */
    public function getRowKeyPrefix(){
      return $this->_get(2);
    }
    
    /**
     * Set <row_key_prefix> value
     *
     * @param string $value
     * @return \google\bigtable\admin\table\v1\BulkDeleteRowsRequest
     */
    public function setRowKeyPrefix( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <delete_all_data_from_table> has a value
     *
     * @return boolean
     */
    public function hasDeleteAllDataFromTable(){
      return $this->_has(3);
    }
    
    /**
     * Clear <delete_all_data_from_table> value
     *
     * @return \google\bigtable\admin\table\v1\BulkDeleteRowsRequest
     */
    public function clearDeleteAllDataFromTable(){
      return $this->_clear(3);
    }
    
    /**
     * Get <delete_all_data_from_table> value
     *
     * @return boolean
     */
    public function getDeleteAllDataFromTable(){
      return $this->_get(3);
    }
    
    /**
     * Set <delete_all_data_from_table> value
     *
     * @param boolean $value
     * @return \google\bigtable\admin\table\v1\BulkDeleteRowsRequest
     */
    public function setDeleteAllDataFromTable( $value){
      return $this->_set(3, $value);
    }
  }
}

