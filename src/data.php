<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/devtools/clouddebugger/v2/data.proto
//   Date: 2017-06-13 04:25:12

namespace google\devtools\clouddebugger\v2 {

  class FormatMessage extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $format = null;
    
    /**  @var string[]  */
    public $parameters = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.FormatMessage');

      // OPTIONAL STRING format = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "format";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING parameters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parameters";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <format> has a value
     *
     * @return boolean
     */
    public function hasFormat(){
      return $this->_has(1);
    }
    
    /**
     * Clear <format> value
     *
     * @return \google\devtools\clouddebugger\v2\FormatMessage
     */
    public function clearFormat(){
      return $this->_clear(1);
    }
    
    /**
     * Get <format> value
     *
     * @return string
     */
    public function getFormat(){
      return $this->_get(1);
    }
    
    /**
     * Set <format> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\FormatMessage
     */
    public function setFormat( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parameters> has a value
     *
     * @return boolean
     */
    public function hasParameters(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parameters> value
     *
     * @return \google\devtools\clouddebugger\v2\FormatMessage
     */
    public function clearParameters(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parameters> value
     *
     * @param int $idx
     * @return string
     */
    public function getParameters($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <parameters> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\FormatMessage
     */
    public function setParameters( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <parameters>
     *
     * @return string[]
     */
    public function getParametersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <parameters>
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\FormatMessage
     */
    public function addParameters( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2\StatusMessage {

  class Reference extends \DrSlump\Protobuf\Enum {
    const UNSPECIFIED = 0;
    const BREAKPOINT_SOURCE_LOCATION = 3;
    const BREAKPOINT_CONDITION = 4;
    const BREAKPOINT_EXPRESSION = 7;
    const BREAKPOINT_AGE = 8;
    const VARIABLE_NAME = 5;
    const VARIABLE_VALUE = 6;
  }
}
namespace google\devtools\clouddebugger\v2 {

  class StatusMessage extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $is_error = null;
    
    /**  @var int - \google\devtools\clouddebugger\v2\StatusMessage\Reference */
    public $refers_to = null;
    
    /**  @var \google\devtools\clouddebugger\v2\FormatMessage */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.StatusMessage');

      // OPTIONAL BOOL is_error = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "is_error";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM refers_to = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "refers_to";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\StatusMessage\Reference';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\FormatMessage';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <is_error> has a value
     *
     * @return boolean
     */
    public function hasIsError(){
      return $this->_has(1);
    }
    
    /**
     * Clear <is_error> value
     *
     * @return \google\devtools\clouddebugger\v2\StatusMessage
     */
    public function clearIsError(){
      return $this->_clear(1);
    }
    
    /**
     * Get <is_error> value
     *
     * @return boolean
     */
    public function getIsError(){
      return $this->_get(1);
    }
    
    /**
     * Set <is_error> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\StatusMessage
     */
    public function setIsError( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <refers_to> has a value
     *
     * @return boolean
     */
    public function hasRefersTo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <refers_to> value
     *
     * @return \google\devtools\clouddebugger\v2\StatusMessage
     */
    public function clearRefersTo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <refers_to> value
     *
     * @return int - \google\devtools\clouddebugger\v2\StatusMessage\Reference
     */
    public function getRefersTo(){
      return $this->_get(2);
    }
    
    /**
     * Set <refers_to> value
     *
     * @param int - \google\devtools\clouddebugger\v2\StatusMessage\Reference $value
     * @return \google\devtools\clouddebugger\v2\StatusMessage
     */
    public function setRefersTo( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\devtools\clouddebugger\v2\StatusMessage
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @return \google\devtools\clouddebugger\v2\FormatMessage
     */
    public function getDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <description> value
     *
     * @param \google\devtools\clouddebugger\v2\FormatMessage $value
     * @return \google\devtools\clouddebugger\v2\StatusMessage
     */
    public function setDescription(\google\devtools\clouddebugger\v2\FormatMessage $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class SourceLocation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $path = null;
    
    /**  @var int */
    public $line = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.SourceLocation');

      // OPTIONAL STRING path = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 line = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "line";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(1);
    }
    
    /**
     * Clear <path> value
     *
     * @return \google\devtools\clouddebugger\v2\SourceLocation
     */
    public function clearPath(){
      return $this->_clear(1);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(1);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\SourceLocation
     */
    public function setPath( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <line> has a value
     *
     * @return boolean
     */
    public function hasLine(){
      return $this->_has(2);
    }
    
    /**
     * Clear <line> value
     *
     * @return \google\devtools\clouddebugger\v2\SourceLocation
     */
    public function clearLine(){
      return $this->_clear(2);
    }
    
    /**
     * Get <line> value
     *
     * @return int
     */
    public function getLine(){
      return $this->_get(2);
    }
    
    /**
     * Set <line> value
     *
     * @param int $value
     * @return \google\devtools\clouddebugger\v2\SourceLocation
     */
    public function setLine( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class Variable extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $value = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var \google\devtools\clouddebugger\v2\Variable[]  */
    public $members = array();
    
    /**  @var \google\protobuf\Int32Value */
    public $var_table_index = null;
    
    /**  @var \google\devtools\clouddebugger\v2\StatusMessage */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.Variable');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE members = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "members";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Variable';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE var_table_index = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "var_table_index";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Int32Value';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE status = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\StatusMessage';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(6);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function clearType(){
      return $this->_clear(6);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(6);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function setType( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <members> has a value
     *
     * @return boolean
     */
    public function hasMembers(){
      return $this->_has(3);
    }
    
    /**
     * Clear <members> value
     *
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function clearMembers(){
      return $this->_clear(3);
    }
    
    /**
     * Get <members> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function getMembers($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <members> value
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function setMembers(\google\devtools\clouddebugger\v2\Variable $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <members>
     *
     * @return \google\devtools\clouddebugger\v2\Variable[]
     */
    public function getMembersList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <members>
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function addMembers(\google\devtools\clouddebugger\v2\Variable $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <var_table_index> has a value
     *
     * @return boolean
     */
    public function hasVarTableIndex(){
      return $this->_has(4);
    }
    
    /**
     * Clear <var_table_index> value
     *
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function clearVarTableIndex(){
      return $this->_clear(4);
    }
    
    /**
     * Get <var_table_index> value
     *
     * @return \google\protobuf\Int32Value
     */
    public function getVarTableIndex(){
      return $this->_get(4);
    }
    
    /**
     * Set <var_table_index> value
     *
     * @param \google\protobuf\Int32Value $value
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function setVarTableIndex(\google\protobuf\Int32Value $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(5);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function clearStatus(){
      return $this->_clear(5);
    }
    
    /**
     * Get <status> value
     *
     * @return \google\devtools\clouddebugger\v2\StatusMessage
     */
    public function getStatus(){
      return $this->_get(5);
    }
    
    /**
     * Set <status> value
     *
     * @param \google\devtools\clouddebugger\v2\StatusMessage $value
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function setStatus(\google\devtools\clouddebugger\v2\StatusMessage $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class StackFrame extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $function = null;
    
    /**  @var \google\devtools\clouddebugger\v2\SourceLocation */
    public $location = null;
    
    /**  @var \google\devtools\clouddebugger\v2\Variable[]  */
    public $arguments = array();
    
    /**  @var \google\devtools\clouddebugger\v2\Variable[]  */
    public $locals = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.StackFrame');

      // OPTIONAL STRING function = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "function";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE location = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "location";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\SourceLocation';
      $descriptor->addField($f);

      // REPEATED MESSAGE arguments = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "arguments";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Variable';
      $descriptor->addField($f);

      // REPEATED MESSAGE locals = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "locals";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Variable';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <function> has a value
     *
     * @return boolean
     */
    public function hasFunction(){
      return $this->_has(1);
    }
    
    /**
     * Clear <function> value
     *
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function clearFunction(){
      return $this->_clear(1);
    }
    
    /**
     * Get <function> value
     *
     * @return string
     */
    public function getFunction(){
      return $this->_get(1);
    }
    
    /**
     * Set <function> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function setFunction( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <location> has a value
     *
     * @return boolean
     */
    public function hasLocation(){
      return $this->_has(2);
    }
    
    /**
     * Clear <location> value
     *
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function clearLocation(){
      return $this->_clear(2);
    }
    
    /**
     * Get <location> value
     *
     * @return \google\devtools\clouddebugger\v2\SourceLocation
     */
    public function getLocation(){
      return $this->_get(2);
    }
    
    /**
     * Set <location> value
     *
     * @param \google\devtools\clouddebugger\v2\SourceLocation $value
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function setLocation(\google\devtools\clouddebugger\v2\SourceLocation $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <arguments> has a value
     *
     * @return boolean
     */
    public function hasArguments(){
      return $this->_has(3);
    }
    
    /**
     * Clear <arguments> value
     *
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function clearArguments(){
      return $this->_clear(3);
    }
    
    /**
     * Get <arguments> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function getArguments($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <arguments> value
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function setArguments(\google\devtools\clouddebugger\v2\Variable $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <arguments>
     *
     * @return \google\devtools\clouddebugger\v2\Variable[]
     */
    public function getArgumentsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <arguments>
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function addArguments(\google\devtools\clouddebugger\v2\Variable $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <locals> has a value
     *
     * @return boolean
     */
    public function hasLocals(){
      return $this->_has(4);
    }
    
    /**
     * Clear <locals> value
     *
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function clearLocals(){
      return $this->_clear(4);
    }
    
    /**
     * Get <locals> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function getLocals($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <locals> value
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function setLocals(\google\devtools\clouddebugger\v2\Variable $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <locals>
     *
     * @return \google\devtools\clouddebugger\v2\Variable[]
     */
    public function getLocalsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <locals>
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function addLocals(\google\devtools\clouddebugger\v2\Variable $value){
     return $this->_add(4, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2\Breakpoint {

  class Action extends \DrSlump\Protobuf\Enum {
    const CAPTURE = 0;
    const LOG = 1;
  }
}
namespace google\devtools\clouddebugger\v2\Breakpoint {

  class LogLevel extends \DrSlump\Protobuf\Enum {
    const INFO = 0;
    const WARNING = 1;
    const ERROR = 2;
  }
}
namespace google\devtools\clouddebugger\v2\Breakpoint {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.Breakpoint.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class Breakpoint extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var int - \google\devtools\clouddebugger\v2\Breakpoint\Action */
    public $action = null;
    
    /**  @var \google\devtools\clouddebugger\v2\SourceLocation */
    public $location = null;
    
    /**  @var string */
    public $condition = null;
    
    /**  @var string[]  */
    public $expressions = array();
    
    /**  @var string */
    public $log_message_format = null;
    
    /**  @var int - \google\devtools\clouddebugger\v2\Breakpoint\LogLevel */
    public $log_level = null;
    
    /**  @var boolean */
    public $is_final_state = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $create_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $final_time = null;
    
    /**  @var string */
    public $user_email = null;
    
    /**  @var \google\devtools\clouddebugger\v2\StatusMessage */
    public $status = null;
    
    /**  @var \google\devtools\clouddebugger\v2\StackFrame[]  */
    public $stack_frames = array();
    
    /**  @var \google\devtools\clouddebugger\v2\Variable[]  */
    public $evaluated_expressions = array();
    
    /**  @var \google\devtools\clouddebugger\v2\Variable[]  */
    public $variable_table = array();
    
    /**  @var \google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry[]  */
    public $labels = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.Breakpoint');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM action = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "action";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint\Action';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE location = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "location";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\SourceLocation';
      $descriptor->addField($f);

      // OPTIONAL STRING condition = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "condition";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING expressions = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "expressions";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING log_message_format = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "log_message_format";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM log_level = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "log_level";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint\LogLevel';
      $descriptor->addField($f);

      // OPTIONAL BOOL is_final_state = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "is_final_state";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE create_time = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "create_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE final_time = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "final_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL STRING user_email = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "user_email";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE status = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\StatusMessage';
      $descriptor->addField($f);

      // REPEATED MESSAGE stack_frames = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "stack_frames";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\StackFrame';
      $descriptor->addField($f);

      // REPEATED MESSAGE evaluated_expressions = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "evaluated_expressions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Variable';
      $descriptor->addField($f);

      // REPEATED MESSAGE variable_table = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "variable_table";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Variable';
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <action> has a value
     *
     * @return boolean
     */
    public function hasAction(){
      return $this->_has(13);
    }
    
    /**
     * Clear <action> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearAction(){
      return $this->_clear(13);
    }
    
    /**
     * Get <action> value
     *
     * @return int - \google\devtools\clouddebugger\v2\Breakpoint\Action
     */
    public function getAction(){
      return $this->_get(13);
    }
    
    /**
     * Set <action> value
     *
     * @param int - \google\devtools\clouddebugger\v2\Breakpoint\Action $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setAction( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <location> has a value
     *
     * @return boolean
     */
    public function hasLocation(){
      return $this->_has(2);
    }
    
    /**
     * Clear <location> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearLocation(){
      return $this->_clear(2);
    }
    
    /**
     * Get <location> value
     *
     * @return \google\devtools\clouddebugger\v2\SourceLocation
     */
    public function getLocation(){
      return $this->_get(2);
    }
    
    /**
     * Set <location> value
     *
     * @param \google\devtools\clouddebugger\v2\SourceLocation $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setLocation(\google\devtools\clouddebugger\v2\SourceLocation $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <condition> has a value
     *
     * @return boolean
     */
    public function hasCondition(){
      return $this->_has(3);
    }
    
    /**
     * Clear <condition> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearCondition(){
      return $this->_clear(3);
    }
    
    /**
     * Get <condition> value
     *
     * @return string
     */
    public function getCondition(){
      return $this->_get(3);
    }
    
    /**
     * Set <condition> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setCondition( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <expressions> has a value
     *
     * @return boolean
     */
    public function hasExpressions(){
      return $this->_has(4);
    }
    
    /**
     * Clear <expressions> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearExpressions(){
      return $this->_clear(4);
    }
    
    /**
     * Get <expressions> value
     *
     * @param int $idx
     * @return string
     */
    public function getExpressions($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <expressions> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setExpressions( $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <expressions>
     *
     * @return string[]
     */
    public function getExpressionsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <expressions>
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function addExpressions( $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <log_message_format> has a value
     *
     * @return boolean
     */
    public function hasLogMessageFormat(){
      return $this->_has(14);
    }
    
    /**
     * Clear <log_message_format> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearLogMessageFormat(){
      return $this->_clear(14);
    }
    
    /**
     * Get <log_message_format> value
     *
     * @return string
     */
    public function getLogMessageFormat(){
      return $this->_get(14);
    }
    
    /**
     * Set <log_message_format> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setLogMessageFormat( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <log_level> has a value
     *
     * @return boolean
     */
    public function hasLogLevel(){
      return $this->_has(15);
    }
    
    /**
     * Clear <log_level> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearLogLevel(){
      return $this->_clear(15);
    }
    
    /**
     * Get <log_level> value
     *
     * @return int - \google\devtools\clouddebugger\v2\Breakpoint\LogLevel
     */
    public function getLogLevel(){
      return $this->_get(15);
    }
    
    /**
     * Set <log_level> value
     *
     * @param int - \google\devtools\clouddebugger\v2\Breakpoint\LogLevel $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setLogLevel( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <is_final_state> has a value
     *
     * @return boolean
     */
    public function hasIsFinalState(){
      return $this->_has(5);
    }
    
    /**
     * Clear <is_final_state> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearIsFinalState(){
      return $this->_clear(5);
    }
    
    /**
     * Get <is_final_state> value
     *
     * @return boolean
     */
    public function getIsFinalState(){
      return $this->_get(5);
    }
    
    /**
     * Set <is_final_state> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setIsFinalState( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <create_time> has a value
     *
     * @return boolean
     */
    public function hasCreateTime(){
      return $this->_has(11);
    }
    
    /**
     * Clear <create_time> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearCreateTime(){
      return $this->_clear(11);
    }
    
    /**
     * Get <create_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getCreateTime(){
      return $this->_get(11);
    }
    
    /**
     * Set <create_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setCreateTime(\google\protobuf\Timestamp $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <final_time> has a value
     *
     * @return boolean
     */
    public function hasFinalTime(){
      return $this->_has(12);
    }
    
    /**
     * Clear <final_time> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearFinalTime(){
      return $this->_clear(12);
    }
    
    /**
     * Get <final_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getFinalTime(){
      return $this->_get(12);
    }
    
    /**
     * Set <final_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setFinalTime(\google\protobuf\Timestamp $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <user_email> has a value
     *
     * @return boolean
     */
    public function hasUserEmail(){
      return $this->_has(16);
    }
    
    /**
     * Clear <user_email> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearUserEmail(){
      return $this->_clear(16);
    }
    
    /**
     * Get <user_email> value
     *
     * @return string
     */
    public function getUserEmail(){
      return $this->_get(16);
    }
    
    /**
     * Set <user_email> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setUserEmail( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(10);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearStatus(){
      return $this->_clear(10);
    }
    
    /**
     * Get <status> value
     *
     * @return \google\devtools\clouddebugger\v2\StatusMessage
     */
    public function getStatus(){
      return $this->_get(10);
    }
    
    /**
     * Set <status> value
     *
     * @param \google\devtools\clouddebugger\v2\StatusMessage $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setStatus(\google\devtools\clouddebugger\v2\StatusMessage $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <stack_frames> has a value
     *
     * @return boolean
     */
    public function hasStackFrames(){
      return $this->_has(7);
    }
    
    /**
     * Clear <stack_frames> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearStackFrames(){
      return $this->_clear(7);
    }
    
    /**
     * Get <stack_frames> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\StackFrame
     */
    public function getStackFrames($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <stack_frames> value
     *
     * @param \google\devtools\clouddebugger\v2\StackFrame $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setStackFrames(\google\devtools\clouddebugger\v2\StackFrame $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <stack_frames>
     *
     * @return \google\devtools\clouddebugger\v2\StackFrame[]
     */
    public function getStackFramesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <stack_frames>
     *
     * @param \google\devtools\clouddebugger\v2\StackFrame $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function addStackFrames(\google\devtools\clouddebugger\v2\StackFrame $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <evaluated_expressions> has a value
     *
     * @return boolean
     */
    public function hasEvaluatedExpressions(){
      return $this->_has(8);
    }
    
    /**
     * Clear <evaluated_expressions> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearEvaluatedExpressions(){
      return $this->_clear(8);
    }
    
    /**
     * Get <evaluated_expressions> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function getEvaluatedExpressions($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <evaluated_expressions> value
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setEvaluatedExpressions(\google\devtools\clouddebugger\v2\Variable $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <evaluated_expressions>
     *
     * @return \google\devtools\clouddebugger\v2\Variable[]
     */
    public function getEvaluatedExpressionsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <evaluated_expressions>
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function addEvaluatedExpressions(\google\devtools\clouddebugger\v2\Variable $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <variable_table> has a value
     *
     * @return boolean
     */
    public function hasVariableTable(){
      return $this->_has(9);
    }
    
    /**
     * Clear <variable_table> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearVariableTable(){
      return $this->_clear(9);
    }
    
    /**
     * Get <variable_table> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Variable
     */
    public function getVariableTable($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <variable_table> value
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setVariableTable(\google\devtools\clouddebugger\v2\Variable $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <variable_table>
     *
     * @return \google\devtools\clouddebugger\v2\Variable[]
     */
    public function getVariableTableList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <variable_table>
     *
     * @param \google\devtools\clouddebugger\v2\Variable $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function addVariableTable(\google\devtools\clouddebugger\v2\Variable $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(17);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function clearLabels(){
      return $this->_clear(17);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(17, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function setLabels(\google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry $value, $idx = NULL){
      return $this->_set(17, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(17);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry $value
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function addLabels(\google\devtools\clouddebugger\v2\Breakpoint\LabelsEntry $value){
     return $this->_add(17, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2\Debuggee {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.Debuggee.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Debuggee\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Debuggee\LabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class Debuggee extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $project = null;
    
    /**  @var string */
    public $uniquifier = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var boolean */
    public $is_inactive = null;
    
    /**  @var string */
    public $agent_version = null;
    
    /**  @var boolean */
    public $is_disabled = null;
    
    /**  @var \google\devtools\clouddebugger\v2\StatusMessage */
    public $status = null;
    
    /**  @var \google\devtools\source\v1\SourceContext[]  */
    public $source_contexts = array();
    
    /**  @var \google\devtools\source\v1\ExtendedSourceContext[]  */
    public $ext_source_contexts = array();
    
    /**  @var \google\devtools\clouddebugger\v2\Debuggee\LabelsEntry[]  */
    public $labels = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.Debuggee');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING project = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "project";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING uniquifier = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "uniquifier";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_inactive = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "is_inactive";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING agent_version = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "agent_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL is_disabled = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "is_disabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE status = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\StatusMessage';
      $descriptor->addField($f);

      // REPEATED MESSAGE source_contexts = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "source_contexts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\source\v1\SourceContext';
      $descriptor->addField($f);

      // REPEATED MESSAGE ext_source_contexts = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "ext_source_contexts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\source\v1\ExtendedSourceContext';
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Debuggee\LabelsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <project> has a value
     *
     * @return boolean
     */
    public function hasProject(){
      return $this->_has(2);
    }
    
    /**
     * Clear <project> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearProject(){
      return $this->_clear(2);
    }
    
    /**
     * Get <project> value
     *
     * @return string
     */
    public function getProject(){
      return $this->_get(2);
    }
    
    /**
     * Set <project> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setProject( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <uniquifier> has a value
     *
     * @return boolean
     */
    public function hasUniquifier(){
      return $this->_has(3);
    }
    
    /**
     * Clear <uniquifier> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearUniquifier(){
      return $this->_clear(3);
    }
    
    /**
     * Get <uniquifier> value
     *
     * @return string
     */
    public function getUniquifier(){
      return $this->_get(3);
    }
    
    /**
     * Set <uniquifier> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setUniquifier( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(4);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearDescription(){
      return $this->_clear(4);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(4);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setDescription( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <is_inactive> has a value
     *
     * @return boolean
     */
    public function hasIsInactive(){
      return $this->_has(5);
    }
    
    /**
     * Clear <is_inactive> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearIsInactive(){
      return $this->_clear(5);
    }
    
    /**
     * Get <is_inactive> value
     *
     * @return boolean
     */
    public function getIsInactive(){
      return $this->_get(5);
    }
    
    /**
     * Set <is_inactive> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setIsInactive( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <agent_version> has a value
     *
     * @return boolean
     */
    public function hasAgentVersion(){
      return $this->_has(6);
    }
    
    /**
     * Clear <agent_version> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearAgentVersion(){
      return $this->_clear(6);
    }
    
    /**
     * Get <agent_version> value
     *
     * @return string
     */
    public function getAgentVersion(){
      return $this->_get(6);
    }
    
    /**
     * Set <agent_version> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setAgentVersion( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <is_disabled> has a value
     *
     * @return boolean
     */
    public function hasIsDisabled(){
      return $this->_has(7);
    }
    
    /**
     * Clear <is_disabled> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearIsDisabled(){
      return $this->_clear(7);
    }
    
    /**
     * Get <is_disabled> value
     *
     * @return boolean
     */
    public function getIsDisabled(){
      return $this->_get(7);
    }
    
    /**
     * Set <is_disabled> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setIsDisabled( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(8);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearStatus(){
      return $this->_clear(8);
    }
    
    /**
     * Get <status> value
     *
     * @return \google\devtools\clouddebugger\v2\StatusMessage
     */
    public function getStatus(){
      return $this->_get(8);
    }
    
    /**
     * Set <status> value
     *
     * @param \google\devtools\clouddebugger\v2\StatusMessage $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setStatus(\google\devtools\clouddebugger\v2\StatusMessage $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <source_contexts> has a value
     *
     * @return boolean
     */
    public function hasSourceContexts(){
      return $this->_has(9);
    }
    
    /**
     * Clear <source_contexts> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearSourceContexts(){
      return $this->_clear(9);
    }
    
    /**
     * Get <source_contexts> value
     *
     * @param int $idx
     * @return \google\devtools\source\v1\SourceContext
     */
    public function getSourceContexts($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <source_contexts> value
     *
     * @param \google\devtools\source\v1\SourceContext $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setSourceContexts(\google\devtools\source\v1\SourceContext $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <source_contexts>
     *
     * @return \google\devtools\source\v1\SourceContext[]
     */
    public function getSourceContextsList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <source_contexts>
     *
     * @param \google\devtools\source\v1\SourceContext $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function addSourceContexts(\google\devtools\source\v1\SourceContext $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <ext_source_contexts> has a value
     *
     * @return boolean
     */
    public function hasExtSourceContexts(){
      return $this->_has(13);
    }
    
    /**
     * Clear <ext_source_contexts> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearExtSourceContexts(){
      return $this->_clear(13);
    }
    
    /**
     * Get <ext_source_contexts> value
     *
     * @param int $idx
     * @return \google\devtools\source\v1\ExtendedSourceContext
     */
    public function getExtSourceContexts($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <ext_source_contexts> value
     *
     * @param \google\devtools\source\v1\ExtendedSourceContext $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setExtSourceContexts(\google\devtools\source\v1\ExtendedSourceContext $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <ext_source_contexts>
     *
     * @return \google\devtools\source\v1\ExtendedSourceContext[]
     */
    public function getExtSourceContextsList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <ext_source_contexts>
     *
     * @param \google\devtools\source\v1\ExtendedSourceContext $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function addExtSourceContexts(\google\devtools\source\v1\ExtendedSourceContext $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(11);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function clearLabels(){
      return $this->_clear(11);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Debuggee\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\devtools\clouddebugger\v2\Debuggee\LabelsEntry $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function setLabels(\google\devtools\clouddebugger\v2\Debuggee\LabelsEntry $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\devtools\clouddebugger\v2\Debuggee\LabelsEntry $value
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function addLabels(\google\devtools\clouddebugger\v2\Debuggee\LabelsEntry $value){
     return $this->_add(11, $value);
    }
  }
}

