<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/assistant/embedded/v1alpha1/embedded_assistant.proto
//   Date: 2017-06-13 04:23:27

namespace google\assistant\embedded\v1alpha1 {

  class ConverseConfig extends \DrSlump\Protobuf\Message {

    /**  @var \google\assistant\embedded\v1alpha1\AudioInConfig */
    public $audio_in_config = null;
    
    /**  @var \google\assistant\embedded\v1alpha1\AudioOutConfig */
    public $audio_out_config = null;
    
    /**  @var \google\assistant\embedded\v1alpha1\ConverseState */
    public $converse_state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.assistant.embedded.v1alpha1.ConverseConfig');

      // OPTIONAL MESSAGE audio_in_config = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "audio_in_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\AudioInConfig';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE audio_out_config = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "audio_out_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\AudioOutConfig';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE converse_state = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "converse_state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\ConverseState';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <audio_in_config> has a value
     *
     * @return boolean
     */
    public function hasAudioInConfig(){
      return $this->_has(1);
    }
    
    /**
     * Clear <audio_in_config> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseConfig
     */
    public function clearAudioInConfig(){
      return $this->_clear(1);
    }
    
    /**
     * Get <audio_in_config> value
     *
     * @return \google\assistant\embedded\v1alpha1\AudioInConfig
     */
    public function getAudioInConfig(){
      return $this->_get(1);
    }
    
    /**
     * Set <audio_in_config> value
     *
     * @param \google\assistant\embedded\v1alpha1\AudioInConfig $value
     * @return \google\assistant\embedded\v1alpha1\ConverseConfig
     */
    public function setAudioInConfig(\google\assistant\embedded\v1alpha1\AudioInConfig $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <audio_out_config> has a value
     *
     * @return boolean
     */
    public function hasAudioOutConfig(){
      return $this->_has(2);
    }
    
    /**
     * Clear <audio_out_config> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseConfig
     */
    public function clearAudioOutConfig(){
      return $this->_clear(2);
    }
    
    /**
     * Get <audio_out_config> value
     *
     * @return \google\assistant\embedded\v1alpha1\AudioOutConfig
     */
    public function getAudioOutConfig(){
      return $this->_get(2);
    }
    
    /**
     * Set <audio_out_config> value
     *
     * @param \google\assistant\embedded\v1alpha1\AudioOutConfig $value
     * @return \google\assistant\embedded\v1alpha1\ConverseConfig
     */
    public function setAudioOutConfig(\google\assistant\embedded\v1alpha1\AudioOutConfig $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <converse_state> has a value
     *
     * @return boolean
     */
    public function hasConverseState(){
      return $this->_has(3);
    }
    
    /**
     * Clear <converse_state> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseConfig
     */
    public function clearConverseState(){
      return $this->_clear(3);
    }
    
    /**
     * Get <converse_state> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseState
     */
    public function getConverseState(){
      return $this->_get(3);
    }
    
    /**
     * Set <converse_state> value
     *
     * @param \google\assistant\embedded\v1alpha1\ConverseState $value
     * @return \google\assistant\embedded\v1alpha1\ConverseConfig
     */
    public function setConverseState(\google\assistant\embedded\v1alpha1\ConverseState $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\assistant\embedded\v1alpha1\AudioInConfig {

  class Encoding extends \DrSlump\Protobuf\Enum {
    const ENCODING_UNSPECIFIED = 0;
    const LINEAR16 = 1;
    const FLAC = 2;
  }
}
namespace google\assistant\embedded\v1alpha1 {

  class AudioInConfig extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\assistant\embedded\v1alpha1\AudioInConfig\Encoding */
    public $encoding = null;
    
    /**  @var int */
    public $sample_rate_hertz = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.assistant.embedded.v1alpha1.AudioInConfig');

      // OPTIONAL ENUM encoding = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "encoding";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\AudioInConfig\Encoding';
      $descriptor->addField($f);

      // OPTIONAL INT32 sample_rate_hertz = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sample_rate_hertz";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <encoding> has a value
     *
     * @return boolean
     */
    public function hasEncoding(){
      return $this->_has(1);
    }
    
    /**
     * Clear <encoding> value
     *
     * @return \google\assistant\embedded\v1alpha1\AudioInConfig
     */
    public function clearEncoding(){
      return $this->_clear(1);
    }
    
    /**
     * Get <encoding> value
     *
     * @return int - \google\assistant\embedded\v1alpha1\AudioInConfig\Encoding
     */
    public function getEncoding(){
      return $this->_get(1);
    }
    
    /**
     * Set <encoding> value
     *
     * @param int - \google\assistant\embedded\v1alpha1\AudioInConfig\Encoding $value
     * @return \google\assistant\embedded\v1alpha1\AudioInConfig
     */
    public function setEncoding( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sample_rate_hertz> has a value
     *
     * @return boolean
     */
    public function hasSampleRateHertz(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sample_rate_hertz> value
     *
     * @return \google\assistant\embedded\v1alpha1\AudioInConfig
     */
    public function clearSampleRateHertz(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sample_rate_hertz> value
     *
     * @return int
     */
    public function getSampleRateHertz(){
      return $this->_get(2);
    }
    
    /**
     * Set <sample_rate_hertz> value
     *
     * @param int $value
     * @return \google\assistant\embedded\v1alpha1\AudioInConfig
     */
    public function setSampleRateHertz( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\assistant\embedded\v1alpha1\AudioOutConfig {

  class Encoding extends \DrSlump\Protobuf\Enum {
    const ENCODING_UNSPECIFIED = 0;
    const LINEAR16 = 1;
    const MP3 = 2;
    const OPUS_IN_OGG = 3;
  }
}
namespace google\assistant\embedded\v1alpha1 {

  class AudioOutConfig extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\assistant\embedded\v1alpha1\AudioOutConfig\Encoding */
    public $encoding = null;
    
    /**  @var int */
    public $sample_rate_hertz = null;
    
    /**  @var int */
    public $volume_percentage = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.assistant.embedded.v1alpha1.AudioOutConfig');

      // OPTIONAL ENUM encoding = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "encoding";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\AudioOutConfig\Encoding';
      $descriptor->addField($f);

      // OPTIONAL INT32 sample_rate_hertz = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sample_rate_hertz";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 volume_percentage = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "volume_percentage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <encoding> has a value
     *
     * @return boolean
     */
    public function hasEncoding(){
      return $this->_has(1);
    }
    
    /**
     * Clear <encoding> value
     *
     * @return \google\assistant\embedded\v1alpha1\AudioOutConfig
     */
    public function clearEncoding(){
      return $this->_clear(1);
    }
    
    /**
     * Get <encoding> value
     *
     * @return int - \google\assistant\embedded\v1alpha1\AudioOutConfig\Encoding
     */
    public function getEncoding(){
      return $this->_get(1);
    }
    
    /**
     * Set <encoding> value
     *
     * @param int - \google\assistant\embedded\v1alpha1\AudioOutConfig\Encoding $value
     * @return \google\assistant\embedded\v1alpha1\AudioOutConfig
     */
    public function setEncoding( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sample_rate_hertz> has a value
     *
     * @return boolean
     */
    public function hasSampleRateHertz(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sample_rate_hertz> value
     *
     * @return \google\assistant\embedded\v1alpha1\AudioOutConfig
     */
    public function clearSampleRateHertz(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sample_rate_hertz> value
     *
     * @return int
     */
    public function getSampleRateHertz(){
      return $this->_get(2);
    }
    
    /**
     * Set <sample_rate_hertz> value
     *
     * @param int $value
     * @return \google\assistant\embedded\v1alpha1\AudioOutConfig
     */
    public function setSampleRateHertz( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <volume_percentage> has a value
     *
     * @return boolean
     */
    public function hasVolumePercentage(){
      return $this->_has(3);
    }
    
    /**
     * Clear <volume_percentage> value
     *
     * @return \google\assistant\embedded\v1alpha1\AudioOutConfig
     */
    public function clearVolumePercentage(){
      return $this->_clear(3);
    }
    
    /**
     * Get <volume_percentage> value
     *
     * @return int
     */
    public function getVolumePercentage(){
      return $this->_get(3);
    }
    
    /**
     * Set <volume_percentage> value
     *
     * @param int $value
     * @return \google\assistant\embedded\v1alpha1\AudioOutConfig
     */
    public function setVolumePercentage( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\assistant\embedded\v1alpha1 {

  class ConverseState extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $conversation_state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.assistant.embedded.v1alpha1.ConverseState');

      // OPTIONAL BYTES conversation_state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "conversation_state";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <conversation_state> has a value
     *
     * @return boolean
     */
    public function hasConversationState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <conversation_state> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseState
     */
    public function clearConversationState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <conversation_state> value
     *
     * @return string
     */
    public function getConversationState(){
      return $this->_get(1);
    }
    
    /**
     * Set <conversation_state> value
     *
     * @param string $value
     * @return \google\assistant\embedded\v1alpha1\ConverseState
     */
    public function setConversationState( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\assistant\embedded\v1alpha1 {

  class AudioOut extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $audio_data = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.assistant.embedded.v1alpha1.AudioOut');

      // OPTIONAL BYTES audio_data = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "audio_data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <audio_data> has a value
     *
     * @return boolean
     */
    public function hasAudioData(){
      return $this->_has(1);
    }
    
    /**
     * Clear <audio_data> value
     *
     * @return \google\assistant\embedded\v1alpha1\AudioOut
     */
    public function clearAudioData(){
      return $this->_clear(1);
    }
    
    /**
     * Get <audio_data> value
     *
     * @return string
     */
    public function getAudioData(){
      return $this->_get(1);
    }
    
    /**
     * Set <audio_data> value
     *
     * @param string $value
     * @return \google\assistant\embedded\v1alpha1\AudioOut
     */
    public function setAudioData( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\assistant\embedded\v1alpha1\ConverseResult {

  class MicrophoneMode extends \DrSlump\Protobuf\Enum {
    const MICROPHONE_MODE_UNSPECIFIED = 0;
    const CLOSE_MICROPHONE = 1;
    const DIALOG_FOLLOW_ON = 2;
  }
}
namespace google\assistant\embedded\v1alpha1 {

  class ConverseResult extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $spoken_request_text = null;
    
    /**  @var string */
    public $spoken_response_text = null;
    
    /**  @var string */
    public $conversation_state = null;
    
    /**  @var int - \google\assistant\embedded\v1alpha1\ConverseResult\MicrophoneMode */
    public $microphone_mode = null;
    
    /**  @var int */
    public $volume_percentage = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.assistant.embedded.v1alpha1.ConverseResult');

      // OPTIONAL STRING spoken_request_text = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "spoken_request_text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING spoken_response_text = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "spoken_response_text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES conversation_state = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "conversation_state";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM microphone_mode = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "microphone_mode";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\ConverseResult\MicrophoneMode';
      $descriptor->addField($f);

      // OPTIONAL INT32 volume_percentage = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "volume_percentage";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <spoken_request_text> has a value
     *
     * @return boolean
     */
    public function hasSpokenRequestText(){
      return $this->_has(1);
    }
    
    /**
     * Clear <spoken_request_text> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function clearSpokenRequestText(){
      return $this->_clear(1);
    }
    
    /**
     * Get <spoken_request_text> value
     *
     * @return string
     */
    public function getSpokenRequestText(){
      return $this->_get(1);
    }
    
    /**
     * Set <spoken_request_text> value
     *
     * @param string $value
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function setSpokenRequestText( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <spoken_response_text> has a value
     *
     * @return boolean
     */
    public function hasSpokenResponseText(){
      return $this->_has(2);
    }
    
    /**
     * Clear <spoken_response_text> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function clearSpokenResponseText(){
      return $this->_clear(2);
    }
    
    /**
     * Get <spoken_response_text> value
     *
     * @return string
     */
    public function getSpokenResponseText(){
      return $this->_get(2);
    }
    
    /**
     * Set <spoken_response_text> value
     *
     * @param string $value
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function setSpokenResponseText( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <conversation_state> has a value
     *
     * @return boolean
     */
    public function hasConversationState(){
      return $this->_has(3);
    }
    
    /**
     * Clear <conversation_state> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function clearConversationState(){
      return $this->_clear(3);
    }
    
    /**
     * Get <conversation_state> value
     *
     * @return string
     */
    public function getConversationState(){
      return $this->_get(3);
    }
    
    /**
     * Set <conversation_state> value
     *
     * @param string $value
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function setConversationState( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <microphone_mode> has a value
     *
     * @return boolean
     */
    public function hasMicrophoneMode(){
      return $this->_has(4);
    }
    
    /**
     * Clear <microphone_mode> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function clearMicrophoneMode(){
      return $this->_clear(4);
    }
    
    /**
     * Get <microphone_mode> value
     *
     * @return int - \google\assistant\embedded\v1alpha1\ConverseResult\MicrophoneMode
     */
    public function getMicrophoneMode(){
      return $this->_get(4);
    }
    
    /**
     * Set <microphone_mode> value
     *
     * @param int - \google\assistant\embedded\v1alpha1\ConverseResult\MicrophoneMode $value
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function setMicrophoneMode( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <volume_percentage> has a value
     *
     * @return boolean
     */
    public function hasVolumePercentage(){
      return $this->_has(5);
    }
    
    /**
     * Clear <volume_percentage> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function clearVolumePercentage(){
      return $this->_clear(5);
    }
    
    /**
     * Get <volume_percentage> value
     *
     * @return int
     */
    public function getVolumePercentage(){
      return $this->_get(5);
    }
    
    /**
     * Set <volume_percentage> value
     *
     * @param int $value
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function setVolumePercentage( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\assistant\embedded\v1alpha1 {

  class ConverseRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\assistant\embedded\v1alpha1\ConverseConfig */
    public $config = null;
    
    /**  @var string */
    public $audio_in = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.assistant.embedded.v1alpha1.ConverseRequest');

      // OPTIONAL MESSAGE config = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\ConverseConfig';
      $descriptor->addField($f);

      // OPTIONAL BYTES audio_in = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "audio_in";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <config> has a value
     *
     * @return boolean
     */
    public function hasConfig(){
      return $this->_has(1);
    }
    
    /**
     * Clear <config> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseRequest
     */
    public function clearConfig(){
      return $this->_clear(1);
    }
    
    /**
     * Get <config> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseConfig
     */
    public function getConfig(){
      return $this->_get(1);
    }
    
    /**
     * Set <config> value
     *
     * @param \google\assistant\embedded\v1alpha1\ConverseConfig $value
     * @return \google\assistant\embedded\v1alpha1\ConverseRequest
     */
    public function setConfig(\google\assistant\embedded\v1alpha1\ConverseConfig $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <audio_in> has a value
     *
     * @return boolean
     */
    public function hasAudioIn(){
      return $this->_has(2);
    }
    
    /**
     * Clear <audio_in> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseRequest
     */
    public function clearAudioIn(){
      return $this->_clear(2);
    }
    
    /**
     * Get <audio_in> value
     *
     * @return string
     */
    public function getAudioIn(){
      return $this->_get(2);
    }
    
    /**
     * Set <audio_in> value
     *
     * @param string $value
     * @return \google\assistant\embedded\v1alpha1\ConverseRequest
     */
    public function setAudioIn( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\assistant\embedded\v1alpha1\ConverseResponse {

  class EventType extends \DrSlump\Protobuf\Enum {
    const EVENT_TYPE_UNSPECIFIED = 0;
    const END_OF_UTTERANCE = 1;
  }
}
namespace google\assistant\embedded\v1alpha1 {

  class ConverseResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\rpc\Status */
    public $error = null;
    
    /**  @var int - \google\assistant\embedded\v1alpha1\ConverseResponse\EventType */
    public $event_type = null;
    
    /**  @var \google\assistant\embedded\v1alpha1\AudioOut */
    public $audio_out = null;
    
    /**  @var \google\assistant\embedded\v1alpha1\ConverseResult */
    public $result = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.assistant.embedded.v1alpha1.ConverseResponse');

      // OPTIONAL MESSAGE error = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "error";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\rpc\Status';
      $descriptor->addField($f);

      // OPTIONAL ENUM event_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "event_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\ConverseResponse\EventType';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE audio_out = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "audio_out";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\AudioOut';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE result = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\assistant\embedded\v1alpha1\ConverseResult';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <error> has a value
     *
     * @return boolean
     */
    public function hasError(){
      return $this->_has(1);
    }
    
    /**
     * Clear <error> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResponse
     */
    public function clearError(){
      return $this->_clear(1);
    }
    
    /**
     * Get <error> value
     *
     * @return \google\rpc\Status
     */
    public function getError(){
      return $this->_get(1);
    }
    
    /**
     * Set <error> value
     *
     * @param \google\rpc\Status $value
     * @return \google\assistant\embedded\v1alpha1\ConverseResponse
     */
    public function setError(\google\rpc\Status $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <event_type> has a value
     *
     * @return boolean
     */
    public function hasEventType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <event_type> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResponse
     */
    public function clearEventType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <event_type> value
     *
     * @return int - \google\assistant\embedded\v1alpha1\ConverseResponse\EventType
     */
    public function getEventType(){
      return $this->_get(2);
    }
    
    /**
     * Set <event_type> value
     *
     * @param int - \google\assistant\embedded\v1alpha1\ConverseResponse\EventType $value
     * @return \google\assistant\embedded\v1alpha1\ConverseResponse
     */
    public function setEventType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <audio_out> has a value
     *
     * @return boolean
     */
    public function hasAudioOut(){
      return $this->_has(3);
    }
    
    /**
     * Clear <audio_out> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResponse
     */
    public function clearAudioOut(){
      return $this->_clear(3);
    }
    
    /**
     * Get <audio_out> value
     *
     * @return \google\assistant\embedded\v1alpha1\AudioOut
     */
    public function getAudioOut(){
      return $this->_get(3);
    }
    
    /**
     * Set <audio_out> value
     *
     * @param \google\assistant\embedded\v1alpha1\AudioOut $value
     * @return \google\assistant\embedded\v1alpha1\ConverseResponse
     */
    public function setAudioOut(\google\assistant\embedded\v1alpha1\AudioOut $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(5);
    }
    
    /**
     * Clear <result> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResponse
     */
    public function clearResult(){
      return $this->_clear(5);
    }
    
    /**
     * Get <result> value
     *
     * @return \google\assistant\embedded\v1alpha1\ConverseResult
     */
    public function getResult(){
      return $this->_get(5);
    }
    
    /**
     * Set <result> value
     *
     * @param \google\assistant\embedded\v1alpha1\ConverseResult $value
     * @return \google\assistant\embedded\v1alpha1\ConverseResponse
     */
    public function setResult(\google\assistant\embedded\v1alpha1\ConverseResult $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\assistant\embedded\v1alpha1 {

  class EmbeddedAssistantClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\assistant\embedded\v1alpha1\ConverseRequest $input
     */
    public function Converse($metadata = array(), $options = array()) {
      return $this->_bidiRequest('/google.assistant.embedded.v1alpha1.EmbeddedAssistant/Converse', '\google\assistant\embedded\v1alpha1\ConverseResponse::deserialize', $metadata, $options);
    }
  }
}
