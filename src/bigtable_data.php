<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/bigtable/v1/bigtable_data.proto
//   Date: 2017-06-13 04:23:45

namespace google\bigtable\v1 {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\bigtable\v1\Family[]  */
    public $families = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.Row');

      // OPTIONAL BYTES key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE families = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "families";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\Family';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\bigtable\v1\Row
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Row
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <families> has a value
     *
     * @return boolean
     */
    public function hasFamilies(){
      return $this->_has(2);
    }
    
    /**
     * Clear <families> value
     *
     * @return \google\bigtable\v1\Row
     */
    public function clearFamilies(){
      return $this->_clear(2);
    }
    
    /**
     * Get <families> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\Family
     */
    public function getFamilies($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <families> value
     *
     * @param \google\bigtable\v1\Family $value
     * @return \google\bigtable\v1\Row
     */
    public function setFamilies(\google\bigtable\v1\Family $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <families>
     *
     * @return \google\bigtable\v1\Family[]
     */
    public function getFamiliesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <families>
     *
     * @param \google\bigtable\v1\Family $value
     * @return \google\bigtable\v1\Row
     */
    public function addFamilies(\google\bigtable\v1\Family $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class Family extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\bigtable\v1\Column[]  */
    public $columns = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.Family');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE columns = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "columns";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\Column';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\v1\Family
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Family
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <columns> has a value
     *
     * @return boolean
     */
    public function hasColumns(){
      return $this->_has(2);
    }
    
    /**
     * Clear <columns> value
     *
     * @return \google\bigtable\v1\Family
     */
    public function clearColumns(){
      return $this->_clear(2);
    }
    
    /**
     * Get <columns> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\Column
     */
    public function getColumns($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <columns> value
     *
     * @param \google\bigtable\v1\Column $value
     * @return \google\bigtable\v1\Family
     */
    public function setColumns(\google\bigtable\v1\Column $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <columns>
     *
     * @return \google\bigtable\v1\Column[]
     */
    public function getColumnsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <columns>
     *
     * @param \google\bigtable\v1\Column $value
     * @return \google\bigtable\v1\Family
     */
    public function addColumns(\google\bigtable\v1\Column $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class Column extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $qualifier = null;
    
    /**  @var \google\bigtable\v1\Cell[]  */
    public $cells = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.Column');

      // OPTIONAL BYTES qualifier = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "qualifier";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE cells = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cells";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\Cell';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <qualifier> has a value
     *
     * @return boolean
     */
    public function hasQualifier(){
      return $this->_has(1);
    }
    
    /**
     * Clear <qualifier> value
     *
     * @return \google\bigtable\v1\Column
     */
    public function clearQualifier(){
      return $this->_clear(1);
    }
    
    /**
     * Get <qualifier> value
     *
     * @return string
     */
    public function getQualifier(){
      return $this->_get(1);
    }
    
    /**
     * Set <qualifier> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Column
     */
    public function setQualifier( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cells> has a value
     *
     * @return boolean
     */
    public function hasCells(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cells> value
     *
     * @return \google\bigtable\v1\Column
     */
    public function clearCells(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cells> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\Cell
     */
    public function getCells($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <cells> value
     *
     * @param \google\bigtable\v1\Cell $value
     * @return \google\bigtable\v1\Column
     */
    public function setCells(\google\bigtable\v1\Cell $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <cells>
     *
     * @return \google\bigtable\v1\Cell[]
     */
    public function getCellsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <cells>
     *
     * @param \google\bigtable\v1\Cell $value
     * @return \google\bigtable\v1\Column
     */
    public function addCells(\google\bigtable\v1\Cell $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class Cell extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $timestamp_micros = null;
    
    /**  @var string */
    public $value = null;
    
    /**  @var string[]  */
    public $labels = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.Cell');

      // OPTIONAL INT64 timestamp_micros = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "timestamp_micros";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING labels = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <timestamp_micros> has a value
     *
     * @return boolean
     */
    public function hasTimestampMicros(){
      return $this->_has(1);
    }
    
    /**
     * Clear <timestamp_micros> value
     *
     * @return \google\bigtable\v1\Cell
     */
    public function clearTimestampMicros(){
      return $this->_clear(1);
    }
    
    /**
     * Get <timestamp_micros> value
     *
     * @return int
     */
    public function getTimestampMicros(){
      return $this->_get(1);
    }
    
    /**
     * Set <timestamp_micros> value
     *
     * @param int $value
     * @return \google\bigtable\v1\Cell
     */
    public function setTimestampMicros( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\bigtable\v1\Cell
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Cell
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(3);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\bigtable\v1\Cell
     */
    public function clearLabels(){
      return $this->_clear(3);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return string
     */
    public function getLabels($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Cell
     */
    public function setLabels( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return string[]
     */
    public function getLabelsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param string $value
     * @return \google\bigtable\v1\Cell
     */
    public function addLabels( $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class RowRange extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $start_key = null;
    
    /**  @var string */
    public $end_key = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.RowRange');

      // OPTIONAL BYTES start_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES end_key = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "end_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <start_key> has a value
     *
     * @return boolean
     */
    public function hasStartKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_key> value
     *
     * @return \google\bigtable\v1\RowRange
     */
    public function clearStartKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_key> value
     *
     * @return string
     */
    public function getStartKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\RowRange
     */
    public function setStartKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <end_key> has a value
     *
     * @return boolean
     */
    public function hasEndKey(){
      return $this->_has(3);
    }
    
    /**
     * Clear <end_key> value
     *
     * @return \google\bigtable\v1\RowRange
     */
    public function clearEndKey(){
      return $this->_clear(3);
    }
    
    /**
     * Get <end_key> value
     *
     * @return string
     */
    public function getEndKey(){
      return $this->_get(3);
    }
    
    /**
     * Set <end_key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\RowRange
     */
    public function setEndKey( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class RowSet extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $row_keys = array();
    
    /**  @var \google\bigtable\v1\RowRange[]  */
    public $row_ranges = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.RowSet');

      // REPEATED BYTES row_keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "row_keys";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE row_ranges = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_ranges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\RowRange';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_keys> has a value
     *
     * @return boolean
     */
    public function hasRowKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <row_keys> value
     *
     * @return \google\bigtable\v1\RowSet
     */
    public function clearRowKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <row_keys> value
     *
     * @param int $idx
     * @return string
     */
    public function getRowKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <row_keys> value
     *
     * @param string $value
     * @return \google\bigtable\v1\RowSet
     */
    public function setRowKeys( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <row_keys>
     *
     * @return string[]
     */
    public function getRowKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <row_keys>
     *
     * @param string $value
     * @return \google\bigtable\v1\RowSet
     */
    public function addRowKeys( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <row_ranges> has a value
     *
     * @return boolean
     */
    public function hasRowRanges(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_ranges> value
     *
     * @return \google\bigtable\v1\RowSet
     */
    public function clearRowRanges(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_ranges> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\RowRange
     */
    public function getRowRanges($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <row_ranges> value
     *
     * @param \google\bigtable\v1\RowRange $value
     * @return \google\bigtable\v1\RowSet
     */
    public function setRowRanges(\google\bigtable\v1\RowRange $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <row_ranges>
     *
     * @return \google\bigtable\v1\RowRange[]
     */
    public function getRowRangesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <row_ranges>
     *
     * @param \google\bigtable\v1\RowRange $value
     * @return \google\bigtable\v1\RowSet
     */
    public function addRowRanges(\google\bigtable\v1\RowRange $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class ColumnRange extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $family_name = null;
    
    /**  @var string */
    public $start_qualifier_inclusive = null;
    
    /**  @var string */
    public $start_qualifier_exclusive = null;
    
    /**  @var string */
    public $end_qualifier_inclusive = null;
    
    /**  @var string */
    public $end_qualifier_exclusive = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.ColumnRange');

      // OPTIONAL STRING family_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "family_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES start_qualifier_inclusive = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_qualifier_inclusive";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES start_qualifier_exclusive = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "start_qualifier_exclusive";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES end_qualifier_inclusive = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "end_qualifier_inclusive";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES end_qualifier_exclusive = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "end_qualifier_exclusive";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <family_name> has a value
     *
     * @return boolean
     */
    public function hasFamilyName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <family_name> value
     *
     * @return \google\bigtable\v1\ColumnRange
     */
    public function clearFamilyName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <family_name> value
     *
     * @return string
     */
    public function getFamilyName(){
      return $this->_get(1);
    }
    
    /**
     * Set <family_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ColumnRange
     */
    public function setFamilyName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <start_qualifier_inclusive> has a value
     *
     * @return boolean
     */
    public function hasStartQualifierInclusive(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_qualifier_inclusive> value
     *
     * @return \google\bigtable\v1\ColumnRange
     */
    public function clearStartQualifierInclusive(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_qualifier_inclusive> value
     *
     * @return string
     */
    public function getStartQualifierInclusive(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_qualifier_inclusive> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ColumnRange
     */
    public function setStartQualifierInclusive( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <start_qualifier_exclusive> has a value
     *
     * @return boolean
     */
    public function hasStartQualifierExclusive(){
      return $this->_has(3);
    }
    
    /**
     * Clear <start_qualifier_exclusive> value
     *
     * @return \google\bigtable\v1\ColumnRange
     */
    public function clearStartQualifierExclusive(){
      return $this->_clear(3);
    }
    
    /**
     * Get <start_qualifier_exclusive> value
     *
     * @return string
     */
    public function getStartQualifierExclusive(){
      return $this->_get(3);
    }
    
    /**
     * Set <start_qualifier_exclusive> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ColumnRange
     */
    public function setStartQualifierExclusive( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <end_qualifier_inclusive> has a value
     *
     * @return boolean
     */
    public function hasEndQualifierInclusive(){
      return $this->_has(4);
    }
    
    /**
     * Clear <end_qualifier_inclusive> value
     *
     * @return \google\bigtable\v1\ColumnRange
     */
    public function clearEndQualifierInclusive(){
      return $this->_clear(4);
    }
    
    /**
     * Get <end_qualifier_inclusive> value
     *
     * @return string
     */
    public function getEndQualifierInclusive(){
      return $this->_get(4);
    }
    
    /**
     * Set <end_qualifier_inclusive> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ColumnRange
     */
    public function setEndQualifierInclusive( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <end_qualifier_exclusive> has a value
     *
     * @return boolean
     */
    public function hasEndQualifierExclusive(){
      return $this->_has(5);
    }
    
    /**
     * Clear <end_qualifier_exclusive> value
     *
     * @return \google\bigtable\v1\ColumnRange
     */
    public function clearEndQualifierExclusive(){
      return $this->_clear(5);
    }
    
    /**
     * Get <end_qualifier_exclusive> value
     *
     * @return string
     */
    public function getEndQualifierExclusive(){
      return $this->_get(5);
    }
    
    /**
     * Set <end_qualifier_exclusive> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ColumnRange
     */
    public function setEndQualifierExclusive( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class TimestampRange extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $start_timestamp_micros = null;
    
    /**  @var int */
    public $end_timestamp_micros = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.TimestampRange');

      // OPTIONAL INT64 start_timestamp_micros = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "start_timestamp_micros";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 end_timestamp_micros = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "end_timestamp_micros";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <start_timestamp_micros> has a value
     *
     * @return boolean
     */
    public function hasStartTimestampMicros(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start_timestamp_micros> value
     *
     * @return \google\bigtable\v1\TimestampRange
     */
    public function clearStartTimestampMicros(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start_timestamp_micros> value
     *
     * @return int
     */
    public function getStartTimestampMicros(){
      return $this->_get(1);
    }
    
    /**
     * Set <start_timestamp_micros> value
     *
     * @param int $value
     * @return \google\bigtable\v1\TimestampRange
     */
    public function setStartTimestampMicros( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <end_timestamp_micros> has a value
     *
     * @return boolean
     */
    public function hasEndTimestampMicros(){
      return $this->_has(2);
    }
    
    /**
     * Clear <end_timestamp_micros> value
     *
     * @return \google\bigtable\v1\TimestampRange
     */
    public function clearEndTimestampMicros(){
      return $this->_clear(2);
    }
    
    /**
     * Get <end_timestamp_micros> value
     *
     * @return int
     */
    public function getEndTimestampMicros(){
      return $this->_get(2);
    }
    
    /**
     * Set <end_timestamp_micros> value
     *
     * @param int $value
     * @return \google\bigtable\v1\TimestampRange
     */
    public function setEndTimestampMicros( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class ValueRange extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $start_value_inclusive = null;
    
    /**  @var string */
    public $start_value_exclusive = null;
    
    /**  @var string */
    public $end_value_inclusive = null;
    
    /**  @var string */
    public $end_value_exclusive = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.ValueRange');

      // OPTIONAL BYTES start_value_inclusive = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "start_value_inclusive";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES start_value_exclusive = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "start_value_exclusive";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES end_value_inclusive = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "end_value_inclusive";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES end_value_exclusive = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "end_value_exclusive";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <start_value_inclusive> has a value
     *
     * @return boolean
     */
    public function hasStartValueInclusive(){
      return $this->_has(1);
    }
    
    /**
     * Clear <start_value_inclusive> value
     *
     * @return \google\bigtable\v1\ValueRange
     */
    public function clearStartValueInclusive(){
      return $this->_clear(1);
    }
    
    /**
     * Get <start_value_inclusive> value
     *
     * @return string
     */
    public function getStartValueInclusive(){
      return $this->_get(1);
    }
    
    /**
     * Set <start_value_inclusive> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ValueRange
     */
    public function setStartValueInclusive( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <start_value_exclusive> has a value
     *
     * @return boolean
     */
    public function hasStartValueExclusive(){
      return $this->_has(2);
    }
    
    /**
     * Clear <start_value_exclusive> value
     *
     * @return \google\bigtable\v1\ValueRange
     */
    public function clearStartValueExclusive(){
      return $this->_clear(2);
    }
    
    /**
     * Get <start_value_exclusive> value
     *
     * @return string
     */
    public function getStartValueExclusive(){
      return $this->_get(2);
    }
    
    /**
     * Set <start_value_exclusive> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ValueRange
     */
    public function setStartValueExclusive( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <end_value_inclusive> has a value
     *
     * @return boolean
     */
    public function hasEndValueInclusive(){
      return $this->_has(3);
    }
    
    /**
     * Clear <end_value_inclusive> value
     *
     * @return \google\bigtable\v1\ValueRange
     */
    public function clearEndValueInclusive(){
      return $this->_clear(3);
    }
    
    /**
     * Get <end_value_inclusive> value
     *
     * @return string
     */
    public function getEndValueInclusive(){
      return $this->_get(3);
    }
    
    /**
     * Set <end_value_inclusive> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ValueRange
     */
    public function setEndValueInclusive( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <end_value_exclusive> has a value
     *
     * @return boolean
     */
    public function hasEndValueExclusive(){
      return $this->_has(4);
    }
    
    /**
     * Clear <end_value_exclusive> value
     *
     * @return \google\bigtable\v1\ValueRange
     */
    public function clearEndValueExclusive(){
      return $this->_clear(4);
    }
    
    /**
     * Get <end_value_exclusive> value
     *
     * @return string
     */
    public function getEndValueExclusive(){
      return $this->_get(4);
    }
    
    /**
     * Set <end_value_exclusive> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ValueRange
     */
    public function setEndValueExclusive( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\bigtable\v1\RowFilter {

  class Chain extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\v1\RowFilter[]  */
    public $filters = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.RowFilter.Chain');

      // REPEATED MESSAGE filters = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "filters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\RowFilter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <filters> has a value
     *
     * @return boolean
     */
    public function hasFilters(){
      return $this->_has(1);
    }
    
    /**
     * Clear <filters> value
     *
     * @return \google\bigtable\v1\RowFilter\Chain
     */
    public function clearFilters(){
      return $this->_clear(1);
    }
    
    /**
     * Get <filters> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\RowFilter
     */
    public function getFilters($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <filters> value
     *
     * @param \google\bigtable\v1\RowFilter $value
     * @return \google\bigtable\v1\RowFilter\Chain
     */
    public function setFilters(\google\bigtable\v1\RowFilter $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <filters>
     *
     * @return \google\bigtable\v1\RowFilter[]
     */
    public function getFiltersList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <filters>
     *
     * @param \google\bigtable\v1\RowFilter $value
     * @return \google\bigtable\v1\RowFilter\Chain
     */
    public function addFilters(\google\bigtable\v1\RowFilter $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\bigtable\v1\RowFilter {

  class Interleave extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\v1\RowFilter[]  */
    public $filters = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.RowFilter.Interleave');

      // REPEATED MESSAGE filters = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "filters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\RowFilter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <filters> has a value
     *
     * @return boolean
     */
    public function hasFilters(){
      return $this->_has(1);
    }
    
    /**
     * Clear <filters> value
     *
     * @return \google\bigtable\v1\RowFilter\Interleave
     */
    public function clearFilters(){
      return $this->_clear(1);
    }
    
    /**
     * Get <filters> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\RowFilter
     */
    public function getFilters($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <filters> value
     *
     * @param \google\bigtable\v1\RowFilter $value
     * @return \google\bigtable\v1\RowFilter\Interleave
     */
    public function setFilters(\google\bigtable\v1\RowFilter $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <filters>
     *
     * @return \google\bigtable\v1\RowFilter[]
     */
    public function getFiltersList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <filters>
     *
     * @param \google\bigtable\v1\RowFilter $value
     * @return \google\bigtable\v1\RowFilter\Interleave
     */
    public function addFilters(\google\bigtable\v1\RowFilter $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\bigtable\v1\RowFilter {

  class Condition extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\v1\RowFilter */
    public $predicate_filter = null;
    
    /**  @var \google\bigtable\v1\RowFilter */
    public $true_filter = null;
    
    /**  @var \google\bigtable\v1\RowFilter */
    public $false_filter = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.RowFilter.Condition');

      // OPTIONAL MESSAGE predicate_filter = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "predicate_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowFilter';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE true_filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "true_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowFilter';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE false_filter = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "false_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowFilter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <predicate_filter> has a value
     *
     * @return boolean
     */
    public function hasPredicateFilter(){
      return $this->_has(1);
    }
    
    /**
     * Clear <predicate_filter> value
     *
     * @return \google\bigtable\v1\RowFilter\Condition
     */
    public function clearPredicateFilter(){
      return $this->_clear(1);
    }
    
    /**
     * Get <predicate_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function getPredicateFilter(){
      return $this->_get(1);
    }
    
    /**
     * Set <predicate_filter> value
     *
     * @param \google\bigtable\v1\RowFilter $value
     * @return \google\bigtable\v1\RowFilter\Condition
     */
    public function setPredicateFilter(\google\bigtable\v1\RowFilter $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <true_filter> has a value
     *
     * @return boolean
     */
    public function hasTrueFilter(){
      return $this->_has(2);
    }
    
    /**
     * Clear <true_filter> value
     *
     * @return \google\bigtable\v1\RowFilter\Condition
     */
    public function clearTrueFilter(){
      return $this->_clear(2);
    }
    
    /**
     * Get <true_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function getTrueFilter(){
      return $this->_get(2);
    }
    
    /**
     * Set <true_filter> value
     *
     * @param \google\bigtable\v1\RowFilter $value
     * @return \google\bigtable\v1\RowFilter\Condition
     */
    public function setTrueFilter(\google\bigtable\v1\RowFilter $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <false_filter> has a value
     *
     * @return boolean
     */
    public function hasFalseFilter(){
      return $this->_has(3);
    }
    
    /**
     * Clear <false_filter> value
     *
     * @return \google\bigtable\v1\RowFilter\Condition
     */
    public function clearFalseFilter(){
      return $this->_clear(3);
    }
    
    /**
     * Get <false_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function getFalseFilter(){
      return $this->_get(3);
    }
    
    /**
     * Set <false_filter> value
     *
     * @param \google\bigtable\v1\RowFilter $value
     * @return \google\bigtable\v1\RowFilter\Condition
     */
    public function setFalseFilter(\google\bigtable\v1\RowFilter $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class RowFilter extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\v1\RowFilter\Chain */
    public $chain = null;
    
    /**  @var \google\bigtable\v1\RowFilter\Interleave */
    public $interleave = null;
    
    /**  @var \google\bigtable\v1\RowFilter\Condition */
    public $condition = null;
    
    /**  @var boolean */
    public $sink = null;
    
    /**  @var boolean */
    public $pass_all_filter = null;
    
    /**  @var boolean */
    public $block_all_filter = null;
    
    /**  @var string */
    public $row_key_regex_filter = null;
    
    /**  @var float */
    public $row_sample_filter = null;
    
    /**  @var string */
    public $family_name_regex_filter = null;
    
    /**  @var string */
    public $column_qualifier_regex_filter = null;
    
    /**  @var \google\bigtable\v1\ColumnRange */
    public $column_range_filter = null;
    
    /**  @var \google\bigtable\v1\TimestampRange */
    public $timestamp_range_filter = null;
    
    /**  @var string */
    public $value_regex_filter = null;
    
    /**  @var \google\bigtable\v1\ValueRange */
    public $value_range_filter = null;
    
    /**  @var int */
    public $cells_per_row_offset_filter = null;
    
    /**  @var int */
    public $cells_per_row_limit_filter = null;
    
    /**  @var int */
    public $cells_per_column_limit_filter = null;
    
    /**  @var boolean */
    public $strip_value_transformer = null;
    
    /**  @var string */
    public $apply_label_transformer = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.RowFilter');

      // OPTIONAL MESSAGE chain = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "chain";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowFilter\Chain';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE interleave = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "interleave";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowFilter\Interleave';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "condition";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowFilter\Condition';
      $descriptor->addField($f);

      // OPTIONAL BOOL sink = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "sink";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL pass_all_filter = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "pass_all_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL block_all_filter = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "block_all_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES row_key_regex_filter = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "row_key_regex_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE row_sample_filter = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "row_sample_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING family_name_regex_filter = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "family_name_regex_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES column_qualifier_regex_filter = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "column_qualifier_regex_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE column_range_filter = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "column_range_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\ColumnRange';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timestamp_range_filter = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "timestamp_range_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\TimestampRange';
      $descriptor->addField($f);

      // OPTIONAL BYTES value_regex_filter = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "value_regex_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_range_filter = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "value_range_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\ValueRange';
      $descriptor->addField($f);

      // OPTIONAL INT32 cells_per_row_offset_filter = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "cells_per_row_offset_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 cells_per_row_limit_filter = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "cells_per_row_limit_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 cells_per_column_limit_filter = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "cells_per_column_limit_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL strip_value_transformer = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "strip_value_transformer";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING apply_label_transformer = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "apply_label_transformer";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <chain> has a value
     *
     * @return boolean
     */
    public function hasChain(){
      return $this->_has(1);
    }
    
    /**
     * Clear <chain> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearChain(){
      return $this->_clear(1);
    }
    
    /**
     * Get <chain> value
     *
     * @return \google\bigtable\v1\RowFilter\Chain
     */
    public function getChain(){
      return $this->_get(1);
    }
    
    /**
     * Set <chain> value
     *
     * @param \google\bigtable\v1\RowFilter\Chain $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setChain(\google\bigtable\v1\RowFilter\Chain $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <interleave> has a value
     *
     * @return boolean
     */
    public function hasInterleave(){
      return $this->_has(2);
    }
    
    /**
     * Clear <interleave> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearInterleave(){
      return $this->_clear(2);
    }
    
    /**
     * Get <interleave> value
     *
     * @return \google\bigtable\v1\RowFilter\Interleave
     */
    public function getInterleave(){
      return $this->_get(2);
    }
    
    /**
     * Set <interleave> value
     *
     * @param \google\bigtable\v1\RowFilter\Interleave $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setInterleave(\google\bigtable\v1\RowFilter\Interleave $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <condition> has a value
     *
     * @return boolean
     */
    public function hasCondition(){
      return $this->_has(3);
    }
    
    /**
     * Clear <condition> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearCondition(){
      return $this->_clear(3);
    }
    
    /**
     * Get <condition> value
     *
     * @return \google\bigtable\v1\RowFilter\Condition
     */
    public function getCondition(){
      return $this->_get(3);
    }
    
    /**
     * Set <condition> value
     *
     * @param \google\bigtable\v1\RowFilter\Condition $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setCondition(\google\bigtable\v1\RowFilter\Condition $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sink> has a value
     *
     * @return boolean
     */
    public function hasSink(){
      return $this->_has(16);
    }
    
    /**
     * Clear <sink> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearSink(){
      return $this->_clear(16);
    }
    
    /**
     * Get <sink> value
     *
     * @return boolean
     */
    public function getSink(){
      return $this->_get(16);
    }
    
    /**
     * Set <sink> value
     *
     * @param boolean $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setSink( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <pass_all_filter> has a value
     *
     * @return boolean
     */
    public function hasPassAllFilter(){
      return $this->_has(17);
    }
    
    /**
     * Clear <pass_all_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearPassAllFilter(){
      return $this->_clear(17);
    }
    
    /**
     * Get <pass_all_filter> value
     *
     * @return boolean
     */
    public function getPassAllFilter(){
      return $this->_get(17);
    }
    
    /**
     * Set <pass_all_filter> value
     *
     * @param boolean $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setPassAllFilter( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <block_all_filter> has a value
     *
     * @return boolean
     */
    public function hasBlockAllFilter(){
      return $this->_has(18);
    }
    
    /**
     * Clear <block_all_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearBlockAllFilter(){
      return $this->_clear(18);
    }
    
    /**
     * Get <block_all_filter> value
     *
     * @return boolean
     */
    public function getBlockAllFilter(){
      return $this->_get(18);
    }
    
    /**
     * Set <block_all_filter> value
     *
     * @param boolean $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setBlockAllFilter( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <row_key_regex_filter> has a value
     *
     * @return boolean
     */
    public function hasRowKeyRegexFilter(){
      return $this->_has(4);
    }
    
    /**
     * Clear <row_key_regex_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearRowKeyRegexFilter(){
      return $this->_clear(4);
    }
    
    /**
     * Get <row_key_regex_filter> value
     *
     * @return string
     */
    public function getRowKeyRegexFilter(){
      return $this->_get(4);
    }
    
    /**
     * Set <row_key_regex_filter> value
     *
     * @param string $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setRowKeyRegexFilter( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <row_sample_filter> has a value
     *
     * @return boolean
     */
    public function hasRowSampleFilter(){
      return $this->_has(14);
    }
    
    /**
     * Clear <row_sample_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearRowSampleFilter(){
      return $this->_clear(14);
    }
    
    /**
     * Get <row_sample_filter> value
     *
     * @return float
     */
    public function getRowSampleFilter(){
      return $this->_get(14);
    }
    
    /**
     * Set <row_sample_filter> value
     *
     * @param float $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setRowSampleFilter( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <family_name_regex_filter> has a value
     *
     * @return boolean
     */
    public function hasFamilyNameRegexFilter(){
      return $this->_has(5);
    }
    
    /**
     * Clear <family_name_regex_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearFamilyNameRegexFilter(){
      return $this->_clear(5);
    }
    
    /**
     * Get <family_name_regex_filter> value
     *
     * @return string
     */
    public function getFamilyNameRegexFilter(){
      return $this->_get(5);
    }
    
    /**
     * Set <family_name_regex_filter> value
     *
     * @param string $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setFamilyNameRegexFilter( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <column_qualifier_regex_filter> has a value
     *
     * @return boolean
     */
    public function hasColumnQualifierRegexFilter(){
      return $this->_has(6);
    }
    
    /**
     * Clear <column_qualifier_regex_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearColumnQualifierRegexFilter(){
      return $this->_clear(6);
    }
    
    /**
     * Get <column_qualifier_regex_filter> value
     *
     * @return string
     */
    public function getColumnQualifierRegexFilter(){
      return $this->_get(6);
    }
    
    /**
     * Set <column_qualifier_regex_filter> value
     *
     * @param string $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setColumnQualifierRegexFilter( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <column_range_filter> has a value
     *
     * @return boolean
     */
    public function hasColumnRangeFilter(){
      return $this->_has(7);
    }
    
    /**
     * Clear <column_range_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearColumnRangeFilter(){
      return $this->_clear(7);
    }
    
    /**
     * Get <column_range_filter> value
     *
     * @return \google\bigtable\v1\ColumnRange
     */
    public function getColumnRangeFilter(){
      return $this->_get(7);
    }
    
    /**
     * Set <column_range_filter> value
     *
     * @param \google\bigtable\v1\ColumnRange $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setColumnRangeFilter(\google\bigtable\v1\ColumnRange $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <timestamp_range_filter> has a value
     *
     * @return boolean
     */
    public function hasTimestampRangeFilter(){
      return $this->_has(8);
    }
    
    /**
     * Clear <timestamp_range_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearTimestampRangeFilter(){
      return $this->_clear(8);
    }
    
    /**
     * Get <timestamp_range_filter> value
     *
     * @return \google\bigtable\v1\TimestampRange
     */
    public function getTimestampRangeFilter(){
      return $this->_get(8);
    }
    
    /**
     * Set <timestamp_range_filter> value
     *
     * @param \google\bigtable\v1\TimestampRange $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setTimestampRangeFilter(\google\bigtable\v1\TimestampRange $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <value_regex_filter> has a value
     *
     * @return boolean
     */
    public function hasValueRegexFilter(){
      return $this->_has(9);
    }
    
    /**
     * Clear <value_regex_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearValueRegexFilter(){
      return $this->_clear(9);
    }
    
    /**
     * Get <value_regex_filter> value
     *
     * @return string
     */
    public function getValueRegexFilter(){
      return $this->_get(9);
    }
    
    /**
     * Set <value_regex_filter> value
     *
     * @param string $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setValueRegexFilter( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <value_range_filter> has a value
     *
     * @return boolean
     */
    public function hasValueRangeFilter(){
      return $this->_has(15);
    }
    
    /**
     * Clear <value_range_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearValueRangeFilter(){
      return $this->_clear(15);
    }
    
    /**
     * Get <value_range_filter> value
     *
     * @return \google\bigtable\v1\ValueRange
     */
    public function getValueRangeFilter(){
      return $this->_get(15);
    }
    
    /**
     * Set <value_range_filter> value
     *
     * @param \google\bigtable\v1\ValueRange $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setValueRangeFilter(\google\bigtable\v1\ValueRange $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <cells_per_row_offset_filter> has a value
     *
     * @return boolean
     */
    public function hasCellsPerRowOffsetFilter(){
      return $this->_has(10);
    }
    
    /**
     * Clear <cells_per_row_offset_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearCellsPerRowOffsetFilter(){
      return $this->_clear(10);
    }
    
    /**
     * Get <cells_per_row_offset_filter> value
     *
     * @return int
     */
    public function getCellsPerRowOffsetFilter(){
      return $this->_get(10);
    }
    
    /**
     * Set <cells_per_row_offset_filter> value
     *
     * @param int $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setCellsPerRowOffsetFilter( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <cells_per_row_limit_filter> has a value
     *
     * @return boolean
     */
    public function hasCellsPerRowLimitFilter(){
      return $this->_has(11);
    }
    
    /**
     * Clear <cells_per_row_limit_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearCellsPerRowLimitFilter(){
      return $this->_clear(11);
    }
    
    /**
     * Get <cells_per_row_limit_filter> value
     *
     * @return int
     */
    public function getCellsPerRowLimitFilter(){
      return $this->_get(11);
    }
    
    /**
     * Set <cells_per_row_limit_filter> value
     *
     * @param int $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setCellsPerRowLimitFilter( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <cells_per_column_limit_filter> has a value
     *
     * @return boolean
     */
    public function hasCellsPerColumnLimitFilter(){
      return $this->_has(12);
    }
    
    /**
     * Clear <cells_per_column_limit_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearCellsPerColumnLimitFilter(){
      return $this->_clear(12);
    }
    
    /**
     * Get <cells_per_column_limit_filter> value
     *
     * @return int
     */
    public function getCellsPerColumnLimitFilter(){
      return $this->_get(12);
    }
    
    /**
     * Set <cells_per_column_limit_filter> value
     *
     * @param int $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setCellsPerColumnLimitFilter( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <strip_value_transformer> has a value
     *
     * @return boolean
     */
    public function hasStripValueTransformer(){
      return $this->_has(13);
    }
    
    /**
     * Clear <strip_value_transformer> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearStripValueTransformer(){
      return $this->_clear(13);
    }
    
    /**
     * Get <strip_value_transformer> value
     *
     * @return boolean
     */
    public function getStripValueTransformer(){
      return $this->_get(13);
    }
    
    /**
     * Set <strip_value_transformer> value
     *
     * @param boolean $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setStripValueTransformer( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <apply_label_transformer> has a value
     *
     * @return boolean
     */
    public function hasApplyLabelTransformer(){
      return $this->_has(19);
    }
    
    /**
     * Clear <apply_label_transformer> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function clearApplyLabelTransformer(){
      return $this->_clear(19);
    }
    
    /**
     * Get <apply_label_transformer> value
     *
     * @return string
     */
    public function getApplyLabelTransformer(){
      return $this->_get(19);
    }
    
    /**
     * Set <apply_label_transformer> value
     *
     * @param string $value
     * @return \google\bigtable\v1\RowFilter
     */
    public function setApplyLabelTransformer( $value){
      return $this->_set(19, $value);
    }
  }
}

namespace google\bigtable\v1\Mutation {

  class SetCell extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $family_name = null;
    
    /**  @var string */
    public $column_qualifier = null;
    
    /**  @var int */
    public $timestamp_micros = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.Mutation.SetCell');

      // OPTIONAL STRING family_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "family_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES column_qualifier = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "column_qualifier";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 timestamp_micros = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "timestamp_micros";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <family_name> has a value
     *
     * @return boolean
     */
    public function hasFamilyName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <family_name> value
     *
     * @return \google\bigtable\v1\Mutation\SetCell
     */
    public function clearFamilyName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <family_name> value
     *
     * @return string
     */
    public function getFamilyName(){
      return $this->_get(1);
    }
    
    /**
     * Set <family_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Mutation\SetCell
     */
    public function setFamilyName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <column_qualifier> has a value
     *
     * @return boolean
     */
    public function hasColumnQualifier(){
      return $this->_has(2);
    }
    
    /**
     * Clear <column_qualifier> value
     *
     * @return \google\bigtable\v1\Mutation\SetCell
     */
    public function clearColumnQualifier(){
      return $this->_clear(2);
    }
    
    /**
     * Get <column_qualifier> value
     *
     * @return string
     */
    public function getColumnQualifier(){
      return $this->_get(2);
    }
    
    /**
     * Set <column_qualifier> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Mutation\SetCell
     */
    public function setColumnQualifier( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <timestamp_micros> has a value
     *
     * @return boolean
     */
    public function hasTimestampMicros(){
      return $this->_has(3);
    }
    
    /**
     * Clear <timestamp_micros> value
     *
     * @return \google\bigtable\v1\Mutation\SetCell
     */
    public function clearTimestampMicros(){
      return $this->_clear(3);
    }
    
    /**
     * Get <timestamp_micros> value
     *
     * @return int
     */
    public function getTimestampMicros(){
      return $this->_get(3);
    }
    
    /**
     * Set <timestamp_micros> value
     *
     * @param int $value
     * @return \google\bigtable\v1\Mutation\SetCell
     */
    public function setTimestampMicros( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(4);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\bigtable\v1\Mutation\SetCell
     */
    public function clearValue(){
      return $this->_clear(4);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(4);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Mutation\SetCell
     */
    public function setValue( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\bigtable\v1\Mutation {

  class DeleteFromColumn extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $family_name = null;
    
    /**  @var string */
    public $column_qualifier = null;
    
    /**  @var \google\bigtable\v1\TimestampRange */
    public $time_range = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.Mutation.DeleteFromColumn');

      // OPTIONAL STRING family_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "family_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES column_qualifier = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "column_qualifier";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE time_range = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "time_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\TimestampRange';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <family_name> has a value
     *
     * @return boolean
     */
    public function hasFamilyName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <family_name> value
     *
     * @return \google\bigtable\v1\Mutation\DeleteFromColumn
     */
    public function clearFamilyName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <family_name> value
     *
     * @return string
     */
    public function getFamilyName(){
      return $this->_get(1);
    }
    
    /**
     * Set <family_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Mutation\DeleteFromColumn
     */
    public function setFamilyName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <column_qualifier> has a value
     *
     * @return boolean
     */
    public function hasColumnQualifier(){
      return $this->_has(2);
    }
    
    /**
     * Clear <column_qualifier> value
     *
     * @return \google\bigtable\v1\Mutation\DeleteFromColumn
     */
    public function clearColumnQualifier(){
      return $this->_clear(2);
    }
    
    /**
     * Get <column_qualifier> value
     *
     * @return string
     */
    public function getColumnQualifier(){
      return $this->_get(2);
    }
    
    /**
     * Set <column_qualifier> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Mutation\DeleteFromColumn
     */
    public function setColumnQualifier( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <time_range> has a value
     *
     * @return boolean
     */
    public function hasTimeRange(){
      return $this->_has(3);
    }
    
    /**
     * Clear <time_range> value
     *
     * @return \google\bigtable\v1\Mutation\DeleteFromColumn
     */
    public function clearTimeRange(){
      return $this->_clear(3);
    }
    
    /**
     * Get <time_range> value
     *
     * @return \google\bigtable\v1\TimestampRange
     */
    public function getTimeRange(){
      return $this->_get(3);
    }
    
    /**
     * Set <time_range> value
     *
     * @param \google\bigtable\v1\TimestampRange $value
     * @return \google\bigtable\v1\Mutation\DeleteFromColumn
     */
    public function setTimeRange(\google\bigtable\v1\TimestampRange $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\v1\Mutation {

  class DeleteFromFamily extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $family_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.Mutation.DeleteFromFamily');

      // OPTIONAL STRING family_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "family_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <family_name> has a value
     *
     * @return boolean
     */
    public function hasFamilyName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <family_name> value
     *
     * @return \google\bigtable\v1\Mutation\DeleteFromFamily
     */
    public function clearFamilyName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <family_name> value
     *
     * @return string
     */
    public function getFamilyName(){
      return $this->_get(1);
    }
    
    /**
     * Set <family_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\Mutation\DeleteFromFamily
     */
    public function setFamilyName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\v1\Mutation {

  class DeleteFromRow extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.Mutation.DeleteFromRow');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\bigtable\v1 {

  class Mutation extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\v1\Mutation\SetCell */
    public $set_cell = null;
    
    /**  @var \google\bigtable\v1\Mutation\DeleteFromColumn */
    public $delete_from_column = null;
    
    /**  @var \google\bigtable\v1\Mutation\DeleteFromFamily */
    public $delete_from_family = null;
    
    /**  @var \google\bigtable\v1\Mutation\DeleteFromRow */
    public $delete_from_row = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.Mutation');

      // OPTIONAL MESSAGE set_cell = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "set_cell";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\Mutation\SetCell';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_from_column = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "delete_from_column";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\Mutation\DeleteFromColumn';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_from_family = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "delete_from_family";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\Mutation\DeleteFromFamily';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_from_row = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "delete_from_row";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\Mutation\DeleteFromRow';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <set_cell> has a value
     *
     * @return boolean
     */
    public function hasSetCell(){
      return $this->_has(1);
    }
    
    /**
     * Clear <set_cell> value
     *
     * @return \google\bigtable\v1\Mutation
     */
    public function clearSetCell(){
      return $this->_clear(1);
    }
    
    /**
     * Get <set_cell> value
     *
     * @return \google\bigtable\v1\Mutation\SetCell
     */
    public function getSetCell(){
      return $this->_get(1);
    }
    
    /**
     * Set <set_cell> value
     *
     * @param \google\bigtable\v1\Mutation\SetCell $value
     * @return \google\bigtable\v1\Mutation
     */
    public function setSetCell(\google\bigtable\v1\Mutation\SetCell $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <delete_from_column> has a value
     *
     * @return boolean
     */
    public function hasDeleteFromColumn(){
      return $this->_has(2);
    }
    
    /**
     * Clear <delete_from_column> value
     *
     * @return \google\bigtable\v1\Mutation
     */
    public function clearDeleteFromColumn(){
      return $this->_clear(2);
    }
    
    /**
     * Get <delete_from_column> value
     *
     * @return \google\bigtable\v1\Mutation\DeleteFromColumn
     */
    public function getDeleteFromColumn(){
      return $this->_get(2);
    }
    
    /**
     * Set <delete_from_column> value
     *
     * @param \google\bigtable\v1\Mutation\DeleteFromColumn $value
     * @return \google\bigtable\v1\Mutation
     */
    public function setDeleteFromColumn(\google\bigtable\v1\Mutation\DeleteFromColumn $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <delete_from_family> has a value
     *
     * @return boolean
     */
    public function hasDeleteFromFamily(){
      return $this->_has(3);
    }
    
    /**
     * Clear <delete_from_family> value
     *
     * @return \google\bigtable\v1\Mutation
     */
    public function clearDeleteFromFamily(){
      return $this->_clear(3);
    }
    
    /**
     * Get <delete_from_family> value
     *
     * @return \google\bigtable\v1\Mutation\DeleteFromFamily
     */
    public function getDeleteFromFamily(){
      return $this->_get(3);
    }
    
    /**
     * Set <delete_from_family> value
     *
     * @param \google\bigtable\v1\Mutation\DeleteFromFamily $value
     * @return \google\bigtable\v1\Mutation
     */
    public function setDeleteFromFamily(\google\bigtable\v1\Mutation\DeleteFromFamily $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <delete_from_row> has a value
     *
     * @return boolean
     */
    public function hasDeleteFromRow(){
      return $this->_has(4);
    }
    
    /**
     * Clear <delete_from_row> value
     *
     * @return \google\bigtable\v1\Mutation
     */
    public function clearDeleteFromRow(){
      return $this->_clear(4);
    }
    
    /**
     * Get <delete_from_row> value
     *
     * @return \google\bigtable\v1\Mutation\DeleteFromRow
     */
    public function getDeleteFromRow(){
      return $this->_get(4);
    }
    
    /**
     * Set <delete_from_row> value
     *
     * @param \google\bigtable\v1\Mutation\DeleteFromRow $value
     * @return \google\bigtable\v1\Mutation
     */
    public function setDeleteFromRow(\google\bigtable\v1\Mutation\DeleteFromRow $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class ReadModifyWriteRule extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $family_name = null;
    
    /**  @var string */
    public $column_qualifier = null;
    
    /**  @var string */
    public $append_value = null;
    
    /**  @var int */
    public $increment_amount = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.ReadModifyWriteRule');

      // OPTIONAL STRING family_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "family_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES column_qualifier = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "column_qualifier";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES append_value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "append_value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 increment_amount = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "increment_amount";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <family_name> has a value
     *
     * @return boolean
     */
    public function hasFamilyName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <family_name> value
     *
     * @return \google\bigtable\v1\ReadModifyWriteRule
     */
    public function clearFamilyName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <family_name> value
     *
     * @return string
     */
    public function getFamilyName(){
      return $this->_get(1);
    }
    
    /**
     * Set <family_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ReadModifyWriteRule
     */
    public function setFamilyName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <column_qualifier> has a value
     *
     * @return boolean
     */
    public function hasColumnQualifier(){
      return $this->_has(2);
    }
    
    /**
     * Clear <column_qualifier> value
     *
     * @return \google\bigtable\v1\ReadModifyWriteRule
     */
    public function clearColumnQualifier(){
      return $this->_clear(2);
    }
    
    /**
     * Get <column_qualifier> value
     *
     * @return string
     */
    public function getColumnQualifier(){
      return $this->_get(2);
    }
    
    /**
     * Set <column_qualifier> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ReadModifyWriteRule
     */
    public function setColumnQualifier( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <append_value> has a value
     *
     * @return boolean
     */
    public function hasAppendValue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <append_value> value
     *
     * @return \google\bigtable\v1\ReadModifyWriteRule
     */
    public function clearAppendValue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <append_value> value
     *
     * @return string
     */
    public function getAppendValue(){
      return $this->_get(3);
    }
    
    /**
     * Set <append_value> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ReadModifyWriteRule
     */
    public function setAppendValue( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <increment_amount> has a value
     *
     * @return boolean
     */
    public function hasIncrementAmount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <increment_amount> value
     *
     * @return \google\bigtable\v1\ReadModifyWriteRule
     */
    public function clearIncrementAmount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <increment_amount> value
     *
     * @return int
     */
    public function getIncrementAmount(){
      return $this->_get(4);
    }
    
    /**
     * Set <increment_amount> value
     *
     * @param int $value
     * @return \google\bigtable\v1\ReadModifyWriteRule
     */
    public function setIncrementAmount( $value){
      return $this->_set(4, $value);
    }
  }
}

