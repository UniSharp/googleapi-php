<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/devtools/sourcerepo/v1/sourcerepo.proto
//   Date: 2017-06-13 04:25:25

namespace google\devtools\sourcerepo\v1 {

  class Repo extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $size = null;
    
    /**  @var string */
    public $url = null;
    
    /**  @var \google\devtools\sourcerepo\v1\MirrorConfig */
    public $mirror_config = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.sourcerepo.v1.Repo');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING url = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE mirror_config = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mirror_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\sourcerepo\v1\MirrorConfig';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <size> has a value
     *
     * @return boolean
     */
    public function hasSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <size> value
     *
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function clearSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <size> value
     *
     * @return int
     */
    public function getSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <size> value
     *
     * @param int $value
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function setSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(3);
    }
    
    /**
     * Clear <url> value
     *
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function clearUrl(){
      return $this->_clear(3);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(3);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function setUrl( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mirror_config> has a value
     *
     * @return boolean
     */
    public function hasMirrorConfig(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mirror_config> value
     *
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function clearMirrorConfig(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mirror_config> value
     *
     * @return \google\devtools\sourcerepo\v1\MirrorConfig
     */
    public function getMirrorConfig(){
      return $this->_get(4);
    }
    
    /**
     * Set <mirror_config> value
     *
     * @param \google\devtools\sourcerepo\v1\MirrorConfig $value
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function setMirrorConfig(\google\devtools\sourcerepo\v1\MirrorConfig $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\devtools\sourcerepo\v1 {

  class MirrorConfig extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $url = null;
    
    /**  @var string */
    public $webhook_id = null;
    
    /**  @var string */
    public $deploy_key_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.sourcerepo.v1.MirrorConfig');

      // OPTIONAL STRING url = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING webhook_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "webhook_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING deploy_key_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "deploy_key_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <url> value
     *
     * @return \google\devtools\sourcerepo\v1\MirrorConfig
     */
    public function clearUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\MirrorConfig
     */
    public function setUrl( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <webhook_id> has a value
     *
     * @return boolean
     */
    public function hasWebhookId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <webhook_id> value
     *
     * @return \google\devtools\sourcerepo\v1\MirrorConfig
     */
    public function clearWebhookId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <webhook_id> value
     *
     * @return string
     */
    public function getWebhookId(){
      return $this->_get(2);
    }
    
    /**
     * Set <webhook_id> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\MirrorConfig
     */
    public function setWebhookId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <deploy_key_id> has a value
     *
     * @return boolean
     */
    public function hasDeployKeyId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <deploy_key_id> value
     *
     * @return \google\devtools\sourcerepo\v1\MirrorConfig
     */
    public function clearDeployKeyId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <deploy_key_id> value
     *
     * @return string
     */
    public function getDeployKeyId(){
      return $this->_get(3);
    }
    
    /**
     * Set <deploy_key_id> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\MirrorConfig
     */
    public function setDeployKeyId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\sourcerepo\v1 {

  class GetRepoRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.sourcerepo.v1.GetRepoRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\sourcerepo\v1\GetRepoRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\GetRepoRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\sourcerepo\v1 {

  class ListReposRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.sourcerepo.v1.ListReposRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\sourcerepo\v1\ListReposRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\ListReposRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\devtools\sourcerepo\v1\ListReposRequest
     */
    public function clearPageSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\devtools\sourcerepo\v1\ListReposRequest
     */
    public function setPageSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\devtools\sourcerepo\v1\ListReposRequest
     */
    public function clearPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\ListReposRequest
     */
    public function setPageToken( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\sourcerepo\v1 {

  class ListReposResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\sourcerepo\v1\Repo[]  */
    public $repos = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.sourcerepo.v1.ListReposResponse');

      // REPEATED MESSAGE repos = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "repos";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\sourcerepo\v1\Repo';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <repos> has a value
     *
     * @return boolean
     */
    public function hasRepos(){
      return $this->_has(1);
    }
    
    /**
     * Clear <repos> value
     *
     * @return \google\devtools\sourcerepo\v1\ListReposResponse
     */
    public function clearRepos(){
      return $this->_clear(1);
    }
    
    /**
     * Get <repos> value
     *
     * @param int $idx
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function getRepos($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <repos> value
     *
     * @param \google\devtools\sourcerepo\v1\Repo $value
     * @return \google\devtools\sourcerepo\v1\ListReposResponse
     */
    public function setRepos(\google\devtools\sourcerepo\v1\Repo $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <repos>
     *
     * @return \google\devtools\sourcerepo\v1\Repo[]
     */
    public function getReposList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <repos>
     *
     * @param \google\devtools\sourcerepo\v1\Repo $value
     * @return \google\devtools\sourcerepo\v1\ListReposResponse
     */
    public function addRepos(\google\devtools\sourcerepo\v1\Repo $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\devtools\sourcerepo\v1\ListReposResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\ListReposResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\sourcerepo\v1 {

  class CreateRepoRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var \google\devtools\sourcerepo\v1\Repo */
    public $repo = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.sourcerepo.v1.CreateRepoRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE repo = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "repo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\sourcerepo\v1\Repo';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\devtools\sourcerepo\v1\CreateRepoRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\CreateRepoRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <repo> has a value
     *
     * @return boolean
     */
    public function hasRepo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <repo> value
     *
     * @return \google\devtools\sourcerepo\v1\CreateRepoRequest
     */
    public function clearRepo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <repo> value
     *
     * @return \google\devtools\sourcerepo\v1\Repo
     */
    public function getRepo(){
      return $this->_get(2);
    }
    
    /**
     * Set <repo> value
     *
     * @param \google\devtools\sourcerepo\v1\Repo $value
     * @return \google\devtools\sourcerepo\v1\CreateRepoRequest
     */
    public function setRepo(\google\devtools\sourcerepo\v1\Repo $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\sourcerepo\v1 {

  class DeleteRepoRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.sourcerepo.v1.DeleteRepoRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\sourcerepo\v1\DeleteRepoRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\sourcerepo\v1\DeleteRepoRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\sourcerepo\v1 {

  class SourceRepoClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\devtools\sourcerepo\v1\ListReposRequest $input
     */
    public function ListRepos(\google\devtools\sourcerepo\v1\ListReposRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.sourcerepo.v1.SourceRepo/ListRepos', $argument, '\google\devtools\sourcerepo\v1\ListReposResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\sourcerepo\v1\GetRepoRequest $input
     */
    public function GetRepo(\google\devtools\sourcerepo\v1\GetRepoRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.sourcerepo.v1.SourceRepo/GetRepo', $argument, '\google\devtools\sourcerepo\v1\Repo::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\sourcerepo\v1\CreateRepoRequest $input
     */
    public function CreateRepo(\google\devtools\sourcerepo\v1\CreateRepoRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.sourcerepo.v1.SourceRepo/CreateRepo', $argument, '\google\devtools\sourcerepo\v1\Repo::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\sourcerepo\v1\DeleteRepoRequest $input
     */
    public function DeleteRepo(\google\devtools\sourcerepo\v1\DeleteRepoRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.sourcerepo.v1.SourceRepo/DeleteRepo', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\SetIamPolicyRequest $input
     */
    public function SetIamPolicy(\google\iam\v1\SetIamPolicyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.sourcerepo.v1.SourceRepo/SetIamPolicy', $argument, '\google\iam\v1\Policy::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\GetIamPolicyRequest $input
     */
    public function GetIamPolicy(\google\iam\v1\GetIamPolicyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.sourcerepo.v1.SourceRepo/GetIamPolicy', $argument, '\google\iam\v1\Policy::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\TestIamPermissionsRequest $input
     */
    public function TestIamPermissions(\google\iam\v1\TestIamPermissionsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.sourcerepo.v1.SourceRepo/TestIamPermissions', $argument, '\google\iam\v1\TestIamPermissionsResponse::deserialize', $metadata, $options);
    }
  }
}
