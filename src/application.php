<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/appengine/v1/application.proto
//   Date: 2017-06-13 04:23:17

namespace google\appengine\v1 {

  class Application extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $id = null;
    
    /**  @var \google\appengine\v1\UrlDispatchRule[]  */
    public $dispatch_rules = array();
    
    /**  @var string */
    public $auth_domain = null;
    
    /**  @var string */
    public $location_id = null;
    
    /**  @var string */
    public $code_bucket = null;
    
    /**  @var \google\protobuf\Duration */
    public $default_cookie_expiration = null;
    
    /**  @var string */
    public $default_hostname = null;
    
    /**  @var string */
    public $default_bucket = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.Application');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE dispatch_rules = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "dispatch_rules";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\appengine\v1\UrlDispatchRule';
      $descriptor->addField($f);

      // OPTIONAL STRING auth_domain = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "auth_domain";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING location_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "location_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING code_bucket = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "code_bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE default_cookie_expiration = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "default_cookie_expiration";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Duration';
      $descriptor->addField($f);

      // OPTIONAL STRING default_hostname = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "default_hostname";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING default_bucket = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "default_bucket";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\appengine\v1\Application
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\appengine\v1\Application
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\appengine\v1\Application
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\appengine\v1\Application
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <dispatch_rules> has a value
     *
     * @return boolean
     */
    public function hasDispatchRules(){
      return $this->_has(3);
    }
    
    /**
     * Clear <dispatch_rules> value
     *
     * @return \google\appengine\v1\Application
     */
    public function clearDispatchRules(){
      return $this->_clear(3);
    }
    
    /**
     * Get <dispatch_rules> value
     *
     * @param int $idx
     * @return \google\appengine\v1\UrlDispatchRule
     */
    public function getDispatchRules($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <dispatch_rules> value
     *
     * @param \google\appengine\v1\UrlDispatchRule $value
     * @return \google\appengine\v1\Application
     */
    public function setDispatchRules(\google\appengine\v1\UrlDispatchRule $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <dispatch_rules>
     *
     * @return \google\appengine\v1\UrlDispatchRule[]
     */
    public function getDispatchRulesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <dispatch_rules>
     *
     * @param \google\appengine\v1\UrlDispatchRule $value
     * @return \google\appengine\v1\Application
     */
    public function addDispatchRules(\google\appengine\v1\UrlDispatchRule $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <auth_domain> has a value
     *
     * @return boolean
     */
    public function hasAuthDomain(){
      return $this->_has(6);
    }
    
    /**
     * Clear <auth_domain> value
     *
     * @return \google\appengine\v1\Application
     */
    public function clearAuthDomain(){
      return $this->_clear(6);
    }
    
    /**
     * Get <auth_domain> value
     *
     * @return string
     */
    public function getAuthDomain(){
      return $this->_get(6);
    }
    
    /**
     * Set <auth_domain> value
     *
     * @param string $value
     * @return \google\appengine\v1\Application
     */
    public function setAuthDomain( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <location_id> has a value
     *
     * @return boolean
     */
    public function hasLocationId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <location_id> value
     *
     * @return \google\appengine\v1\Application
     */
    public function clearLocationId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <location_id> value
     *
     * @return string
     */
    public function getLocationId(){
      return $this->_get(7);
    }
    
    /**
     * Set <location_id> value
     *
     * @param string $value
     * @return \google\appengine\v1\Application
     */
    public function setLocationId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <code_bucket> has a value
     *
     * @return boolean
     */
    public function hasCodeBucket(){
      return $this->_has(8);
    }
    
    /**
     * Clear <code_bucket> value
     *
     * @return \google\appengine\v1\Application
     */
    public function clearCodeBucket(){
      return $this->_clear(8);
    }
    
    /**
     * Get <code_bucket> value
     *
     * @return string
     */
    public function getCodeBucket(){
      return $this->_get(8);
    }
    
    /**
     * Set <code_bucket> value
     *
     * @param string $value
     * @return \google\appengine\v1\Application
     */
    public function setCodeBucket( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <default_cookie_expiration> has a value
     *
     * @return boolean
     */
    public function hasDefaultCookieExpiration(){
      return $this->_has(9);
    }
    
    /**
     * Clear <default_cookie_expiration> value
     *
     * @return \google\appengine\v1\Application
     */
    public function clearDefaultCookieExpiration(){
      return $this->_clear(9);
    }
    
    /**
     * Get <default_cookie_expiration> value
     *
     * @return \google\protobuf\Duration
     */
    public function getDefaultCookieExpiration(){
      return $this->_get(9);
    }
    
    /**
     * Set <default_cookie_expiration> value
     *
     * @param \google\protobuf\Duration $value
     * @return \google\appengine\v1\Application
     */
    public function setDefaultCookieExpiration(\google\protobuf\Duration $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <default_hostname> has a value
     *
     * @return boolean
     */
    public function hasDefaultHostname(){
      return $this->_has(11);
    }
    
    /**
     * Clear <default_hostname> value
     *
     * @return \google\appengine\v1\Application
     */
    public function clearDefaultHostname(){
      return $this->_clear(11);
    }
    
    /**
     * Get <default_hostname> value
     *
     * @return string
     */
    public function getDefaultHostname(){
      return $this->_get(11);
    }
    
    /**
     * Set <default_hostname> value
     *
     * @param string $value
     * @return \google\appengine\v1\Application
     */
    public function setDefaultHostname( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <default_bucket> has a value
     *
     * @return boolean
     */
    public function hasDefaultBucket(){
      return $this->_has(12);
    }
    
    /**
     * Clear <default_bucket> value
     *
     * @return \google\appengine\v1\Application
     */
    public function clearDefaultBucket(){
      return $this->_clear(12);
    }
    
    /**
     * Get <default_bucket> value
     *
     * @return string
     */
    public function getDefaultBucket(){
      return $this->_get(12);
    }
    
    /**
     * Set <default_bucket> value
     *
     * @param string $value
     * @return \google\appengine\v1\Application
     */
    public function setDefaultBucket( $value){
      return $this->_set(12, $value);
    }
  }
}

namespace google\appengine\v1 {

  class UrlDispatchRule extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $domain = null;
    
    /**  @var string */
    public $path = null;
    
    /**  @var string */
    public $service = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.UrlDispatchRule');

      // OPTIONAL STRING domain = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "domain";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING path = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING service = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "service";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <domain> has a value
     *
     * @return boolean
     */
    public function hasDomain(){
      return $this->_has(1);
    }
    
    /**
     * Clear <domain> value
     *
     * @return \google\appengine\v1\UrlDispatchRule
     */
    public function clearDomain(){
      return $this->_clear(1);
    }
    
    /**
     * Get <domain> value
     *
     * @return string
     */
    public function getDomain(){
      return $this->_get(1);
    }
    
    /**
     * Set <domain> value
     *
     * @param string $value
     * @return \google\appengine\v1\UrlDispatchRule
     */
    public function setDomain( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(2);
    }
    
    /**
     * Clear <path> value
     *
     * @return \google\appengine\v1\UrlDispatchRule
     */
    public function clearPath(){
      return $this->_clear(2);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(2);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \google\appengine\v1\UrlDispatchRule
     */
    public function setPath( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <service> has a value
     *
     * @return boolean
     */
    public function hasService(){
      return $this->_has(3);
    }
    
    /**
     * Clear <service> value
     *
     * @return \google\appengine\v1\UrlDispatchRule
     */
    public function clearService(){
      return $this->_clear(3);
    }
    
    /**
     * Get <service> value
     *
     * @return string
     */
    public function getService(){
      return $this->_get(3);
    }
    
    /**
     * Set <service> value
     *
     * @param string $value
     * @return \google\appengine\v1\UrlDispatchRule
     */
    public function setService( $value){
      return $this->_set(3, $value);
    }
  }
}

