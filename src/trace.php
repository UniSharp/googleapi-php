<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/tracing/trace.proto
//   Date: 2017-06-13 04:26:45

namespace google\tracing\v1 {

  class TraceId extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $hex_encoded = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.TraceId');

      // OPTIONAL STRING hex_encoded = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "hex_encoded";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <hex_encoded> has a value
     *
     * @return boolean
     */
    public function hasHexEncoded(){
      return $this->_has(1);
    }
    
    /**
     * Clear <hex_encoded> value
     *
     * @return \google\tracing\v1\TraceId
     */
    public function clearHexEncoded(){
      return $this->_clear(1);
    }
    
    /**
     * Get <hex_encoded> value
     *
     * @return string
     */
    public function getHexEncoded(){
      return $this->_get(1);
    }
    
    /**
     * Set <hex_encoded> value
     *
     * @param string $value
     * @return \google\tracing\v1\TraceId
     */
    public function setHexEncoded( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\tracing\v1 {

  class Module extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $module = null;
    
    /**  @var string */
    public $build_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.Module');

      // OPTIONAL STRING module = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "module";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING build_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "build_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <module> has a value
     *
     * @return boolean
     */
    public function hasModule(){
      return $this->_has(1);
    }
    
    /**
     * Clear <module> value
     *
     * @return \google\tracing\v1\Module
     */
    public function clearModule(){
      return $this->_clear(1);
    }
    
    /**
     * Get <module> value
     *
     * @return string
     */
    public function getModule(){
      return $this->_get(1);
    }
    
    /**
     * Set <module> value
     *
     * @param string $value
     * @return \google\tracing\v1\Module
     */
    public function setModule( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <build_id> has a value
     *
     * @return boolean
     */
    public function hasBuildId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <build_id> value
     *
     * @return \google\tracing\v1\Module
     */
    public function clearBuildId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <build_id> value
     *
     * @return string
     */
    public function getBuildId(){
      return $this->_get(2);
    }
    
    /**
     * Set <build_id> value
     *
     * @param string $value
     * @return \google\tracing\v1\Module
     */
    public function setBuildId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\tracing\v1\StackTrace {

  class StackFrame extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $function_name = null;
    
    /**  @var string */
    public $orig_function_name = null;
    
    /**  @var string */
    public $file_name = null;
    
    /**  @var int */
    public $line_number = null;
    
    /**  @var int */
    public $column_number = null;
    
    /**  @var \google\tracing\v1\Module */
    public $load_module = null;
    
    /**  @var string */
    public $source_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.StackTrace.StackFrame');

      // OPTIONAL STRING function_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "function_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING orig_function_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "orig_function_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING file_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "file_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 line_number = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "line_number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 column_number = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "column_number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE load_module = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "load_module";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\Module';
      $descriptor->addField($f);

      // OPTIONAL STRING source_version = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "source_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <function_name> has a value
     *
     * @return boolean
     */
    public function hasFunctionName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <function_name> value
     *
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function clearFunctionName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <function_name> value
     *
     * @return string
     */
    public function getFunctionName(){
      return $this->_get(1);
    }
    
    /**
     * Set <function_name> value
     *
     * @param string $value
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function setFunctionName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <orig_function_name> has a value
     *
     * @return boolean
     */
    public function hasOrigFunctionName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <orig_function_name> value
     *
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function clearOrigFunctionName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <orig_function_name> value
     *
     * @return string
     */
    public function getOrigFunctionName(){
      return $this->_get(2);
    }
    
    /**
     * Set <orig_function_name> value
     *
     * @param string $value
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function setOrigFunctionName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <file_name> has a value
     *
     * @return boolean
     */
    public function hasFileName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <file_name> value
     *
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function clearFileName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <file_name> value
     *
     * @return string
     */
    public function getFileName(){
      return $this->_get(3);
    }
    
    /**
     * Set <file_name> value
     *
     * @param string $value
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function setFileName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <line_number> has a value
     *
     * @return boolean
     */
    public function hasLineNumber(){
      return $this->_has(4);
    }
    
    /**
     * Clear <line_number> value
     *
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function clearLineNumber(){
      return $this->_clear(4);
    }
    
    /**
     * Get <line_number> value
     *
     * @return int
     */
    public function getLineNumber(){
      return $this->_get(4);
    }
    
    /**
     * Set <line_number> value
     *
     * @param int $value
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function setLineNumber( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <column_number> has a value
     *
     * @return boolean
     */
    public function hasColumnNumber(){
      return $this->_has(5);
    }
    
    /**
     * Clear <column_number> value
     *
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function clearColumnNumber(){
      return $this->_clear(5);
    }
    
    /**
     * Get <column_number> value
     *
     * @return int
     */
    public function getColumnNumber(){
      return $this->_get(5);
    }
    
    /**
     * Set <column_number> value
     *
     * @param int $value
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function setColumnNumber( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <load_module> has a value
     *
     * @return boolean
     */
    public function hasLoadModule(){
      return $this->_has(6);
    }
    
    /**
     * Clear <load_module> value
     *
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function clearLoadModule(){
      return $this->_clear(6);
    }
    
    /**
     * Get <load_module> value
     *
     * @return \google\tracing\v1\Module
     */
    public function getLoadModule(){
      return $this->_get(6);
    }
    
    /**
     * Set <load_module> value
     *
     * @param \google\tracing\v1\Module $value
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function setLoadModule(\google\tracing\v1\Module $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <source_version> has a value
     *
     * @return boolean
     */
    public function hasSourceVersion(){
      return $this->_has(7);
    }
    
    /**
     * Clear <source_version> value
     *
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function clearSourceVersion(){
      return $this->_clear(7);
    }
    
    /**
     * Get <source_version> value
     *
     * @return string
     */
    public function getSourceVersion(){
      return $this->_get(7);
    }
    
    /**
     * Set <source_version> value
     *
     * @param string $value
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function setSourceVersion( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\tracing\v1 {

  class StackTrace extends \DrSlump\Protobuf\Message {

    /**  @var \google\tracing\v1\StackTrace\StackFrame[]  */
    public $stack_frame = array();
    
    /**  @var int */
    public $stack_trace_hash_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.StackTrace');

      // REPEATED MESSAGE stack_frame = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "stack_frame";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\tracing\v1\StackTrace\StackFrame';
      $descriptor->addField($f);

      // OPTIONAL UINT64 stack_trace_hash_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "stack_trace_hash_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <stack_frame> has a value
     *
     * @return boolean
     */
    public function hasStackFrame(){
      return $this->_has(1);
    }
    
    /**
     * Clear <stack_frame> value
     *
     * @return \google\tracing\v1\StackTrace
     */
    public function clearStackFrame(){
      return $this->_clear(1);
    }
    
    /**
     * Get <stack_frame> value
     *
     * @param int $idx
     * @return \google\tracing\v1\StackTrace\StackFrame
     */
    public function getStackFrame($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <stack_frame> value
     *
     * @param \google\tracing\v1\StackTrace\StackFrame $value
     * @return \google\tracing\v1\StackTrace
     */
    public function setStackFrame(\google\tracing\v1\StackTrace\StackFrame $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <stack_frame>
     *
     * @return \google\tracing\v1\StackTrace\StackFrame[]
     */
    public function getStackFrameList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <stack_frame>
     *
     * @param \google\tracing\v1\StackTrace\StackFrame $value
     * @return \google\tracing\v1\StackTrace
     */
    public function addStackFrame(\google\tracing\v1\StackTrace\StackFrame $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <stack_trace_hash_id> has a value
     *
     * @return boolean
     */
    public function hasStackTraceHashId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <stack_trace_hash_id> value
     *
     * @return \google\tracing\v1\StackTrace
     */
    public function clearStackTraceHashId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <stack_trace_hash_id> value
     *
     * @return int
     */
    public function getStackTraceHashId(){
      return $this->_get(2);
    }
    
    /**
     * Set <stack_trace_hash_id> value
     *
     * @param int $value
     * @return \google\tracing\v1\StackTrace
     */
    public function setStackTraceHashId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\tracing\v1 {

  class LabelValue extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $string_value = null;
    
    /**  @var int */
    public $int_value = null;
    
    /**  @var boolean */
    public $bool_value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.LabelValue');

      // OPTIONAL STRING string_value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "string_value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 int_value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "int_value";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL bool_value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "bool_value";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <string_value> has a value
     *
     * @return boolean
     */
    public function hasStringValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <string_value> value
     *
     * @return \google\tracing\v1\LabelValue
     */
    public function clearStringValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <string_value> value
     *
     * @return string
     */
    public function getStringValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <string_value> value
     *
     * @param string $value
     * @return \google\tracing\v1\LabelValue
     */
    public function setStringValue( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <int_value> has a value
     *
     * @return boolean
     */
    public function hasIntValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <int_value> value
     *
     * @return \google\tracing\v1\LabelValue
     */
    public function clearIntValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <int_value> value
     *
     * @return int
     */
    public function getIntValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <int_value> value
     *
     * @param int $value
     * @return \google\tracing\v1\LabelValue
     */
    public function setIntValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <bool_value> has a value
     *
     * @return boolean
     */
    public function hasBoolValue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <bool_value> value
     *
     * @return \google\tracing\v1\LabelValue
     */
    public function clearBoolValue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <bool_value> value
     *
     * @return boolean
     */
    public function getBoolValue(){
      return $this->_get(3);
    }
    
    /**
     * Set <bool_value> value
     *
     * @param boolean $value
     * @return \google\tracing\v1\LabelValue
     */
    public function setBoolValue( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\tracing\v1\Span\TimeEvent\Annotation {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\tracing\v1\LabelValue */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.Span.TimeEvent.Annotation.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\LabelValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\tracing\v1\LabelValue
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\tracing\v1\LabelValue $value
     * @return \google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry
     */
    public function setValue(\google\tracing\v1\LabelValue $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\tracing\v1\Span\TimeEvent {

  class Annotation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $description = null;
    
    /**  @var \google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry[]  */
    public $labels = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.Span.TimeEvent.Annotation');

      // OPTIONAL STRING description = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(1);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\Annotation
     */
    public function clearDescription(){
      return $this->_clear(1);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(1);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\tracing\v1\Span\TimeEvent\Annotation
     */
    public function setDescription( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(2);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\Annotation
     */
    public function clearLabels(){
      return $this->_clear(2);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry $value
     * @return \google\tracing\v1\Span\TimeEvent\Annotation
     */
    public function setLabels(\google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry $value
     * @return \google\tracing\v1\Span\TimeEvent\Annotation
     */
    public function addLabels(\google\tracing\v1\Span\TimeEvent\Annotation\LabelsEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\tracing\v1\Span\TimeEvent\NetworkEvent {

  class Type extends \DrSlump\Protobuf\Enum {
    const UNSPECIFIED = 0;
    const SENT = 1;
    const RECV = 2;
  }
}
namespace google\tracing\v1\Span\TimeEvent {

  class NetworkEvent extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\Timestamp */
    public $kernel_time = null;
    
    /**  @var int - \google\tracing\v1\Span\TimeEvent\NetworkEvent\Type */
    public $type = null;
    
    /**  @var int */
    public $message_id = null;
    
    /**  @var int */
    public $message_size = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.Span.TimeEvent.NetworkEvent');

      // OPTIONAL MESSAGE kernel_time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kernel_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\Span\TimeEvent\NetworkEvent\Type';
      $descriptor->addField($f);

      // OPTIONAL UINT64 message_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "message_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 message_size = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "message_size";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kernel_time> has a value
     *
     * @return boolean
     */
    public function hasKernelTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kernel_time> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\NetworkEvent
     */
    public function clearKernelTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kernel_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getKernelTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <kernel_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\tracing\v1\Span\TimeEvent\NetworkEvent
     */
    public function setKernelTime(\google\protobuf\Timestamp $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\NetworkEvent
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\tracing\v1\Span\TimeEvent\NetworkEvent\Type
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\tracing\v1\Span\TimeEvent\NetworkEvent\Type $value
     * @return \google\tracing\v1\Span\TimeEvent\NetworkEvent
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <message_id> has a value
     *
     * @return boolean
     */
    public function hasMessageId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <message_id> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\NetworkEvent
     */
    public function clearMessageId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <message_id> value
     *
     * @return int
     */
    public function getMessageId(){
      return $this->_get(3);
    }
    
    /**
     * Set <message_id> value
     *
     * @param int $value
     * @return \google\tracing\v1\Span\TimeEvent\NetworkEvent
     */
    public function setMessageId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <message_size> has a value
     *
     * @return boolean
     */
    public function hasMessageSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <message_size> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\NetworkEvent
     */
    public function clearMessageSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <message_size> value
     *
     * @return int
     */
    public function getMessageSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <message_size> value
     *
     * @param int $value
     * @return \google\tracing\v1\Span\TimeEvent\NetworkEvent
     */
    public function setMessageSize( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\tracing\v1\Span {

  class TimeEvent extends \DrSlump\Protobuf\Message {

    /**  @var \google\protobuf\Timestamp */
    public $local_time = null;
    
    /**  @var \google\tracing\v1\Span\TimeEvent\Annotation */
    public $annotation = null;
    
    /**  @var \google\tracing\v1\Span\TimeEvent\NetworkEvent */
    public $network_event = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.Span.TimeEvent');

      // OPTIONAL MESSAGE local_time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "local_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE annotation = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "annotation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\Span\TimeEvent\Annotation';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE network_event = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "network_event";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\Span\TimeEvent\NetworkEvent';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <local_time> has a value
     *
     * @return boolean
     */
    public function hasLocalTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <local_time> value
     *
     * @return \google\tracing\v1\Span\TimeEvent
     */
    public function clearLocalTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <local_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getLocalTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <local_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\tracing\v1\Span\TimeEvent
     */
    public function setLocalTime(\google\protobuf\Timestamp $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <annotation> has a value
     *
     * @return boolean
     */
    public function hasAnnotation(){
      return $this->_has(2);
    }
    
    /**
     * Clear <annotation> value
     *
     * @return \google\tracing\v1\Span\TimeEvent
     */
    public function clearAnnotation(){
      return $this->_clear(2);
    }
    
    /**
     * Get <annotation> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\Annotation
     */
    public function getAnnotation(){
      return $this->_get(2);
    }
    
    /**
     * Set <annotation> value
     *
     * @param \google\tracing\v1\Span\TimeEvent\Annotation $value
     * @return \google\tracing\v1\Span\TimeEvent
     */
    public function setAnnotation(\google\tracing\v1\Span\TimeEvent\Annotation $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <network_event> has a value
     *
     * @return boolean
     */
    public function hasNetworkEvent(){
      return $this->_has(3);
    }
    
    /**
     * Clear <network_event> value
     *
     * @return \google\tracing\v1\Span\TimeEvent
     */
    public function clearNetworkEvent(){
      return $this->_clear(3);
    }
    
    /**
     * Get <network_event> value
     *
     * @return \google\tracing\v1\Span\TimeEvent\NetworkEvent
     */
    public function getNetworkEvent(){
      return $this->_get(3);
    }
    
    /**
     * Set <network_event> value
     *
     * @param \google\tracing\v1\Span\TimeEvent\NetworkEvent $value
     * @return \google\tracing\v1\Span\TimeEvent
     */
    public function setNetworkEvent(\google\tracing\v1\Span\TimeEvent\NetworkEvent $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\tracing\v1\Span\Link {

  class Type extends \DrSlump\Protobuf\Enum {
    const UNSPECIFIED = 0;
    const CHILD = 1;
    const PARENT = 2;
  }
}
namespace google\tracing\v1\Span {

  class Link extends \DrSlump\Protobuf\Message {

    /**  @var \google\tracing\v1\TraceId */
    public $trace_id = null;
    
    /**  @var int */
    public $span_id = null;
    
    /**  @var int - \google\tracing\v1\Span\Link\Type */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.Span.Link');

      // OPTIONAL MESSAGE trace_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "trace_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\TraceId';
      $descriptor->addField($f);

      // OPTIONAL FIXED64 span_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "span_id";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\Span\Link\Type';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <trace_id> has a value
     *
     * @return boolean
     */
    public function hasTraceId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <trace_id> value
     *
     * @return \google\tracing\v1\Span\Link
     */
    public function clearTraceId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <trace_id> value
     *
     * @return \google\tracing\v1\TraceId
     */
    public function getTraceId(){
      return $this->_get(1);
    }
    
    /**
     * Set <trace_id> value
     *
     * @param \google\tracing\v1\TraceId $value
     * @return \google\tracing\v1\Span\Link
     */
    public function setTraceId(\google\tracing\v1\TraceId $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <span_id> has a value
     *
     * @return boolean
     */
    public function hasSpanId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <span_id> value
     *
     * @return \google\tracing\v1\Span\Link
     */
    public function clearSpanId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <span_id> value
     *
     * @return int
     */
    public function getSpanId(){
      return $this->_get(2);
    }
    
    /**
     * Set <span_id> value
     *
     * @param int $value
     * @return \google\tracing\v1\Span\Link
     */
    public function setSpanId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\tracing\v1\Span\Link
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\tracing\v1\Span\Link\Type
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\tracing\v1\Span\Link\Type $value
     * @return \google\tracing\v1\Span\Link
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\tracing\v1\Span {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\tracing\v1\LabelValue */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.Span.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\LabelValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\tracing\v1\Span\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\tracing\v1\Span\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\tracing\v1\Span\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\tracing\v1\LabelValue
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\tracing\v1\LabelValue $value
     * @return \google\tracing\v1\Span\LabelsEntry
     */
    public function setValue(\google\tracing\v1\LabelValue $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\tracing\v1 {

  class Span extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $parent_id = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $local_start_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $local_end_time = null;
    
    /**  @var \google\tracing\v1\Span\LabelsEntry[]  */
    public $labels = array();
    
    /**  @var \google\tracing\v1\StackTrace */
    public $stack_trace = null;
    
    /**  @var \google\tracing\v1\Span\TimeEvent[]  */
    public $time_events = array();
    
    /**  @var \google\tracing\v1\Span\Link[]  */
    public $links = array();
    
    /**  @var \google\rpc\Status */
    public $status = null;
    
    /**  @var boolean */
    public $has_remote_parent = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.Span');

      // OPTIONAL FIXED64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED64 parent_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "parent_id";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE local_start_time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "local_start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE local_end_time = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "local_end_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\tracing\v1\Span\LabelsEntry';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE stack_trace = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "stack_trace";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\StackTrace';
      $descriptor->addField($f);

      // REPEATED MESSAGE time_events = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "time_events";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\tracing\v1\Span\TimeEvent';
      $descriptor->addField($f);

      // REPEATED MESSAGE links = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "links";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\tracing\v1\Span\Link';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE status = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\rpc\Status';
      $descriptor->addField($f);

      // OPTIONAL BOOL has_remote_parent = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "has_remote_parent";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \google\tracing\v1\Span
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\tracing\v1\Span
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <parent_id> has a value
     *
     * @return boolean
     */
    public function hasParentId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <parent_id> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearParentId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <parent_id> value
     *
     * @return int
     */
    public function getParentId(){
      return $this->_get(3);
    }
    
    /**
     * Set <parent_id> value
     *
     * @param int $value
     * @return \google\tracing\v1\Span
     */
    public function setParentId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <local_start_time> has a value
     *
     * @return boolean
     */
    public function hasLocalStartTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <local_start_time> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearLocalStartTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <local_start_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getLocalStartTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <local_start_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\tracing\v1\Span
     */
    public function setLocalStartTime(\google\protobuf\Timestamp $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <local_end_time> has a value
     *
     * @return boolean
     */
    public function hasLocalEndTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <local_end_time> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearLocalEndTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <local_end_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getLocalEndTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <local_end_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\tracing\v1\Span
     */
    public function setLocalEndTime(\google\protobuf\Timestamp $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(6);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearLabels(){
      return $this->_clear(6);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\tracing\v1\Span\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\tracing\v1\Span\LabelsEntry $value
     * @return \google\tracing\v1\Span
     */
    public function setLabels(\google\tracing\v1\Span\LabelsEntry $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\tracing\v1\Span\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\tracing\v1\Span\LabelsEntry $value
     * @return \google\tracing\v1\Span
     */
    public function addLabels(\google\tracing\v1\Span\LabelsEntry $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <stack_trace> has a value
     *
     * @return boolean
     */
    public function hasStackTrace(){
      return $this->_has(7);
    }
    
    /**
     * Clear <stack_trace> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearStackTrace(){
      return $this->_clear(7);
    }
    
    /**
     * Get <stack_trace> value
     *
     * @return \google\tracing\v1\StackTrace
     */
    public function getStackTrace(){
      return $this->_get(7);
    }
    
    /**
     * Set <stack_trace> value
     *
     * @param \google\tracing\v1\StackTrace $value
     * @return \google\tracing\v1\Span
     */
    public function setStackTrace(\google\tracing\v1\StackTrace $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <time_events> has a value
     *
     * @return boolean
     */
    public function hasTimeEvents(){
      return $this->_has(8);
    }
    
    /**
     * Clear <time_events> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearTimeEvents(){
      return $this->_clear(8);
    }
    
    /**
     * Get <time_events> value
     *
     * @param int $idx
     * @return \google\tracing\v1\Span\TimeEvent
     */
    public function getTimeEvents($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <time_events> value
     *
     * @param \google\tracing\v1\Span\TimeEvent $value
     * @return \google\tracing\v1\Span
     */
    public function setTimeEvents(\google\tracing\v1\Span\TimeEvent $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <time_events>
     *
     * @return \google\tracing\v1\Span\TimeEvent[]
     */
    public function getTimeEventsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <time_events>
     *
     * @param \google\tracing\v1\Span\TimeEvent $value
     * @return \google\tracing\v1\Span
     */
    public function addTimeEvents(\google\tracing\v1\Span\TimeEvent $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <links> has a value
     *
     * @return boolean
     */
    public function hasLinks(){
      return $this->_has(9);
    }
    
    /**
     * Clear <links> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearLinks(){
      return $this->_clear(9);
    }
    
    /**
     * Get <links> value
     *
     * @param int $idx
     * @return \google\tracing\v1\Span\Link
     */
    public function getLinks($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <links> value
     *
     * @param \google\tracing\v1\Span\Link $value
     * @return \google\tracing\v1\Span
     */
    public function setLinks(\google\tracing\v1\Span\Link $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <links>
     *
     * @return \google\tracing\v1\Span\Link[]
     */
    public function getLinksList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <links>
     *
     * @param \google\tracing\v1\Span\Link $value
     * @return \google\tracing\v1\Span
     */
    public function addLinks(\google\tracing\v1\Span\Link $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(10);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearStatus(){
      return $this->_clear(10);
    }
    
    /**
     * Get <status> value
     *
     * @return \google\rpc\Status
     */
    public function getStatus(){
      return $this->_get(10);
    }
    
    /**
     * Set <status> value
     *
     * @param \google\rpc\Status $value
     * @return \google\tracing\v1\Span
     */
    public function setStatus(\google\rpc\Status $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <has_remote_parent> has a value
     *
     * @return boolean
     */
    public function hasHasRemoteParent(){
      return $this->_has(11);
    }
    
    /**
     * Clear <has_remote_parent> value
     *
     * @return \google\tracing\v1\Span
     */
    public function clearHasRemoteParent(){
      return $this->_clear(11);
    }
    
    /**
     * Get <has_remote_parent> value
     *
     * @return boolean
     */
    public function getHasRemoteParent(){
      return $this->_get(11);
    }
    
    /**
     * Set <has_remote_parent> value
     *
     * @param boolean $value
     * @return \google\tracing\v1\Span
     */
    public function setHasRemoteParent( $value){
      return $this->_set(11, $value);
    }
  }
}

namespace google\tracing\v1 {

  class Trace extends \DrSlump\Protobuf\Message {

    /**  @var \google\tracing\v1\TraceId */
    public $trace_id = null;
    
    /**  @var \google\tracing\v1\Span[]  */
    public $spans = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.tracing.v1.Trace');

      // OPTIONAL MESSAGE trace_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "trace_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\tracing\v1\TraceId';
      $descriptor->addField($f);

      // REPEATED MESSAGE spans = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "spans";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\tracing\v1\Span';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <trace_id> has a value
     *
     * @return boolean
     */
    public function hasTraceId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <trace_id> value
     *
     * @return \google\tracing\v1\Trace
     */
    public function clearTraceId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <trace_id> value
     *
     * @return \google\tracing\v1\TraceId
     */
    public function getTraceId(){
      return $this->_get(1);
    }
    
    /**
     * Set <trace_id> value
     *
     * @param \google\tracing\v1\TraceId $value
     * @return \google\tracing\v1\Trace
     */
    public function setTraceId(\google\tracing\v1\TraceId $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <spans> has a value
     *
     * @return boolean
     */
    public function hasSpans(){
      return $this->_has(2);
    }
    
    /**
     * Clear <spans> value
     *
     * @return \google\tracing\v1\Trace
     */
    public function clearSpans(){
      return $this->_clear(2);
    }
    
    /**
     * Get <spans> value
     *
     * @param int $idx
     * @return \google\tracing\v1\Span
     */
    public function getSpans($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <spans> value
     *
     * @param \google\tracing\v1\Span $value
     * @return \google\tracing\v1\Trace
     */
    public function setSpans(\google\tracing\v1\Span $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <spans>
     *
     * @return \google\tracing\v1\Span[]
     */
    public function getSpansList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <spans>
     *
     * @param \google\tracing\v1\Span $value
     * @return \google\tracing\v1\Trace
     */
    public function addSpans(\google\tracing\v1\Span $value){
     return $this->_add(2, $value);
    }
  }
}

