<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/watcher/v1/watch.proto
//   Date: 2017-06-13 04:26:48

namespace google\watcher\v1 {

  class Request extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $target = null;
    
    /**  @var string */
    public $resume_marker = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.watcher.v1.Request');

      // OPTIONAL STRING target = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "target";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES resume_marker = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "resume_marker";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <target> has a value
     *
     * @return boolean
     */
    public function hasTarget(){
      return $this->_has(1);
    }
    
    /**
     * Clear <target> value
     *
     * @return \google\watcher\v1\Request
     */
    public function clearTarget(){
      return $this->_clear(1);
    }
    
    /**
     * Get <target> value
     *
     * @return string
     */
    public function getTarget(){
      return $this->_get(1);
    }
    
    /**
     * Set <target> value
     *
     * @param string $value
     * @return \google\watcher\v1\Request
     */
    public function setTarget( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <resume_marker> has a value
     *
     * @return boolean
     */
    public function hasResumeMarker(){
      return $this->_has(2);
    }
    
    /**
     * Clear <resume_marker> value
     *
     * @return \google\watcher\v1\Request
     */
    public function clearResumeMarker(){
      return $this->_clear(2);
    }
    
    /**
     * Get <resume_marker> value
     *
     * @return string
     */
    public function getResumeMarker(){
      return $this->_get(2);
    }
    
    /**
     * Set <resume_marker> value
     *
     * @param string $value
     * @return \google\watcher\v1\Request
     */
    public function setResumeMarker( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\watcher\v1 {

  class ChangeBatch extends \DrSlump\Protobuf\Message {

    /**  @var \google\watcher\v1\Change[]  */
    public $changes = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.watcher.v1.ChangeBatch');

      // REPEATED MESSAGE changes = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "changes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\watcher\v1\Change';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <changes> has a value
     *
     * @return boolean
     */
    public function hasChanges(){
      return $this->_has(1);
    }
    
    /**
     * Clear <changes> value
     *
     * @return \google\watcher\v1\ChangeBatch
     */
    public function clearChanges(){
      return $this->_clear(1);
    }
    
    /**
     * Get <changes> value
     *
     * @param int $idx
     * @return \google\watcher\v1\Change
     */
    public function getChanges($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <changes> value
     *
     * @param \google\watcher\v1\Change $value
     * @return \google\watcher\v1\ChangeBatch
     */
    public function setChanges(\google\watcher\v1\Change $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <changes>
     *
     * @return \google\watcher\v1\Change[]
     */
    public function getChangesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <changes>
     *
     * @param \google\watcher\v1\Change $value
     * @return \google\watcher\v1\ChangeBatch
     */
    public function addChanges(\google\watcher\v1\Change $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\watcher\v1\Change {

  class State extends \DrSlump\Protobuf\Enum {
    const EXISTS = 0;
    const DOES_NOT_EXIST = 1;
    const INITIAL_STATE_SKIPPED = 2;
    const ERROR = 3;
  }
}
namespace google\watcher\v1 {

  class Change extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $element = null;
    
    /**  @var int - \google\watcher\v1\Change\State */
    public $state = null;
    
    /**  @var \google\protobuf\Any */
    public $data = null;
    
    /**  @var string */
    public $resume_marker = null;
    
    /**  @var boolean */
    public $continued = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.watcher.v1.Change');

      // OPTIONAL STRING element = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "element";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\watcher\v1\Change\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE data = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "data";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Any';
      $descriptor->addField($f);

      // OPTIONAL BYTES resume_marker = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "resume_marker";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL continued = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "continued";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <element> has a value
     *
     * @return boolean
     */
    public function hasElement(){
      return $this->_has(1);
    }
    
    /**
     * Clear <element> value
     *
     * @return \google\watcher\v1\Change
     */
    public function clearElement(){
      return $this->_clear(1);
    }
    
    /**
     * Get <element> value
     *
     * @return string
     */
    public function getElement(){
      return $this->_get(1);
    }
    
    /**
     * Set <element> value
     *
     * @param string $value
     * @return \google\watcher\v1\Change
     */
    public function setElement( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \google\watcher\v1\Change
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \google\watcher\v1\Change\State
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \google\watcher\v1\Change\State $value
     * @return \google\watcher\v1\Change
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <data> has a value
     *
     * @return boolean
     */
    public function hasData(){
      return $this->_has(6);
    }
    
    /**
     * Clear <data> value
     *
     * @return \google\watcher\v1\Change
     */
    public function clearData(){
      return $this->_clear(6);
    }
    
    /**
     * Get <data> value
     *
     * @return \google\protobuf\Any
     */
    public function getData(){
      return $this->_get(6);
    }
    
    /**
     * Set <data> value
     *
     * @param \google\protobuf\Any $value
     * @return \google\watcher\v1\Change
     */
    public function setData(\google\protobuf\Any $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <resume_marker> has a value
     *
     * @return boolean
     */
    public function hasResumeMarker(){
      return $this->_has(4);
    }
    
    /**
     * Clear <resume_marker> value
     *
     * @return \google\watcher\v1\Change
     */
    public function clearResumeMarker(){
      return $this->_clear(4);
    }
    
    /**
     * Get <resume_marker> value
     *
     * @return string
     */
    public function getResumeMarker(){
      return $this->_get(4);
    }
    
    /**
     * Set <resume_marker> value
     *
     * @param string $value
     * @return \google\watcher\v1\Change
     */
    public function setResumeMarker( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <continued> has a value
     *
     * @return boolean
     */
    public function hasContinued(){
      return $this->_has(5);
    }
    
    /**
     * Clear <continued> value
     *
     * @return \google\watcher\v1\Change
     */
    public function clearContinued(){
      return $this->_clear(5);
    }
    
    /**
     * Get <continued> value
     *
     * @return boolean
     */
    public function getContinued(){
      return $this->_get(5);
    }
    
    /**
     * Set <continued> value
     *
     * @param boolean $value
     * @return \google\watcher\v1\Change
     */
    public function setContinued( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\watcher\v1 {

  class WatcherClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\watcher\v1\Request $input
     */
    public function Watch($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/google.watcher.v1.Watcher/Watch', $argument, '\google\watcher\v1\ChangeBatch::deserialize', $metadata, $options);
    }
  }
}
