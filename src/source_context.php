<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/devtools/source/v1/source_context.proto
//   Date: 2017-06-13 04:25:23

namespace google\devtools\source\v1 {

  class SourceContext extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\source\v1\CloudRepoSourceContext */
    public $cloud_repo = null;
    
    /**  @var \google\devtools\source\v1\CloudWorkspaceSourceContext */
    public $cloud_workspace = null;
    
    /**  @var \google\devtools\source\v1\GerritSourceContext */
    public $gerrit = null;
    
    /**  @var \google\devtools\source\v1\GitSourceContext */
    public $git = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.SourceContext');

      // OPTIONAL MESSAGE cloud_repo = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "cloud_repo";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\CloudRepoSourceContext';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cloud_workspace = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cloud_workspace";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\CloudWorkspaceSourceContext';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gerrit = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "gerrit";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\GerritSourceContext';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE git = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "git";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\GitSourceContext';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <cloud_repo> has a value
     *
     * @return boolean
     */
    public function hasCloudRepo(){
      return $this->_has(1);
    }
    
    /**
     * Clear <cloud_repo> value
     *
     * @return \google\devtools\source\v1\SourceContext
     */
    public function clearCloudRepo(){
      return $this->_clear(1);
    }
    
    /**
     * Get <cloud_repo> value
     *
     * @return \google\devtools\source\v1\CloudRepoSourceContext
     */
    public function getCloudRepo(){
      return $this->_get(1);
    }
    
    /**
     * Set <cloud_repo> value
     *
     * @param \google\devtools\source\v1\CloudRepoSourceContext $value
     * @return \google\devtools\source\v1\SourceContext
     */
    public function setCloudRepo(\google\devtools\source\v1\CloudRepoSourceContext $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cloud_workspace> has a value
     *
     * @return boolean
     */
    public function hasCloudWorkspace(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cloud_workspace> value
     *
     * @return \google\devtools\source\v1\SourceContext
     */
    public function clearCloudWorkspace(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cloud_workspace> value
     *
     * @return \google\devtools\source\v1\CloudWorkspaceSourceContext
     */
    public function getCloudWorkspace(){
      return $this->_get(2);
    }
    
    /**
     * Set <cloud_workspace> value
     *
     * @param \google\devtools\source\v1\CloudWorkspaceSourceContext $value
     * @return \google\devtools\source\v1\SourceContext
     */
    public function setCloudWorkspace(\google\devtools\source\v1\CloudWorkspaceSourceContext $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <gerrit> has a value
     *
     * @return boolean
     */
    public function hasGerrit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <gerrit> value
     *
     * @return \google\devtools\source\v1\SourceContext
     */
    public function clearGerrit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <gerrit> value
     *
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function getGerrit(){
      return $this->_get(3);
    }
    
    /**
     * Set <gerrit> value
     *
     * @param \google\devtools\source\v1\GerritSourceContext $value
     * @return \google\devtools\source\v1\SourceContext
     */
    public function setGerrit(\google\devtools\source\v1\GerritSourceContext $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <git> has a value
     *
     * @return boolean
     */
    public function hasGit(){
      return $this->_has(6);
    }
    
    /**
     * Clear <git> value
     *
     * @return \google\devtools\source\v1\SourceContext
     */
    public function clearGit(){
      return $this->_clear(6);
    }
    
    /**
     * Get <git> value
     *
     * @return \google\devtools\source\v1\GitSourceContext
     */
    public function getGit(){
      return $this->_get(6);
    }
    
    /**
     * Set <git> value
     *
     * @param \google\devtools\source\v1\GitSourceContext $value
     * @return \google\devtools\source\v1\SourceContext
     */
    public function setGit(\google\devtools\source\v1\GitSourceContext $value){
      return $this->_set(6, $value);
    }
  }
}

namespace google\devtools\source\v1\ExtendedSourceContext {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.ExtendedSourceContext.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\devtools\source\v1\ExtendedSourceContext\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\ExtendedSourceContext\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\devtools\source\v1\ExtendedSourceContext\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\ExtendedSourceContext\LabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\source\v1 {

  class ExtendedSourceContext extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\source\v1\SourceContext */
    public $context = null;
    
    /**  @var \google\devtools\source\v1\ExtendedSourceContext\LabelsEntry[]  */
    public $labels = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.ExtendedSourceContext');

      // OPTIONAL MESSAGE context = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\SourceContext';
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\source\v1\ExtendedSourceContext\LabelsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <context> has a value
     *
     * @return boolean
     */
    public function hasContext(){
      return $this->_has(1);
    }
    
    /**
     * Clear <context> value
     *
     * @return \google\devtools\source\v1\ExtendedSourceContext
     */
    public function clearContext(){
      return $this->_clear(1);
    }
    
    /**
     * Get <context> value
     *
     * @return \google\devtools\source\v1\SourceContext
     */
    public function getContext(){
      return $this->_get(1);
    }
    
    /**
     * Set <context> value
     *
     * @param \google\devtools\source\v1\SourceContext $value
     * @return \google\devtools\source\v1\ExtendedSourceContext
     */
    public function setContext(\google\devtools\source\v1\SourceContext $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(2);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\devtools\source\v1\ExtendedSourceContext
     */
    public function clearLabels(){
      return $this->_clear(2);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\devtools\source\v1\ExtendedSourceContext\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\devtools\source\v1\ExtendedSourceContext\LabelsEntry $value
     * @return \google\devtools\source\v1\ExtendedSourceContext
     */
    public function setLabels(\google\devtools\source\v1\ExtendedSourceContext\LabelsEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\devtools\source\v1\ExtendedSourceContext\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\devtools\source\v1\ExtendedSourceContext\LabelsEntry $value
     * @return \google\devtools\source\v1\ExtendedSourceContext
     */
    public function addLabels(\google\devtools\source\v1\ExtendedSourceContext\LabelsEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\devtools\source\v1\AliasContext {

  class Kind extends \DrSlump\Protobuf\Enum {
    const ANY = 0;
    const FIXED = 1;
    const MOVABLE = 2;
    const OTHER = 4;
  }
}
namespace google\devtools\source\v1 {

  class AliasContext extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\devtools\source\v1\AliasContext\Kind */
    public $kind = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.AliasContext');

      // OPTIONAL ENUM kind = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\AliasContext\Kind';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(1);
    }
    
    /**
     * Clear <kind> value
     *
     * @return \google\devtools\source\v1\AliasContext
     */
    public function clearKind(){
      return $this->_clear(1);
    }
    
    /**
     * Get <kind> value
     *
     * @return int - \google\devtools\source\v1\AliasContext\Kind
     */
    public function getKind(){
      return $this->_get(1);
    }
    
    /**
     * Set <kind> value
     *
     * @param int - \google\devtools\source\v1\AliasContext\Kind $value
     * @return \google\devtools\source\v1\AliasContext
     */
    public function setKind( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\source\v1\AliasContext
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\AliasContext
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\source\v1 {

  class CloudRepoSourceContext extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\source\v1\RepoId */
    public $repo_id = null;
    
    /**  @var string */
    public $revision_id = null;
    
    /**  @var string */
    public $alias_name = null;
    
    /**  @var \google\devtools\source\v1\AliasContext */
    public $alias_context = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.CloudRepoSourceContext');

      // OPTIONAL MESSAGE repo_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "repo_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\RepoId';
      $descriptor->addField($f);

      // OPTIONAL STRING revision_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "revision_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING alias_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "alias_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE alias_context = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "alias_context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\AliasContext';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <repo_id> has a value
     *
     * @return boolean
     */
    public function hasRepoId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <repo_id> value
     *
     * @return \google\devtools\source\v1\CloudRepoSourceContext
     */
    public function clearRepoId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <repo_id> value
     *
     * @return \google\devtools\source\v1\RepoId
     */
    public function getRepoId(){
      return $this->_get(1);
    }
    
    /**
     * Set <repo_id> value
     *
     * @param \google\devtools\source\v1\RepoId $value
     * @return \google\devtools\source\v1\CloudRepoSourceContext
     */
    public function setRepoId(\google\devtools\source\v1\RepoId $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <revision_id> has a value
     *
     * @return boolean
     */
    public function hasRevisionId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <revision_id> value
     *
     * @return \google\devtools\source\v1\CloudRepoSourceContext
     */
    public function clearRevisionId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <revision_id> value
     *
     * @return string
     */
    public function getRevisionId(){
      return $this->_get(2);
    }
    
    /**
     * Set <revision_id> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\CloudRepoSourceContext
     */
    public function setRevisionId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <alias_name> has a value
     *
     * @return boolean
     */
    public function hasAliasName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <alias_name> value
     *
     * @return \google\devtools\source\v1\CloudRepoSourceContext
     */
    public function clearAliasName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <alias_name> value
     *
     * @return string
     */
    public function getAliasName(){
      return $this->_get(3);
    }
    
    /**
     * Set <alias_name> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\CloudRepoSourceContext
     */
    public function setAliasName( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <alias_context> has a value
     *
     * @return boolean
     */
    public function hasAliasContext(){
      return $this->_has(4);
    }
    
    /**
     * Clear <alias_context> value
     *
     * @return \google\devtools\source\v1\CloudRepoSourceContext
     */
    public function clearAliasContext(){
      return $this->_clear(4);
    }
    
    /**
     * Get <alias_context> value
     *
     * @return \google\devtools\source\v1\AliasContext
     */
    public function getAliasContext(){
      return $this->_get(4);
    }
    
    /**
     * Set <alias_context> value
     *
     * @param \google\devtools\source\v1\AliasContext $value
     * @return \google\devtools\source\v1\CloudRepoSourceContext
     */
    public function setAliasContext(\google\devtools\source\v1\AliasContext $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\devtools\source\v1 {

  class CloudWorkspaceSourceContext extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\source\v1\CloudWorkspaceId */
    public $workspace_id = null;
    
    /**  @var string */
    public $snapshot_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.CloudWorkspaceSourceContext');

      // OPTIONAL MESSAGE workspace_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "workspace_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\CloudWorkspaceId';
      $descriptor->addField($f);

      // OPTIONAL STRING snapshot_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "snapshot_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <workspace_id> has a value
     *
     * @return boolean
     */
    public function hasWorkspaceId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <workspace_id> value
     *
     * @return \google\devtools\source\v1\CloudWorkspaceSourceContext
     */
    public function clearWorkspaceId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <workspace_id> value
     *
     * @return \google\devtools\source\v1\CloudWorkspaceId
     */
    public function getWorkspaceId(){
      return $this->_get(1);
    }
    
    /**
     * Set <workspace_id> value
     *
     * @param \google\devtools\source\v1\CloudWorkspaceId $value
     * @return \google\devtools\source\v1\CloudWorkspaceSourceContext
     */
    public function setWorkspaceId(\google\devtools\source\v1\CloudWorkspaceId $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <snapshot_id> has a value
     *
     * @return boolean
     */
    public function hasSnapshotId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <snapshot_id> value
     *
     * @return \google\devtools\source\v1\CloudWorkspaceSourceContext
     */
    public function clearSnapshotId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <snapshot_id> value
     *
     * @return string
     */
    public function getSnapshotId(){
      return $this->_get(2);
    }
    
    /**
     * Set <snapshot_id> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\CloudWorkspaceSourceContext
     */
    public function setSnapshotId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\source\v1 {

  class GerritSourceContext extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $host_uri = null;
    
    /**  @var string */
    public $gerrit_project = null;
    
    /**  @var string */
    public $revision_id = null;
    
    /**  @var string */
    public $alias_name = null;
    
    /**  @var \google\devtools\source\v1\AliasContext */
    public $alias_context = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.GerritSourceContext');

      // OPTIONAL STRING host_uri = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "host_uri";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING gerrit_project = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "gerrit_project";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING revision_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "revision_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING alias_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "alias_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE alias_context = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "alias_context";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\AliasContext';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <host_uri> has a value
     *
     * @return boolean
     */
    public function hasHostUri(){
      return $this->_has(1);
    }
    
    /**
     * Clear <host_uri> value
     *
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function clearHostUri(){
      return $this->_clear(1);
    }
    
    /**
     * Get <host_uri> value
     *
     * @return string
     */
    public function getHostUri(){
      return $this->_get(1);
    }
    
    /**
     * Set <host_uri> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function setHostUri( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <gerrit_project> has a value
     *
     * @return boolean
     */
    public function hasGerritProject(){
      return $this->_has(2);
    }
    
    /**
     * Clear <gerrit_project> value
     *
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function clearGerritProject(){
      return $this->_clear(2);
    }
    
    /**
     * Get <gerrit_project> value
     *
     * @return string
     */
    public function getGerritProject(){
      return $this->_get(2);
    }
    
    /**
     * Set <gerrit_project> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function setGerritProject( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <revision_id> has a value
     *
     * @return boolean
     */
    public function hasRevisionId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <revision_id> value
     *
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function clearRevisionId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <revision_id> value
     *
     * @return string
     */
    public function getRevisionId(){
      return $this->_get(3);
    }
    
    /**
     * Set <revision_id> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function setRevisionId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <alias_name> has a value
     *
     * @return boolean
     */
    public function hasAliasName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <alias_name> value
     *
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function clearAliasName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <alias_name> value
     *
     * @return string
     */
    public function getAliasName(){
      return $this->_get(4);
    }
    
    /**
     * Set <alias_name> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function setAliasName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <alias_context> has a value
     *
     * @return boolean
     */
    public function hasAliasContext(){
      return $this->_has(5);
    }
    
    /**
     * Clear <alias_context> value
     *
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function clearAliasContext(){
      return $this->_clear(5);
    }
    
    /**
     * Get <alias_context> value
     *
     * @return \google\devtools\source\v1\AliasContext
     */
    public function getAliasContext(){
      return $this->_get(5);
    }
    
    /**
     * Set <alias_context> value
     *
     * @param \google\devtools\source\v1\AliasContext $value
     * @return \google\devtools\source\v1\GerritSourceContext
     */
    public function setAliasContext(\google\devtools\source\v1\AliasContext $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\devtools\source\v1 {

  class GitSourceContext extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $url = null;
    
    /**  @var string */
    public $revision_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.GitSourceContext');

      // OPTIONAL STRING url = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING revision_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "revision_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <url> value
     *
     * @return \google\devtools\source\v1\GitSourceContext
     */
    public function clearUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\GitSourceContext
     */
    public function setUrl( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <revision_id> has a value
     *
     * @return boolean
     */
    public function hasRevisionId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <revision_id> value
     *
     * @return \google\devtools\source\v1\GitSourceContext
     */
    public function clearRevisionId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <revision_id> value
     *
     * @return string
     */
    public function getRevisionId(){
      return $this->_get(2);
    }
    
    /**
     * Set <revision_id> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\GitSourceContext
     */
    public function setRevisionId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\source\v1 {

  class RepoId extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\source\v1\ProjectRepoId */
    public $project_repo_id = null;
    
    /**  @var string */
    public $uid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.RepoId');

      // OPTIONAL MESSAGE project_repo_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_repo_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\ProjectRepoId';
      $descriptor->addField($f);

      // OPTIONAL STRING uid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_repo_id> has a value
     *
     * @return boolean
     */
    public function hasProjectRepoId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_repo_id> value
     *
     * @return \google\devtools\source\v1\RepoId
     */
    public function clearProjectRepoId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_repo_id> value
     *
     * @return \google\devtools\source\v1\ProjectRepoId
     */
    public function getProjectRepoId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_repo_id> value
     *
     * @param \google\devtools\source\v1\ProjectRepoId $value
     * @return \google\devtools\source\v1\RepoId
     */
    public function setProjectRepoId(\google\devtools\source\v1\ProjectRepoId $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uid> has a value
     *
     * @return boolean
     */
    public function hasUid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uid> value
     *
     * @return \google\devtools\source\v1\RepoId
     */
    public function clearUid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uid> value
     *
     * @return string
     */
    public function getUid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uid> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\RepoId
     */
    public function setUid( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\source\v1 {

  class ProjectRepoId extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $repo_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.ProjectRepoId');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING repo_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "repo_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\devtools\source\v1\ProjectRepoId
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\ProjectRepoId
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <repo_name> has a value
     *
     * @return boolean
     */
    public function hasRepoName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <repo_name> value
     *
     * @return \google\devtools\source\v1\ProjectRepoId
     */
    public function clearRepoName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <repo_name> value
     *
     * @return string
     */
    public function getRepoName(){
      return $this->_get(2);
    }
    
    /**
     * Set <repo_name> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\ProjectRepoId
     */
    public function setRepoName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\source\v1 {

  class CloudWorkspaceId extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\source\v1\RepoId */
    public $repo_id = null;
    
    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.source.v1.CloudWorkspaceId');

      // OPTIONAL MESSAGE repo_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "repo_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\source\v1\RepoId';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <repo_id> has a value
     *
     * @return boolean
     */
    public function hasRepoId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <repo_id> value
     *
     * @return \google\devtools\source\v1\CloudWorkspaceId
     */
    public function clearRepoId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <repo_id> value
     *
     * @return \google\devtools\source\v1\RepoId
     */
    public function getRepoId(){
      return $this->_get(1);
    }
    
    /**
     * Set <repo_id> value
     *
     * @param \google\devtools\source\v1\RepoId $value
     * @return \google\devtools\source\v1\CloudWorkspaceId
     */
    public function setRepoId(\google\devtools\source\v1\RepoId $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\devtools\source\v1\CloudWorkspaceId
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\devtools\source\v1\CloudWorkspaceId
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

