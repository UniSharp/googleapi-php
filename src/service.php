<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/appengine/v1/service.proto
//   Date: 2017-06-13 04:23:23

namespace google\appengine\v1 {

  class Service extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $id = null;
    
    /**  @var \google\appengine\v1\TrafficSplit */
    public $split = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.Service');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE split = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "split";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\TrafficSplit';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\appengine\v1\Service
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\appengine\v1\Service
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\appengine\v1\Service
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\appengine\v1\Service
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <split> has a value
     *
     * @return boolean
     */
    public function hasSplit(){
      return $this->_has(3);
    }
    
    /**
     * Clear <split> value
     *
     * @return \google\appengine\v1\Service
     */
    public function clearSplit(){
      return $this->_clear(3);
    }
    
    /**
     * Get <split> value
     *
     * @return \google\appengine\v1\TrafficSplit
     */
    public function getSplit(){
      return $this->_get(3);
    }
    
    /**
     * Set <split> value
     *
     * @param \google\appengine\v1\TrafficSplit $value
     * @return \google\appengine\v1\Service
     */
    public function setSplit(\google\appengine\v1\TrafficSplit $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\appengine\v1\TrafficSplit {

  class ShardBy extends \DrSlump\Protobuf\Enum {
    const UNSPECIFIED = 0;
    const COOKIE = 1;
    const IP = 2;
  }
}
namespace google\appengine\v1\TrafficSplit {

  class AllocationsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var float */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.TrafficSplit.AllocationsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\appengine\v1\TrafficSplit\AllocationsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\appengine\v1\TrafficSplit\AllocationsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\appengine\v1\TrafficSplit\AllocationsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return float
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param float $value
     * @return \google\appengine\v1\TrafficSplit\AllocationsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\appengine\v1 {

  class TrafficSplit extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\appengine\v1\TrafficSplit\ShardBy */
    public $shard_by = null;
    
    /**  @var \google\appengine\v1\TrafficSplit\AllocationsEntry[]  */
    public $allocations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.TrafficSplit');

      // OPTIONAL ENUM shard_by = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "shard_by";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\TrafficSplit\ShardBy';
      $descriptor->addField($f);

      // REPEATED MESSAGE allocations = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "allocations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\appengine\v1\TrafficSplit\AllocationsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <shard_by> has a value
     *
     * @return boolean
     */
    public function hasShardBy(){
      return $this->_has(1);
    }
    
    /**
     * Clear <shard_by> value
     *
     * @return \google\appengine\v1\TrafficSplit
     */
    public function clearShardBy(){
      return $this->_clear(1);
    }
    
    /**
     * Get <shard_by> value
     *
     * @return int - \google\appengine\v1\TrafficSplit\ShardBy
     */
    public function getShardBy(){
      return $this->_get(1);
    }
    
    /**
     * Set <shard_by> value
     *
     * @param int - \google\appengine\v1\TrafficSplit\ShardBy $value
     * @return \google\appengine\v1\TrafficSplit
     */
    public function setShardBy( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <allocations> has a value
     *
     * @return boolean
     */
    public function hasAllocations(){
      return $this->_has(2);
    }
    
    /**
     * Clear <allocations> value
     *
     * @return \google\appengine\v1\TrafficSplit
     */
    public function clearAllocations(){
      return $this->_clear(2);
    }
    
    /**
     * Get <allocations> value
     *
     * @param int $idx
     * @return \google\appengine\v1\TrafficSplit\AllocationsEntry
     */
    public function getAllocations($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <allocations> value
     *
     * @param \google\appengine\v1\TrafficSplit\AllocationsEntry $value
     * @return \google\appengine\v1\TrafficSplit
     */
    public function setAllocations(\google\appengine\v1\TrafficSplit\AllocationsEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <allocations>
     *
     * @return \google\appengine\v1\TrafficSplit\AllocationsEntry[]
     */
    public function getAllocationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <allocations>
     *
     * @param \google\appengine\v1\TrafficSplit\AllocationsEntry $value
     * @return \google\appengine\v1\TrafficSplit
     */
    public function addAllocations(\google\appengine\v1\TrafficSplit\AllocationsEntry $value){
     return $this->_add(2, $value);
    }
  }
}

