<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/bigtable/v1/bigtable_service_messages.proto
//   Date: 2017-06-13 04:23:45

namespace google\bigtable\v1 {

  class ReadRowsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v1\RowRange */
    public $row_range = null;
    
    /**  @var \google\bigtable\v1\RowSet */
    public $row_set = null;
    
    /**  @var \google\bigtable\v1\RowFilter */
    public $filter = null;
    
    /**  @var boolean */
    public $allow_row_interleaving = null;
    
    /**  @var int */
    public $num_rows_limit = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.ReadRowsRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES row_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE row_range = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "row_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowRange';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE row_set = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "row_set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowSet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowFilter';
      $descriptor->addField($f);

      // OPTIONAL BOOL allow_row_interleaving = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "allow_row_interleaving";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 num_rows_limit = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "num_rows_limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function clearRowKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function setRowKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <row_range> has a value
     *
     * @return boolean
     */
    public function hasRowRange(){
      return $this->_has(3);
    }
    
    /**
     * Clear <row_range> value
     *
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function clearRowRange(){
      return $this->_clear(3);
    }
    
    /**
     * Get <row_range> value
     *
     * @return \google\bigtable\v1\RowRange
     */
    public function getRowRange(){
      return $this->_get(3);
    }
    
    /**
     * Set <row_range> value
     *
     * @param \google\bigtable\v1\RowRange $value
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function setRowRange(\google\bigtable\v1\RowRange $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <row_set> has a value
     *
     * @return boolean
     */
    public function hasRowSet(){
      return $this->_has(8);
    }
    
    /**
     * Clear <row_set> value
     *
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function clearRowSet(){
      return $this->_clear(8);
    }
    
    /**
     * Get <row_set> value
     *
     * @return \google\bigtable\v1\RowSet
     */
    public function getRowSet(){
      return $this->_get(8);
    }
    
    /**
     * Set <row_set> value
     *
     * @param \google\bigtable\v1\RowSet $value
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function setRowSet(\google\bigtable\v1\RowSet $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(5);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function clearFilter(){
      return $this->_clear(5);
    }
    
    /**
     * Get <filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function getFilter(){
      return $this->_get(5);
    }
    
    /**
     * Set <filter> value
     *
     * @param \google\bigtable\v1\RowFilter $value
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function setFilter(\google\bigtable\v1\RowFilter $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <allow_row_interleaving> has a value
     *
     * @return boolean
     */
    public function hasAllowRowInterleaving(){
      return $this->_has(6);
    }
    
    /**
     * Clear <allow_row_interleaving> value
     *
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function clearAllowRowInterleaving(){
      return $this->_clear(6);
    }
    
    /**
     * Get <allow_row_interleaving> value
     *
     * @return boolean
     */
    public function getAllowRowInterleaving(){
      return $this->_get(6);
    }
    
    /**
     * Set <allow_row_interleaving> value
     *
     * @param boolean $value
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function setAllowRowInterleaving( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <num_rows_limit> has a value
     *
     * @return boolean
     */
    public function hasNumRowsLimit(){
      return $this->_has(7);
    }
    
    /**
     * Clear <num_rows_limit> value
     *
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function clearNumRowsLimit(){
      return $this->_clear(7);
    }
    
    /**
     * Get <num_rows_limit> value
     *
     * @return int
     */
    public function getNumRowsLimit(){
      return $this->_get(7);
    }
    
    /**
     * Set <num_rows_limit> value
     *
     * @param int $value
     * @return \google\bigtable\v1\ReadRowsRequest
     */
    public function setNumRowsLimit( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\bigtable\v1\ReadRowsResponse {

  class Chunk extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\v1\Family */
    public $row_contents = null;
    
    /**  @var boolean */
    public $reset_row = null;
    
    /**  @var boolean */
    public $commit_row = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.ReadRowsResponse.Chunk');

      // OPTIONAL MESSAGE row_contents = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "row_contents";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\Family';
      $descriptor->addField($f);

      // OPTIONAL BOOL reset_row = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "reset_row";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL commit_row = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "commit_row";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_contents> has a value
     *
     * @return boolean
     */
    public function hasRowContents(){
      return $this->_has(1);
    }
    
    /**
     * Clear <row_contents> value
     *
     * @return \google\bigtable\v1\ReadRowsResponse\Chunk
     */
    public function clearRowContents(){
      return $this->_clear(1);
    }
    
    /**
     * Get <row_contents> value
     *
     * @return \google\bigtable\v1\Family
     */
    public function getRowContents(){
      return $this->_get(1);
    }
    
    /**
     * Set <row_contents> value
     *
     * @param \google\bigtable\v1\Family $value
     * @return \google\bigtable\v1\ReadRowsResponse\Chunk
     */
    public function setRowContents(\google\bigtable\v1\Family $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <reset_row> has a value
     *
     * @return boolean
     */
    public function hasResetRow(){
      return $this->_has(2);
    }
    
    /**
     * Clear <reset_row> value
     *
     * @return \google\bigtable\v1\ReadRowsResponse\Chunk
     */
    public function clearResetRow(){
      return $this->_clear(2);
    }
    
    /**
     * Get <reset_row> value
     *
     * @return boolean
     */
    public function getResetRow(){
      return $this->_get(2);
    }
    
    /**
     * Set <reset_row> value
     *
     * @param boolean $value
     * @return \google\bigtable\v1\ReadRowsResponse\Chunk
     */
    public function setResetRow( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <commit_row> has a value
     *
     * @return boolean
     */
    public function hasCommitRow(){
      return $this->_has(3);
    }
    
    /**
     * Clear <commit_row> value
     *
     * @return \google\bigtable\v1\ReadRowsResponse\Chunk
     */
    public function clearCommitRow(){
      return $this->_clear(3);
    }
    
    /**
     * Get <commit_row> value
     *
     * @return boolean
     */
    public function getCommitRow(){
      return $this->_get(3);
    }
    
    /**
     * Set <commit_row> value
     *
     * @param boolean $value
     * @return \google\bigtable\v1\ReadRowsResponse\Chunk
     */
    public function setCommitRow( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class ReadRowsResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v1\ReadRowsResponse\Chunk[]  */
    public $chunks = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.ReadRowsResponse');

      // OPTIONAL BYTES row_key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE chunks = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "chunks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\ReadRowsResponse\Chunk';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v1\ReadRowsResponse
     */
    public function clearRowKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ReadRowsResponse
     */
    public function setRowKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <chunks> has a value
     *
     * @return boolean
     */
    public function hasChunks(){
      return $this->_has(2);
    }
    
    /**
     * Clear <chunks> value
     *
     * @return \google\bigtable\v1\ReadRowsResponse
     */
    public function clearChunks(){
      return $this->_clear(2);
    }
    
    /**
     * Get <chunks> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\ReadRowsResponse\Chunk
     */
    public function getChunks($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <chunks> value
     *
     * @param \google\bigtable\v1\ReadRowsResponse\Chunk $value
     * @return \google\bigtable\v1\ReadRowsResponse
     */
    public function setChunks(\google\bigtable\v1\ReadRowsResponse\Chunk $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <chunks>
     *
     * @return \google\bigtable\v1\ReadRowsResponse\Chunk[]
     */
    public function getChunksList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <chunks>
     *
     * @param \google\bigtable\v1\ReadRowsResponse\Chunk $value
     * @return \google\bigtable\v1\ReadRowsResponse
     */
    public function addChunks(\google\bigtable\v1\ReadRowsResponse\Chunk $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class SampleRowKeysRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.SampleRowKeysRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v1\SampleRowKeysRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\SampleRowKeysRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class SampleRowKeysResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $row_key = null;
    
    /**  @var int */
    public $offset_bytes = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.SampleRowKeysResponse');

      // OPTIONAL BYTES row_key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 offset_bytes = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "offset_bytes";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v1\SampleRowKeysResponse
     */
    public function clearRowKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\SampleRowKeysResponse
     */
    public function setRowKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <offset_bytes> has a value
     *
     * @return boolean
     */
    public function hasOffsetBytes(){
      return $this->_has(2);
    }
    
    /**
     * Clear <offset_bytes> value
     *
     * @return \google\bigtable\v1\SampleRowKeysResponse
     */
    public function clearOffsetBytes(){
      return $this->_clear(2);
    }
    
    /**
     * Get <offset_bytes> value
     *
     * @return int
     */
    public function getOffsetBytes(){
      return $this->_get(2);
    }
    
    /**
     * Set <offset_bytes> value
     *
     * @param int $value
     * @return \google\bigtable\v1\SampleRowKeysResponse
     */
    public function setOffsetBytes( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class MutateRowRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v1\Mutation[]  */
    public $mutations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.MutateRowRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES row_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE mutations = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v1\MutateRowRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\MutateRowRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v1\MutateRowRequest
     */
    public function clearRowKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\MutateRowRequest
     */
    public function setRowKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mutations> has a value
     *
     * @return boolean
     */
    public function hasMutations(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mutations> value
     *
     * @return \google\bigtable\v1\MutateRowRequest
     */
    public function clearMutations(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mutations> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\Mutation
     */
    public function getMutations($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <mutations> value
     *
     * @param \google\bigtable\v1\Mutation $value
     * @return \google\bigtable\v1\MutateRowRequest
     */
    public function setMutations(\google\bigtable\v1\Mutation $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <mutations>
     *
     * @return \google\bigtable\v1\Mutation[]
     */
    public function getMutationsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <mutations>
     *
     * @param \google\bigtable\v1\Mutation $value
     * @return \google\bigtable\v1\MutateRowRequest
     */
    public function addMutations(\google\bigtable\v1\Mutation $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\bigtable\v1\MutateRowsRequest {

  class Entry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v1\Mutation[]  */
    public $mutations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.MutateRowsRequest.Entry');

      // OPTIONAL BYTES row_key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE mutations = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v1\MutateRowsRequest\Entry
     */
    public function clearRowKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\MutateRowsRequest\Entry
     */
    public function setRowKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mutations> has a value
     *
     * @return boolean
     */
    public function hasMutations(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mutations> value
     *
     * @return \google\bigtable\v1\MutateRowsRequest\Entry
     */
    public function clearMutations(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mutations> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\Mutation
     */
    public function getMutations($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <mutations> value
     *
     * @param \google\bigtable\v1\Mutation $value
     * @return \google\bigtable\v1\MutateRowsRequest\Entry
     */
    public function setMutations(\google\bigtable\v1\Mutation $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <mutations>
     *
     * @return \google\bigtable\v1\Mutation[]
     */
    public function getMutationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <mutations>
     *
     * @param \google\bigtable\v1\Mutation $value
     * @return \google\bigtable\v1\MutateRowsRequest\Entry
     */
    public function addMutations(\google\bigtable\v1\Mutation $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class MutateRowsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var \google\bigtable\v1\MutateRowsRequest\Entry[]  */
    public $entries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.MutateRowsRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE entries = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\MutateRowsRequest\Entry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v1\MutateRowsRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\MutateRowsRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entries> has a value
     *
     * @return boolean
     */
    public function hasEntries(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entries> value
     *
     * @return \google\bigtable\v1\MutateRowsRequest
     */
    public function clearEntries(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entries> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\MutateRowsRequest\Entry
     */
    public function getEntries($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <entries> value
     *
     * @param \google\bigtable\v1\MutateRowsRequest\Entry $value
     * @return \google\bigtable\v1\MutateRowsRequest
     */
    public function setEntries(\google\bigtable\v1\MutateRowsRequest\Entry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <entries>
     *
     * @return \google\bigtable\v1\MutateRowsRequest\Entry[]
     */
    public function getEntriesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <entries>
     *
     * @param \google\bigtable\v1\MutateRowsRequest\Entry $value
     * @return \google\bigtable\v1\MutateRowsRequest
     */
    public function addEntries(\google\bigtable\v1\MutateRowsRequest\Entry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class MutateRowsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\rpc\Status[]  */
    public $statuses = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.MutateRowsResponse');

      // REPEATED MESSAGE statuses = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "statuses";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\rpc\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <statuses> has a value
     *
     * @return boolean
     */
    public function hasStatuses(){
      return $this->_has(1);
    }
    
    /**
     * Clear <statuses> value
     *
     * @return \google\bigtable\v1\MutateRowsResponse
     */
    public function clearStatuses(){
      return $this->_clear(1);
    }
    
    /**
     * Get <statuses> value
     *
     * @param int $idx
     * @return \google\rpc\Status
     */
    public function getStatuses($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <statuses> value
     *
     * @param \google\rpc\Status $value
     * @return \google\bigtable\v1\MutateRowsResponse
     */
    public function setStatuses(\google\rpc\Status $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <statuses>
     *
     * @return \google\rpc\Status[]
     */
    public function getStatusesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <statuses>
     *
     * @param \google\rpc\Status $value
     * @return \google\bigtable\v1\MutateRowsResponse
     */
    public function addStatuses(\google\rpc\Status $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class CheckAndMutateRowRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v1\RowFilter */
    public $predicate_filter = null;
    
    /**  @var \google\bigtable\v1\Mutation[]  */
    public $true_mutations = array();
    
    /**  @var \google\bigtable\v1\Mutation[]  */
    public $false_mutations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.CheckAndMutateRowRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES row_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE predicate_filter = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "predicate_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v1\RowFilter';
      $descriptor->addField($f);

      // REPEATED MESSAGE true_mutations = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "true_mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\Mutation';
      $descriptor->addField($f);

      // REPEATED MESSAGE false_mutations = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "false_mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function clearRowKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function setRowKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <predicate_filter> has a value
     *
     * @return boolean
     */
    public function hasPredicateFilter(){
      return $this->_has(6);
    }
    
    /**
     * Clear <predicate_filter> value
     *
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function clearPredicateFilter(){
      return $this->_clear(6);
    }
    
    /**
     * Get <predicate_filter> value
     *
     * @return \google\bigtable\v1\RowFilter
     */
    public function getPredicateFilter(){
      return $this->_get(6);
    }
    
    /**
     * Set <predicate_filter> value
     *
     * @param \google\bigtable\v1\RowFilter $value
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function setPredicateFilter(\google\bigtable\v1\RowFilter $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <true_mutations> has a value
     *
     * @return boolean
     */
    public function hasTrueMutations(){
      return $this->_has(4);
    }
    
    /**
     * Clear <true_mutations> value
     *
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function clearTrueMutations(){
      return $this->_clear(4);
    }
    
    /**
     * Get <true_mutations> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\Mutation
     */
    public function getTrueMutations($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <true_mutations> value
     *
     * @param \google\bigtable\v1\Mutation $value
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function setTrueMutations(\google\bigtable\v1\Mutation $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <true_mutations>
     *
     * @return \google\bigtable\v1\Mutation[]
     */
    public function getTrueMutationsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <true_mutations>
     *
     * @param \google\bigtable\v1\Mutation $value
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function addTrueMutations(\google\bigtable\v1\Mutation $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <false_mutations> has a value
     *
     * @return boolean
     */
    public function hasFalseMutations(){
      return $this->_has(5);
    }
    
    /**
     * Clear <false_mutations> value
     *
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function clearFalseMutations(){
      return $this->_clear(5);
    }
    
    /**
     * Get <false_mutations> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\Mutation
     */
    public function getFalseMutations($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <false_mutations> value
     *
     * @param \google\bigtable\v1\Mutation $value
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function setFalseMutations(\google\bigtable\v1\Mutation $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <false_mutations>
     *
     * @return \google\bigtable\v1\Mutation[]
     */
    public function getFalseMutationsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <false_mutations>
     *
     * @param \google\bigtable\v1\Mutation $value
     * @return \google\bigtable\v1\CheckAndMutateRowRequest
     */
    public function addFalseMutations(\google\bigtable\v1\Mutation $value){
     return $this->_add(5, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class CheckAndMutateRowResponse extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $predicate_matched = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.CheckAndMutateRowResponse');

      // OPTIONAL BOOL predicate_matched = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "predicate_matched";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <predicate_matched> has a value
     *
     * @return boolean
     */
    public function hasPredicateMatched(){
      return $this->_has(1);
    }
    
    /**
     * Clear <predicate_matched> value
     *
     * @return \google\bigtable\v1\CheckAndMutateRowResponse
     */
    public function clearPredicateMatched(){
      return $this->_clear(1);
    }
    
    /**
     * Get <predicate_matched> value
     *
     * @return boolean
     */
    public function getPredicateMatched(){
      return $this->_get(1);
    }
    
    /**
     * Set <predicate_matched> value
     *
     * @param boolean $value
     * @return \google\bigtable\v1\CheckAndMutateRowResponse
     */
    public function setPredicateMatched( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\v1 {

  class ReadModifyWriteRowRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v1\ReadModifyWriteRule[]  */
    public $rules = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v1.ReadModifyWriteRowRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES row_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE rules = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rules";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v1\ReadModifyWriteRule';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v1\ReadModifyWriteRowRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ReadModifyWriteRowRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v1\ReadModifyWriteRowRequest
     */
    public function clearRowKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v1\ReadModifyWriteRowRequest
     */
    public function setRowKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rules> has a value
     *
     * @return boolean
     */
    public function hasRules(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rules> value
     *
     * @return \google\bigtable\v1\ReadModifyWriteRowRequest
     */
    public function clearRules(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rules> value
     *
     * @param int $idx
     * @return \google\bigtable\v1\ReadModifyWriteRule
     */
    public function getRules($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <rules> value
     *
     * @param \google\bigtable\v1\ReadModifyWriteRule $value
     * @return \google\bigtable\v1\ReadModifyWriteRowRequest
     */
    public function setRules(\google\bigtable\v1\ReadModifyWriteRule $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <rules>
     *
     * @return \google\bigtable\v1\ReadModifyWriteRule[]
     */
    public function getRulesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <rules>
     *
     * @param \google\bigtable\v1\ReadModifyWriteRule $value
     * @return \google\bigtable\v1\ReadModifyWriteRowRequest
     */
    public function addRules(\google\bigtable\v1\ReadModifyWriteRule $value){
     return $this->_add(3, $value);
    }
  }
}

