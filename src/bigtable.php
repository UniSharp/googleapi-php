<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/bigtable/v2/bigtable.proto
//   Date: 2017-06-13 04:23:47

namespace google\bigtable\v2 {

  class ReadRowsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var \google\bigtable\v2\RowSet */
    public $rows = null;
    
    /**  @var \google\bigtable\v2\RowFilter */
    public $filter = null;
    
    /**  @var int */
    public $rows_limit = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.ReadRowsRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE rows = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "rows";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v2\RowSet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v2\RowFilter';
      $descriptor->addField($f);

      // OPTIONAL INT64 rows_limit = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "rows_limit";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v2\ReadRowsRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v2\ReadRowsRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <rows> has a value
     *
     * @return boolean
     */
    public function hasRows(){
      return $this->_has(2);
    }
    
    /**
     * Clear <rows> value
     *
     * @return \google\bigtable\v2\ReadRowsRequest
     */
    public function clearRows(){
      return $this->_clear(2);
    }
    
    /**
     * Get <rows> value
     *
     * @return \google\bigtable\v2\RowSet
     */
    public function getRows(){
      return $this->_get(2);
    }
    
    /**
     * Set <rows> value
     *
     * @param \google\bigtable\v2\RowSet $value
     * @return \google\bigtable\v2\ReadRowsRequest
     */
    public function setRows(\google\bigtable\v2\RowSet $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(3);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\bigtable\v2\ReadRowsRequest
     */
    public function clearFilter(){
      return $this->_clear(3);
    }
    
    /**
     * Get <filter> value
     *
     * @return \google\bigtable\v2\RowFilter
     */
    public function getFilter(){
      return $this->_get(3);
    }
    
    /**
     * Set <filter> value
     *
     * @param \google\bigtable\v2\RowFilter $value
     * @return \google\bigtable\v2\ReadRowsRequest
     */
    public function setFilter(\google\bigtable\v2\RowFilter $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <rows_limit> has a value
     *
     * @return boolean
     */
    public function hasRowsLimit(){
      return $this->_has(4);
    }
    
    /**
     * Clear <rows_limit> value
     *
     * @return \google\bigtable\v2\ReadRowsRequest
     */
    public function clearRowsLimit(){
      return $this->_clear(4);
    }
    
    /**
     * Get <rows_limit> value
     *
     * @return int
     */
    public function getRowsLimit(){
      return $this->_get(4);
    }
    
    /**
     * Set <rows_limit> value
     *
     * @param int $value
     * @return \google\bigtable\v2\ReadRowsRequest
     */
    public function setRowsLimit( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\bigtable\v2\ReadRowsResponse {

  class CellChunk extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\protobuf\StringValue */
    public $family_name = null;
    
    /**  @var \google\protobuf\BytesValue */
    public $qualifier = null;
    
    /**  @var int */
    public $timestamp_micros = null;
    
    /**  @var string[]  */
    public $labels = array();
    
    /**  @var string */
    public $value = null;
    
    /**  @var int */
    public $value_size = null;
    
    /**  @var boolean */
    public $reset_row = null;
    
    /**  @var boolean */
    public $commit_row = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.ReadRowsResponse.CellChunk');

      // OPTIONAL BYTES row_key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE family_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "family_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\StringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE qualifier = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "qualifier";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\BytesValue';
      $descriptor->addField($f);

      // OPTIONAL INT64 timestamp_micros = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "timestamp_micros";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING labels = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BYTES value = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 value_size = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "value_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL reset_row = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "reset_row";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL commit_row = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "commit_row";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function clearRowKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function setRowKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <family_name> has a value
     *
     * @return boolean
     */
    public function hasFamilyName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <family_name> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function clearFamilyName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <family_name> value
     *
     * @return \google\protobuf\StringValue
     */
    public function getFamilyName(){
      return $this->_get(2);
    }
    
    /**
     * Set <family_name> value
     *
     * @param \google\protobuf\StringValue $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function setFamilyName(\google\protobuf\StringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <qualifier> has a value
     *
     * @return boolean
     */
    public function hasQualifier(){
      return $this->_has(3);
    }
    
    /**
     * Clear <qualifier> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function clearQualifier(){
      return $this->_clear(3);
    }
    
    /**
     * Get <qualifier> value
     *
     * @return \google\protobuf\BytesValue
     */
    public function getQualifier(){
      return $this->_get(3);
    }
    
    /**
     * Set <qualifier> value
     *
     * @param \google\protobuf\BytesValue $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function setQualifier(\google\protobuf\BytesValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <timestamp_micros> has a value
     *
     * @return boolean
     */
    public function hasTimestampMicros(){
      return $this->_has(4);
    }
    
    /**
     * Clear <timestamp_micros> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function clearTimestampMicros(){
      return $this->_clear(4);
    }
    
    /**
     * Get <timestamp_micros> value
     *
     * @return int
     */
    public function getTimestampMicros(){
      return $this->_get(4);
    }
    
    /**
     * Set <timestamp_micros> value
     *
     * @param int $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function setTimestampMicros( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(5);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function clearLabels(){
      return $this->_clear(5);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return string
     */
    public function getLabels($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param string $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function setLabels( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return string[]
     */
    public function getLabelsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param string $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function addLabels( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(6);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function clearValue(){
      return $this->_clear(6);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(6);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function setValue( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <value_size> has a value
     *
     * @return boolean
     */
    public function hasValueSize(){
      return $this->_has(7);
    }
    
    /**
     * Clear <value_size> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function clearValueSize(){
      return $this->_clear(7);
    }
    
    /**
     * Get <value_size> value
     *
     * @return int
     */
    public function getValueSize(){
      return $this->_get(7);
    }
    
    /**
     * Set <value_size> value
     *
     * @param int $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function setValueSize( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <reset_row> has a value
     *
     * @return boolean
     */
    public function hasResetRow(){
      return $this->_has(8);
    }
    
    /**
     * Clear <reset_row> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function clearResetRow(){
      return $this->_clear(8);
    }
    
    /**
     * Get <reset_row> value
     *
     * @return boolean
     */
    public function getResetRow(){
      return $this->_get(8);
    }
    
    /**
     * Set <reset_row> value
     *
     * @param boolean $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function setResetRow( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <commit_row> has a value
     *
     * @return boolean
     */
    public function hasCommitRow(){
      return $this->_has(9);
    }
    
    /**
     * Clear <commit_row> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function clearCommitRow(){
      return $this->_clear(9);
    }
    
    /**
     * Get <commit_row> value
     *
     * @return boolean
     */
    public function getCommitRow(){
      return $this->_get(9);
    }
    
    /**
     * Set <commit_row> value
     *
     * @param boolean $value
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function setCommitRow( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class ReadRowsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\v2\ReadRowsResponse\CellChunk[]  */
    public $chunks = array();
    
    /**  @var string */
    public $last_scanned_row_key = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.ReadRowsResponse');

      // REPEATED MESSAGE chunks = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "chunks";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v2\ReadRowsResponse\CellChunk';
      $descriptor->addField($f);

      // OPTIONAL BYTES last_scanned_row_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "last_scanned_row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <chunks> has a value
     *
     * @return boolean
     */
    public function hasChunks(){
      return $this->_has(1);
    }
    
    /**
     * Clear <chunks> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse
     */
    public function clearChunks(){
      return $this->_clear(1);
    }
    
    /**
     * Get <chunks> value
     *
     * @param int $idx
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk
     */
    public function getChunks($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <chunks> value
     *
     * @param \google\bigtable\v2\ReadRowsResponse\CellChunk $value
     * @return \google\bigtable\v2\ReadRowsResponse
     */
    public function setChunks(\google\bigtable\v2\ReadRowsResponse\CellChunk $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <chunks>
     *
     * @return \google\bigtable\v2\ReadRowsResponse\CellChunk[]
     */
    public function getChunksList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <chunks>
     *
     * @param \google\bigtable\v2\ReadRowsResponse\CellChunk $value
     * @return \google\bigtable\v2\ReadRowsResponse
     */
    public function addChunks(\google\bigtable\v2\ReadRowsResponse\CellChunk $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <last_scanned_row_key> has a value
     *
     * @return boolean
     */
    public function hasLastScannedRowKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <last_scanned_row_key> value
     *
     * @return \google\bigtable\v2\ReadRowsResponse
     */
    public function clearLastScannedRowKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <last_scanned_row_key> value
     *
     * @return string
     */
    public function getLastScannedRowKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <last_scanned_row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v2\ReadRowsResponse
     */
    public function setLastScannedRowKey( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class SampleRowKeysRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.SampleRowKeysRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v2\SampleRowKeysRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v2\SampleRowKeysRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class SampleRowKeysResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $row_key = null;
    
    /**  @var int */
    public $offset_bytes = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.SampleRowKeysResponse');

      // OPTIONAL BYTES row_key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 offset_bytes = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "offset_bytes";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v2\SampleRowKeysResponse
     */
    public function clearRowKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v2\SampleRowKeysResponse
     */
    public function setRowKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <offset_bytes> has a value
     *
     * @return boolean
     */
    public function hasOffsetBytes(){
      return $this->_has(2);
    }
    
    /**
     * Clear <offset_bytes> value
     *
     * @return \google\bigtable\v2\SampleRowKeysResponse
     */
    public function clearOffsetBytes(){
      return $this->_clear(2);
    }
    
    /**
     * Get <offset_bytes> value
     *
     * @return int
     */
    public function getOffsetBytes(){
      return $this->_get(2);
    }
    
    /**
     * Set <offset_bytes> value
     *
     * @param int $value
     * @return \google\bigtable\v2\SampleRowKeysResponse
     */
    public function setOffsetBytes( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class MutateRowRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v2\Mutation[]  */
    public $mutations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.MutateRowRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES row_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE mutations = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v2\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v2\MutateRowRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v2\MutateRowRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v2\MutateRowRequest
     */
    public function clearRowKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v2\MutateRowRequest
     */
    public function setRowKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mutations> has a value
     *
     * @return boolean
     */
    public function hasMutations(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mutations> value
     *
     * @return \google\bigtable\v2\MutateRowRequest
     */
    public function clearMutations(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mutations> value
     *
     * @param int $idx
     * @return \google\bigtable\v2\Mutation
     */
    public function getMutations($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <mutations> value
     *
     * @param \google\bigtable\v2\Mutation $value
     * @return \google\bigtable\v2\MutateRowRequest
     */
    public function setMutations(\google\bigtable\v2\Mutation $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <mutations>
     *
     * @return \google\bigtable\v2\Mutation[]
     */
    public function getMutationsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <mutations>
     *
     * @param \google\bigtable\v2\Mutation $value
     * @return \google\bigtable\v2\MutateRowRequest
     */
    public function addMutations(\google\bigtable\v2\Mutation $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class MutateRowResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.MutateRowResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\bigtable\v2\MutateRowsRequest {

  class Entry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v2\Mutation[]  */
    public $mutations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.MutateRowsRequest.Entry');

      // OPTIONAL BYTES row_key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE mutations = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v2\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v2\MutateRowsRequest\Entry
     */
    public function clearRowKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v2\MutateRowsRequest\Entry
     */
    public function setRowKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mutations> has a value
     *
     * @return boolean
     */
    public function hasMutations(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mutations> value
     *
     * @return \google\bigtable\v2\MutateRowsRequest\Entry
     */
    public function clearMutations(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mutations> value
     *
     * @param int $idx
     * @return \google\bigtable\v2\Mutation
     */
    public function getMutations($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <mutations> value
     *
     * @param \google\bigtable\v2\Mutation $value
     * @return \google\bigtable\v2\MutateRowsRequest\Entry
     */
    public function setMutations(\google\bigtable\v2\Mutation $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <mutations>
     *
     * @return \google\bigtable\v2\Mutation[]
     */
    public function getMutationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <mutations>
     *
     * @param \google\bigtable\v2\Mutation $value
     * @return \google\bigtable\v2\MutateRowsRequest\Entry
     */
    public function addMutations(\google\bigtable\v2\Mutation $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class MutateRowsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var \google\bigtable\v2\MutateRowsRequest\Entry[]  */
    public $entries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.MutateRowsRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE entries = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v2\MutateRowsRequest\Entry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v2\MutateRowsRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v2\MutateRowsRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <entries> has a value
     *
     * @return boolean
     */
    public function hasEntries(){
      return $this->_has(2);
    }
    
    /**
     * Clear <entries> value
     *
     * @return \google\bigtable\v2\MutateRowsRequest
     */
    public function clearEntries(){
      return $this->_clear(2);
    }
    
    /**
     * Get <entries> value
     *
     * @param int $idx
     * @return \google\bigtable\v2\MutateRowsRequest\Entry
     */
    public function getEntries($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <entries> value
     *
     * @param \google\bigtable\v2\MutateRowsRequest\Entry $value
     * @return \google\bigtable\v2\MutateRowsRequest
     */
    public function setEntries(\google\bigtable\v2\MutateRowsRequest\Entry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <entries>
     *
     * @return \google\bigtable\v2\MutateRowsRequest\Entry[]
     */
    public function getEntriesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <entries>
     *
     * @param \google\bigtable\v2\MutateRowsRequest\Entry $value
     * @return \google\bigtable\v2\MutateRowsRequest
     */
    public function addEntries(\google\bigtable\v2\MutateRowsRequest\Entry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\bigtable\v2\MutateRowsResponse {

  class Entry extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $index = null;
    
    /**  @var \google\rpc\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.MutateRowsResponse.Entry');

      // OPTIONAL INT64 index = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "index";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\rpc\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <index> has a value
     *
     * @return boolean
     */
    public function hasIndex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <index> value
     *
     * @return \google\bigtable\v2\MutateRowsResponse\Entry
     */
    public function clearIndex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <index> value
     *
     * @return int
     */
    public function getIndex(){
      return $this->_get(1);
    }
    
    /**
     * Set <index> value
     *
     * @param int $value
     * @return \google\bigtable\v2\MutateRowsResponse\Entry
     */
    public function setIndex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\bigtable\v2\MutateRowsResponse\Entry
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return \google\rpc\Status
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param \google\rpc\Status $value
     * @return \google\bigtable\v2\MutateRowsResponse\Entry
     */
    public function setStatus(\google\rpc\Status $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class MutateRowsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\v2\MutateRowsResponse\Entry[]  */
    public $entries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.MutateRowsResponse');

      // REPEATED MESSAGE entries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v2\MutateRowsResponse\Entry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entries> has a value
     *
     * @return boolean
     */
    public function hasEntries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <entries> value
     *
     * @return \google\bigtable\v2\MutateRowsResponse
     */
    public function clearEntries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <entries> value
     *
     * @param int $idx
     * @return \google\bigtable\v2\MutateRowsResponse\Entry
     */
    public function getEntries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <entries> value
     *
     * @param \google\bigtable\v2\MutateRowsResponse\Entry $value
     * @return \google\bigtable\v2\MutateRowsResponse
     */
    public function setEntries(\google\bigtable\v2\MutateRowsResponse\Entry $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <entries>
     *
     * @return \google\bigtable\v2\MutateRowsResponse\Entry[]
     */
    public function getEntriesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <entries>
     *
     * @param \google\bigtable\v2\MutateRowsResponse\Entry $value
     * @return \google\bigtable\v2\MutateRowsResponse
     */
    public function addEntries(\google\bigtable\v2\MutateRowsResponse\Entry $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class CheckAndMutateRowRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v2\RowFilter */
    public $predicate_filter = null;
    
    /**  @var \google\bigtable\v2\Mutation[]  */
    public $true_mutations = array();
    
    /**  @var \google\bigtable\v2\Mutation[]  */
    public $false_mutations = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.CheckAndMutateRowRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES row_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE predicate_filter = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "predicate_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v2\RowFilter';
      $descriptor->addField($f);

      // REPEATED MESSAGE true_mutations = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "true_mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v2\Mutation';
      $descriptor->addField($f);

      // REPEATED MESSAGE false_mutations = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "false_mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v2\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function clearRowKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function setRowKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <predicate_filter> has a value
     *
     * @return boolean
     */
    public function hasPredicateFilter(){
      return $this->_has(6);
    }
    
    /**
     * Clear <predicate_filter> value
     *
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function clearPredicateFilter(){
      return $this->_clear(6);
    }
    
    /**
     * Get <predicate_filter> value
     *
     * @return \google\bigtable\v2\RowFilter
     */
    public function getPredicateFilter(){
      return $this->_get(6);
    }
    
    /**
     * Set <predicate_filter> value
     *
     * @param \google\bigtable\v2\RowFilter $value
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function setPredicateFilter(\google\bigtable\v2\RowFilter $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <true_mutations> has a value
     *
     * @return boolean
     */
    public function hasTrueMutations(){
      return $this->_has(4);
    }
    
    /**
     * Clear <true_mutations> value
     *
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function clearTrueMutations(){
      return $this->_clear(4);
    }
    
    /**
     * Get <true_mutations> value
     *
     * @param int $idx
     * @return \google\bigtable\v2\Mutation
     */
    public function getTrueMutations($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <true_mutations> value
     *
     * @param \google\bigtable\v2\Mutation $value
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function setTrueMutations(\google\bigtable\v2\Mutation $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <true_mutations>
     *
     * @return \google\bigtable\v2\Mutation[]
     */
    public function getTrueMutationsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <true_mutations>
     *
     * @param \google\bigtable\v2\Mutation $value
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function addTrueMutations(\google\bigtable\v2\Mutation $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <false_mutations> has a value
     *
     * @return boolean
     */
    public function hasFalseMutations(){
      return $this->_has(5);
    }
    
    /**
     * Clear <false_mutations> value
     *
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function clearFalseMutations(){
      return $this->_clear(5);
    }
    
    /**
     * Get <false_mutations> value
     *
     * @param int $idx
     * @return \google\bigtable\v2\Mutation
     */
    public function getFalseMutations($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <false_mutations> value
     *
     * @param \google\bigtable\v2\Mutation $value
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function setFalseMutations(\google\bigtable\v2\Mutation $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <false_mutations>
     *
     * @return \google\bigtable\v2\Mutation[]
     */
    public function getFalseMutationsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <false_mutations>
     *
     * @param \google\bigtable\v2\Mutation $value
     * @return \google\bigtable\v2\CheckAndMutateRowRequest
     */
    public function addFalseMutations(\google\bigtable\v2\Mutation $value){
     return $this->_add(5, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class CheckAndMutateRowResponse extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $predicate_matched = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.CheckAndMutateRowResponse');

      // OPTIONAL BOOL predicate_matched = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "predicate_matched";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <predicate_matched> has a value
     *
     * @return boolean
     */
    public function hasPredicateMatched(){
      return $this->_has(1);
    }
    
    /**
     * Clear <predicate_matched> value
     *
     * @return \google\bigtable\v2\CheckAndMutateRowResponse
     */
    public function clearPredicateMatched(){
      return $this->_clear(1);
    }
    
    /**
     * Get <predicate_matched> value
     *
     * @return boolean
     */
    public function getPredicateMatched(){
      return $this->_get(1);
    }
    
    /**
     * Set <predicate_matched> value
     *
     * @param boolean $value
     * @return \google\bigtable\v2\CheckAndMutateRowResponse
     */
    public function setPredicateMatched( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class ReadModifyWriteRowRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $table_name = null;
    
    /**  @var string */
    public $row_key = null;
    
    /**  @var \google\bigtable\v2\ReadModifyWriteRule[]  */
    public $rules = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.ReadModifyWriteRowRequest');

      // OPTIONAL STRING table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES row_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "row_key";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE rules = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "rules";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\v2\ReadModifyWriteRule';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \google\bigtable\v2\ReadModifyWriteRowRequest
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return string
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param string $value
     * @return \google\bigtable\v2\ReadModifyWriteRowRequest
     */
    public function setTableName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <row_key> has a value
     *
     * @return boolean
     */
    public function hasRowKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <row_key> value
     *
     * @return \google\bigtable\v2\ReadModifyWriteRowRequest
     */
    public function clearRowKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <row_key> value
     *
     * @return string
     */
    public function getRowKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <row_key> value
     *
     * @param string $value
     * @return \google\bigtable\v2\ReadModifyWriteRowRequest
     */
    public function setRowKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <rules> has a value
     *
     * @return boolean
     */
    public function hasRules(){
      return $this->_has(3);
    }
    
    /**
     * Clear <rules> value
     *
     * @return \google\bigtable\v2\ReadModifyWriteRowRequest
     */
    public function clearRules(){
      return $this->_clear(3);
    }
    
    /**
     * Get <rules> value
     *
     * @param int $idx
     * @return \google\bigtable\v2\ReadModifyWriteRule
     */
    public function getRules($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <rules> value
     *
     * @param \google\bigtable\v2\ReadModifyWriteRule $value
     * @return \google\bigtable\v2\ReadModifyWriteRowRequest
     */
    public function setRules(\google\bigtable\v2\ReadModifyWriteRule $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <rules>
     *
     * @return \google\bigtable\v2\ReadModifyWriteRule[]
     */
    public function getRulesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <rules>
     *
     * @param \google\bigtable\v2\ReadModifyWriteRule $value
     * @return \google\bigtable\v2\ReadModifyWriteRowRequest
     */
    public function addRules(\google\bigtable\v2\ReadModifyWriteRule $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class ReadModifyWriteRowResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\v2\Row */
    public $row = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.v2.ReadModifyWriteRowResponse');

      // OPTIONAL MESSAGE row = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "row";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\v2\Row';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row> has a value
     *
     * @return boolean
     */
    public function hasRow(){
      return $this->_has(1);
    }
    
    /**
     * Clear <row> value
     *
     * @return \google\bigtable\v2\ReadModifyWriteRowResponse
     */
    public function clearRow(){
      return $this->_clear(1);
    }
    
    /**
     * Get <row> value
     *
     * @return \google\bigtable\v2\Row
     */
    public function getRow(){
      return $this->_get(1);
    }
    
    /**
     * Set <row> value
     *
     * @param \google\bigtable\v2\Row $value
     * @return \google\bigtable\v2\ReadModifyWriteRowResponse
     */
    public function setRow(\google\bigtable\v2\Row $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\v2 {

  class BigtableClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\bigtable\v2\ReadRowsRequest $input
     */
    public function ReadRows($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/google.bigtable.v2.Bigtable/ReadRows', $argument, '\google\bigtable\v2\ReadRowsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\v2\SampleRowKeysRequest $input
     */
    public function SampleRowKeys($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/google.bigtable.v2.Bigtable/SampleRowKeys', $argument, '\google\bigtable\v2\SampleRowKeysResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\v2\MutateRowRequest $input
     */
    public function MutateRow(\google\bigtable\v2\MutateRowRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.v2.Bigtable/MutateRow', $argument, '\google\bigtable\v2\MutateRowResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\v2\MutateRowsRequest $input
     */
    public function MutateRows($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/google.bigtable.v2.Bigtable/MutateRows', $argument, '\google\bigtable\v2\MutateRowsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\v2\CheckAndMutateRowRequest $input
     */
    public function CheckAndMutateRow(\google\bigtable\v2\CheckAndMutateRowRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.v2.Bigtable/CheckAndMutateRow', $argument, '\google\bigtable\v2\CheckAndMutateRowResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\v2\ReadModifyWriteRowRequest $input
     */
    public function ReadModifyWriteRow(\google\bigtable\v2\ReadModifyWriteRowRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.v2.Bigtable/ReadModifyWriteRow', $argument, '\google\bigtable\v2\ReadModifyWriteRowResponse::deserialize', $metadata, $options);
    }
  }
}
