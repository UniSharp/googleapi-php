<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/genomics/v1alpha2/pipelines.proto

namespace Google\Genomics\V1alpha2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * LocalCopy defines how a remote file should be copied to and from the VM.
 * </pre>
 *
 * Protobuf type <code>google.genomics.v1alpha2.PipelineParameter.LocalCopy</code>
 */
class PipelineParameter_LocalCopy extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Required. The path within the user's docker container where
     * this input should be localized to and from, relative to the specified
     * disk's mount point. For example: file.txt,
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    private $path = '';
    /**
     * <pre>
     * Required. The name of the disk where this parameter is
     * located. Can be the name of one of the disks specified in the
     * Resources field, or "boot", which represents the Docker
     * instance's boot disk and has a mount point of `/`.
     * </pre>
     *
     * <code>string disk = 2;</code>
     */
    private $disk = '';

    public function __construct() {
        \GPBMetadata\Google\Genomics\V1Alpha2\Pipelines::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Required. The path within the user's docker container where
     * this input should be localized to and from, relative to the specified
     * disk's mount point. For example: file.txt,
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * <pre>
     * Required. The path within the user's docker container where
     * this input should be localized to and from, relative to the specified
     * disk's mount point. For example: file.txt,
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    public function setPath($var)
    {
        GPBUtil::checkString($var, True);
        $this->path = $var;
    }

    /**
     * <pre>
     * Required. The name of the disk where this parameter is
     * located. Can be the name of one of the disks specified in the
     * Resources field, or "boot", which represents the Docker
     * instance's boot disk and has a mount point of `/`.
     * </pre>
     *
     * <code>string disk = 2;</code>
     */
    public function getDisk()
    {
        return $this->disk;
    }

    /**
     * <pre>
     * Required. The name of the disk where this parameter is
     * located. Can be the name of one of the disks specified in the
     * Resources field, or "boot", which represents the Docker
     * instance's boot disk and has a mount point of `/`.
     * </pre>
     *
     * <code>string disk = 2;</code>
     */
    public function setDisk($var)
    {
        GPBUtil::checkString($var, True);
        $this->disk = $var;
    }

}

