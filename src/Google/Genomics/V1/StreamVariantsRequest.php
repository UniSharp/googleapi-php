<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/genomics/v1/variants.proto

namespace Google\Genomics\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * The stream variants request.
 * </pre>
 *
 * Protobuf type <code>google.genomics.v1.StreamVariantsRequest</code>
 */
class StreamVariantsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The Google Cloud project ID which will be billed
     * for this access. The caller must have WRITE access to this project.
     * Required.
     * </pre>
     *
     * <code>string project_id = 1;</code>
     */
    private $project_id = '';
    /**
     * <pre>
     * The variant set ID from which to stream variants.
     * </pre>
     *
     * <code>string variant_set_id = 2;</code>
     */
    private $variant_set_id = '';
    /**
     * <pre>
     * Only return variant calls which belong to call sets with these IDs.
     * Leaving this blank returns all variant calls.
     * </pre>
     *
     * <code>repeated string call_set_ids = 3;</code>
     */
    private $call_set_ids;
    /**
     * <pre>
     * Required. Only return variants in this reference sequence.
     * </pre>
     *
     * <code>string reference_name = 4;</code>
     */
    private $reference_name = '';
    /**
     * <pre>
     * The beginning of the window (0-based, inclusive) for which
     * overlapping variants should be returned.
     * </pre>
     *
     * <code>int64 start = 5;</code>
     */
    private $start = 0;
    /**
     * <pre>
     * The end of the window (0-based, exclusive) for which overlapping
     * variants should be returned.
     * </pre>
     *
     * <code>int64 end = 6;</code>
     */
    private $end = 0;

    public function __construct() {
        \GPBMetadata\Google\Genomics\V1\Variants::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The Google Cloud project ID which will be billed
     * for this access. The caller must have WRITE access to this project.
     * Required.
     * </pre>
     *
     * <code>string project_id = 1;</code>
     */
    public function getProjectId()
    {
        return $this->project_id;
    }

    /**
     * <pre>
     * The Google Cloud project ID which will be billed
     * for this access. The caller must have WRITE access to this project.
     * Required.
     * </pre>
     *
     * <code>string project_id = 1;</code>
     */
    public function setProjectId($var)
    {
        GPBUtil::checkString($var, True);
        $this->project_id = $var;
    }

    /**
     * <pre>
     * The variant set ID from which to stream variants.
     * </pre>
     *
     * <code>string variant_set_id = 2;</code>
     */
    public function getVariantSetId()
    {
        return $this->variant_set_id;
    }

    /**
     * <pre>
     * The variant set ID from which to stream variants.
     * </pre>
     *
     * <code>string variant_set_id = 2;</code>
     */
    public function setVariantSetId($var)
    {
        GPBUtil::checkString($var, True);
        $this->variant_set_id = $var;
    }

    /**
     * <pre>
     * Only return variant calls which belong to call sets with these IDs.
     * Leaving this blank returns all variant calls.
     * </pre>
     *
     * <code>repeated string call_set_ids = 3;</code>
     */
    public function getCallSetIds()
    {
        return $this->call_set_ids;
    }

    /**
     * <pre>
     * Only return variant calls which belong to call sets with these IDs.
     * Leaving this blank returns all variant calls.
     * </pre>
     *
     * <code>repeated string call_set_ids = 3;</code>
     */
    public function setCallSetIds(&$var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->call_set_ids = $arr;
    }

    /**
     * <pre>
     * Required. Only return variants in this reference sequence.
     * </pre>
     *
     * <code>string reference_name = 4;</code>
     */
    public function getReferenceName()
    {
        return $this->reference_name;
    }

    /**
     * <pre>
     * Required. Only return variants in this reference sequence.
     * </pre>
     *
     * <code>string reference_name = 4;</code>
     */
    public function setReferenceName($var)
    {
        GPBUtil::checkString($var, True);
        $this->reference_name = $var;
    }

    /**
     * <pre>
     * The beginning of the window (0-based, inclusive) for which
     * overlapping variants should be returned.
     * </pre>
     *
     * <code>int64 start = 5;</code>
     */
    public function getStart()
    {
        return $this->start;
    }

    /**
     * <pre>
     * The beginning of the window (0-based, inclusive) for which
     * overlapping variants should be returned.
     * </pre>
     *
     * <code>int64 start = 5;</code>
     */
    public function setStart($var)
    {
        GPBUtil::checkInt64($var);
        $this->start = $var;
    }

    /**
     * <pre>
     * The end of the window (0-based, exclusive) for which overlapping
     * variants should be returned.
     * </pre>
     *
     * <code>int64 end = 6;</code>
     */
    public function getEnd()
    {
        return $this->end;
    }

    /**
     * <pre>
     * The end of the window (0-based, exclusive) for which overlapping
     * variants should be returned.
     * </pre>
     *
     * <code>int64 end = 6;</code>
     */
    public function setEnd($var)
    {
        GPBUtil::checkInt64($var);
        $this->end = $var;
    }

}

