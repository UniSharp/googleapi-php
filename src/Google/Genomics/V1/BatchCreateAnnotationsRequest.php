<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/genomics/v1/annotations.proto

namespace Google\Genomics\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>google.genomics.v1.BatchCreateAnnotationsRequest</code>
 */
class BatchCreateAnnotationsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The annotations to be created. At most 4096 can be specified in a single
     * request.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
     */
    private $annotations;
    /**
     * <pre>
     * A unique request ID which enables the server to detect duplicated requests.
     * If provided, duplicated requests will result in the same response; if not
     * provided, duplicated requests may result in duplicated data. For a given
     * annotation set, callers should not reuse `request_id`s when writing
     * different batches of annotations - behavior in this case is undefined.
     * A common approach is to use a UUID. For batch jobs where worker crashes are
     * a possibility, consider using some unique variant of a worker or run ID.
     * </pre>
     *
     * <code>string request_id = 2;</code>
     */
    private $request_id = '';

    public function __construct() {
        \GPBMetadata\Google\Genomics\V1\Annotations::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The annotations to be created. At most 4096 can be specified in a single
     * request.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
     */
    public function getAnnotations()
    {
        return $this->annotations;
    }

    /**
     * <pre>
     * The annotations to be created. At most 4096 can be specified in a single
     * request.
     * </pre>
     *
     * <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
     */
    public function setAnnotations(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Genomics\V1\Annotation::class);
        $this->annotations = $var;
    }

    /**
     * <pre>
     * A unique request ID which enables the server to detect duplicated requests.
     * If provided, duplicated requests will result in the same response; if not
     * provided, duplicated requests may result in duplicated data. For a given
     * annotation set, callers should not reuse `request_id`s when writing
     * different batches of annotations - behavior in this case is undefined.
     * A common approach is to use a UUID. For batch jobs where worker crashes are
     * a possibility, consider using some unique variant of a worker or run ID.
     * </pre>
     *
     * <code>string request_id = 2;</code>
     */
    public function getRequestId()
    {
        return $this->request_id;
    }

    /**
     * <pre>
     * A unique request ID which enables the server to detect duplicated requests.
     * If provided, duplicated requests will result in the same response; if not
     * provided, duplicated requests may result in duplicated data. For a given
     * annotation set, callers should not reuse `request_id`s when writing
     * different batches of annotations - behavior in this case is undefined.
     * A common approach is to use a UUID. For batch jobs where worker crashes are
     * a possibility, consider using some unique variant of a worker or run ID.
     * </pre>
     *
     * <code>string request_id = 2;</code>
     */
    public function setRequestId($var)
    {
        GPBUtil::checkString($var, True);
        $this->request_id = $var;
    }

}

