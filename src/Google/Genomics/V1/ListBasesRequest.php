<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/genomics/v1/references.proto

namespace Google\Genomics\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>google.genomics.v1.ListBasesRequest</code>
 */
class ListBasesRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The ID of the reference.
     * </pre>
     *
     * <code>string reference_id = 1;</code>
     */
    private $reference_id = '';
    /**
     * <pre>
     * The start position (0-based) of this query. Defaults to 0.
     * </pre>
     *
     * <code>int64 start = 2;</code>
     */
    private $start = 0;
    /**
     * <pre>
     * The end position (0-based, exclusive) of this query. Defaults to the length
     * of this reference.
     * </pre>
     *
     * <code>int64 end = 3;</code>
     */
    private $end = 0;
    /**
     * <pre>
     * The continuation token, which is used to page through large result sets.
     * To get the next page of results, set this parameter to the value of
     * `nextPageToken` from the previous response.
     * </pre>
     *
     * <code>string page_token = 4;</code>
     */
    private $page_token = '';
    /**
     * <pre>
     * The maximum number of bases to return in a single page. If unspecified,
     * defaults to 200Kbp (kilo base pairs). The maximum value is 10Mbp (mega base
     * pairs).
     * </pre>
     *
     * <code>int32 page_size = 5;</code>
     */
    private $page_size = 0;

    public function __construct() {
        \GPBMetadata\Google\Genomics\V1\References::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The ID of the reference.
     * </pre>
     *
     * <code>string reference_id = 1;</code>
     */
    public function getReferenceId()
    {
        return $this->reference_id;
    }

    /**
     * <pre>
     * The ID of the reference.
     * </pre>
     *
     * <code>string reference_id = 1;</code>
     */
    public function setReferenceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->reference_id = $var;
    }

    /**
     * <pre>
     * The start position (0-based) of this query. Defaults to 0.
     * </pre>
     *
     * <code>int64 start = 2;</code>
     */
    public function getStart()
    {
        return $this->start;
    }

    /**
     * <pre>
     * The start position (0-based) of this query. Defaults to 0.
     * </pre>
     *
     * <code>int64 start = 2;</code>
     */
    public function setStart($var)
    {
        GPBUtil::checkInt64($var);
        $this->start = $var;
    }

    /**
     * <pre>
     * The end position (0-based, exclusive) of this query. Defaults to the length
     * of this reference.
     * </pre>
     *
     * <code>int64 end = 3;</code>
     */
    public function getEnd()
    {
        return $this->end;
    }

    /**
     * <pre>
     * The end position (0-based, exclusive) of this query. Defaults to the length
     * of this reference.
     * </pre>
     *
     * <code>int64 end = 3;</code>
     */
    public function setEnd($var)
    {
        GPBUtil::checkInt64($var);
        $this->end = $var;
    }

    /**
     * <pre>
     * The continuation token, which is used to page through large result sets.
     * To get the next page of results, set this parameter to the value of
     * `nextPageToken` from the previous response.
     * </pre>
     *
     * <code>string page_token = 4;</code>
     */
    public function getPageToken()
    {
        return $this->page_token;
    }

    /**
     * <pre>
     * The continuation token, which is used to page through large result sets.
     * To get the next page of results, set this parameter to the value of
     * `nextPageToken` from the previous response.
     * </pre>
     *
     * <code>string page_token = 4;</code>
     */
    public function setPageToken($var)
    {
        GPBUtil::checkString($var, True);
        $this->page_token = $var;
    }

    /**
     * <pre>
     * The maximum number of bases to return in a single page. If unspecified,
     * defaults to 200Kbp (kilo base pairs). The maximum value is 10Mbp (mega base
     * pairs).
     * </pre>
     *
     * <code>int32 page_size = 5;</code>
     */
    public function getPageSize()
    {
        return $this->page_size;
    }

    /**
     * <pre>
     * The maximum number of bases to return in a single page. If unspecified,
     * defaults to 200Kbp (kilo base pairs). The maximum value is 10Mbp (mega base
     * pairs).
     * </pre>
     *
     * <code>int32 page_size = 5;</code>
     */
    public function setPageSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->page_size = $var;
    }

}

