<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/build/v1/publish_build_event.proto

namespace Google\Devtools\Build\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Publishes 'lifecycle events' that update the high-level state of a build:
 * - BuildEnqueued: When a build is scheduled.
 * - InvocationAttemptStarted: When work for a build starts; there can be
 *     multiple invocations for a build (e.g. retries).
 * - InvocationAttemptCompleted: When work for a build finishes.
 * - BuildFinished: When a build is finished.
 * </pre>
 *
 * Protobuf type <code>google.devtools.build.v1.PublishLifecycleEventRequest</code>
 */
class PublishLifecycleEventRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The interactivity of this build.
     * </pre>
     *
     * <code>.google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel service_level = 1;</code>
     */
    private $service_level = 0;
    /**
     * <pre>
     * The lifecycle build event. If this is a build tool event, the RPC will fail
     * with INVALID_REQUEST.
     * </pre>
     *
     * <code>.google.devtools.build.v1.OrderedBuildEvent build_event = 2;</code>
     */
    private $build_event = null;
    /**
     * <pre>
     * If the next event for this build or invocation (depending on the event
     * type) hasn't been published after this duration from when {build_event}
     * is written to BES, consider this stream expired. If this field is not set,
     * BES backend will use its own default value.
     * </pre>
     *
     * <code>.google.protobuf.Duration stream_timeout = 3;</code>
     */
    private $stream_timeout = null;
    /**
     * <pre>
     * Additional information about a build request. These are define by the event
     * publishers, and the Build Event Service does not validate or interpret
     * them. They are used while notifying internal systems of new builds and
     * invocations if the OrderedBuildEvent.event type is
     * BuildEnqueued/InvocationAttemptStarted.
     * </pre>
     *
     * <code>repeated string notification_keywords = 4;</code>
     */
    private $notification_keywords;
    /**
     * <pre>
     * This field identifies which project (if any) the build is associated with.
     * </pre>
     *
     * <code>string project_id = 6;</code>
     */
    private $project_id = '';

    public function __construct() {
        \GPBMetadata\Google\Devtools\Build\V1\PublishBuildEvent::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The interactivity of this build.
     * </pre>
     *
     * <code>.google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel service_level = 1;</code>
     */
    public function getServiceLevel()
    {
        return $this->service_level;
    }

    /**
     * <pre>
     * The interactivity of this build.
     * </pre>
     *
     * <code>.google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel service_level = 1;</code>
     */
    public function setServiceLevel($var)
    {
        GPBUtil::checkEnum($var, \Google\Devtools\Build\V1\PublishLifecycleEventRequest_ServiceLevel::class);
        $this->service_level = $var;
    }

    /**
     * <pre>
     * The lifecycle build event. If this is a build tool event, the RPC will fail
     * with INVALID_REQUEST.
     * </pre>
     *
     * <code>.google.devtools.build.v1.OrderedBuildEvent build_event = 2;</code>
     */
    public function getBuildEvent()
    {
        return $this->build_event;
    }

    /**
     * <pre>
     * The lifecycle build event. If this is a build tool event, the RPC will fail
     * with INVALID_REQUEST.
     * </pre>
     *
     * <code>.google.devtools.build.v1.OrderedBuildEvent build_event = 2;</code>
     */
    public function setBuildEvent(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Build\V1\OrderedBuildEvent::class);
        $this->build_event = $var;
    }

    /**
     * <pre>
     * If the next event for this build or invocation (depending on the event
     * type) hasn't been published after this duration from when {build_event}
     * is written to BES, consider this stream expired. If this field is not set,
     * BES backend will use its own default value.
     * </pre>
     *
     * <code>.google.protobuf.Duration stream_timeout = 3;</code>
     */
    public function getStreamTimeout()
    {
        return $this->stream_timeout;
    }

    /**
     * <pre>
     * If the next event for this build or invocation (depending on the event
     * type) hasn't been published after this duration from when {build_event}
     * is written to BES, consider this stream expired. If this field is not set,
     * BES backend will use its own default value.
     * </pre>
     *
     * <code>.google.protobuf.Duration stream_timeout = 3;</code>
     */
    public function setStreamTimeout(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->stream_timeout = $var;
    }

    /**
     * <pre>
     * Additional information about a build request. These are define by the event
     * publishers, and the Build Event Service does not validate or interpret
     * them. They are used while notifying internal systems of new builds and
     * invocations if the OrderedBuildEvent.event type is
     * BuildEnqueued/InvocationAttemptStarted.
     * </pre>
     *
     * <code>repeated string notification_keywords = 4;</code>
     */
    public function getNotificationKeywords()
    {
        return $this->notification_keywords;
    }

    /**
     * <pre>
     * Additional information about a build request. These are define by the event
     * publishers, and the Build Event Service does not validate or interpret
     * them. They are used while notifying internal systems of new builds and
     * invocations if the OrderedBuildEvent.event type is
     * BuildEnqueued/InvocationAttemptStarted.
     * </pre>
     *
     * <code>repeated string notification_keywords = 4;</code>
     */
    public function setNotificationKeywords(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->notification_keywords = $var;
    }

    /**
     * <pre>
     * This field identifies which project (if any) the build is associated with.
     * </pre>
     *
     * <code>string project_id = 6;</code>
     */
    public function getProjectId()
    {
        return $this->project_id;
    }

    /**
     * <pre>
     * This field identifies which project (if any) the build is associated with.
     * </pre>
     *
     * <code>string project_id = 6;</code>
     */
    public function setProjectId($var)
    {
        GPBUtil::checkString($var, True);
        $this->project_id = $var;
    }

}

