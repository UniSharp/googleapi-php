<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/build/v1/build_events.proto

namespace Google\Devtools\Build\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * An event representing some state change that occured in the build. This
 * message does not include field for uniquely identifying an event.
 * </pre>
 *
 * Protobuf type <code>google.devtools.build.v1.BuildEvent</code>
 */
class BuildEvent extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The timestamp of this event.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp event_time = 1;</code>
     */
    private $event_time = null;
    protected $event;

    public function __construct() {
        \GPBMetadata\Google\Devtools\Build\V1\BuildEvents::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The timestamp of this event.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp event_time = 1;</code>
     */
    public function getEventTime()
    {
        return $this->event_time;
    }

    /**
     * <pre>
     * The timestamp of this event.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp event_time = 1;</code>
     */
    public function setEventTime(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->event_time = $var;
    }

    /**
     * <pre>
     * An invocation attempt has started.
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.InvocationAttemptStarted invocation_attempt_started = 51;</code>
     */
    public function getInvocationAttemptStarted()
    {
        return $this->readOneof(51);
    }

    /**
     * <pre>
     * An invocation attempt has started.
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.InvocationAttemptStarted invocation_attempt_started = 51;</code>
     */
    public function setInvocationAttemptStarted(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Build\V1\BuildEvent_InvocationAttemptStarted::class);
        $this->writeOneof(51, $var);
    }

    /**
     * <pre>
     * An invocation attempt has finished.
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.InvocationAttemptFinished invocation_attempt_finished = 52;</code>
     */
    public function getInvocationAttemptFinished()
    {
        return $this->readOneof(52);
    }

    /**
     * <pre>
     * An invocation attempt has finished.
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.InvocationAttemptFinished invocation_attempt_finished = 52;</code>
     */
    public function setInvocationAttemptFinished(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Build\V1\BuildEvent_InvocationAttemptFinished::class);
        $this->writeOneof(52, $var);
    }

    /**
     * <pre>
     * The build is enqueued (just inserted to the build queue or put back
     * into the build queue due to a previous build failure).
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.BuildEnqueued build_enqueued = 53;</code>
     */
    public function getBuildEnqueued()
    {
        return $this->readOneof(53);
    }

    /**
     * <pre>
     * The build is enqueued (just inserted to the build queue or put back
     * into the build queue due to a previous build failure).
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.BuildEnqueued build_enqueued = 53;</code>
     */
    public function setBuildEnqueued(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Build\V1\BuildEvent_BuildEnqueued::class);
        $this->writeOneof(53, $var);
    }

    /**
     * <pre>
     * The build has finished. Set when the build is terminated.
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.BuildFinished build_finished = 55;</code>
     */
    public function getBuildFinished()
    {
        return $this->readOneof(55);
    }

    /**
     * <pre>
     * The build has finished. Set when the build is terminated.
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.BuildFinished build_finished = 55;</code>
     */
    public function setBuildFinished(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Build\V1\BuildEvent_BuildFinished::class);
        $this->writeOneof(55, $var);
    }

    /**
     * <pre>
     * An event containing printed text.
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.ConsoleOutput console_output = 56;</code>
     */
    public function getConsoleOutput()
    {
        return $this->readOneof(56);
    }

    /**
     * <pre>
     * An event containing printed text.
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.ConsoleOutput console_output = 56;</code>
     */
    public function setConsoleOutput(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Build\V1\BuildEvent_ConsoleOutput::class);
        $this->writeOneof(56, $var);
    }

    /**
     * <pre>
     * Indicates the end of a build event stream (with the same StreamId) from
     * a build component executing the requested build task.
     * *** This field does not indicate the WatchBuild RPC is finished. ***
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished component_stream_finished = 59;</code>
     */
    public function getComponentStreamFinished()
    {
        return $this->readOneof(59);
    }

    /**
     * <pre>
     * Indicates the end of a build event stream (with the same StreamId) from
     * a build component executing the requested build task.
     * *** This field does not indicate the WatchBuild RPC is finished. ***
     * </pre>
     *
     * <code>.google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished component_stream_finished = 59;</code>
     */
    public function setComponentStreamFinished(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Build\V1\BuildEvent_BuildComponentStreamFinished::class);
        $this->writeOneof(59, $var);
    }

    /**
     * <pre>
     * Structured build event generated by Bazel about its execution progress.
     * </pre>
     *
     * <code>.google.protobuf.Any bazel_event = 60;</code>
     */
    public function getBazelEvent()
    {
        return $this->readOneof(60);
    }

    /**
     * <pre>
     * Structured build event generated by Bazel about its execution progress.
     * </pre>
     *
     * <code>.google.protobuf.Any bazel_event = 60;</code>
     */
    public function setBazelEvent(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->writeOneof(60, $var);
    }

    /**
     * <pre>
     * An event that contains supplemental tool-specific information about
     * build execution.
     * </pre>
     *
     * <code>.google.protobuf.Any build_execution_event = 61;</code>
     */
    public function getBuildExecutionEvent()
    {
        return $this->readOneof(61);
    }

    /**
     * <pre>
     * An event that contains supplemental tool-specific information about
     * build execution.
     * </pre>
     *
     * <code>.google.protobuf.Any build_execution_event = 61;</code>
     */
    public function setBuildExecutionEvent(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->writeOneof(61, $var);
    }

    /**
     * <pre>
     * An event that contains supplemental tool-specific information about
     * source fetching.
     * </pre>
     *
     * <code>.google.protobuf.Any source_fetch_event = 62;</code>
     */
    public function getSourceFetchEvent()
    {
        return $this->readOneof(62);
    }

    /**
     * <pre>
     * An event that contains supplemental tool-specific information about
     * source fetching.
     * </pre>
     *
     * <code>.google.protobuf.Any source_fetch_event = 62;</code>
     */
    public function setSourceFetchEvent(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->writeOneof(62, $var);
    }

    public function getEvent()
    {
        return $this->whichOneof("event");
    }

}

