<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/cloudbuild/v1/cloudbuild.proto

namespace Google\Devtools\Cloudbuild\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * BuiltImage describes an image built by the pipeline.
 * </pre>
 *
 * Protobuf type <code>google.devtools.cloudbuild.v1.BuiltImage</code>
 */
class BuiltImage extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Name used to push the container image to Google Container Registry, as
     * presented to `docker push`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    private $name = '';
    /**
     * <pre>
     * Docker Registry 2.0 digest.
     * </pre>
     *
     * <code>string digest = 3;</code>
     */
    private $digest = '';

    public function __construct() {
        \GPBMetadata\Google\Devtools\Cloudbuild\V1\Cloudbuild::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Name used to push the container image to Google Container Registry, as
     * presented to `docker push`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * <pre>
     * Name used to push the container image to Google Container Registry, as
     * presented to `docker push`.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;
    }

    /**
     * <pre>
     * Docker Registry 2.0 digest.
     * </pre>
     *
     * <code>string digest = 3;</code>
     */
    public function getDigest()
    {
        return $this->digest;
    }

    /**
     * <pre>
     * Docker Registry 2.0 digest.
     * </pre>
     *
     * <code>string digest = 3;</code>
     */
    public function setDigest($var)
    {
        GPBUtil::checkString($var, True);
        $this->digest = $var;
    }

}

