<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/dataproc/v1/clusters.proto

namespace Google\Cloud\Dataproc\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * The cluster config.
 * </pre>
 *
 * Protobuf type <code>google.cloud.dataproc.v1.ClusterConfig</code>
 */
class ClusterConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * [Optional] A Google Cloud Storage staging bucket used for sharing generated
     * SSH keys and config. If you do not specify a staging bucket, Cloud
     * Dataproc will determine an appropriate Cloud Storage location (US,
     * ASIA, or EU) for your cluster's staging bucket according to the Google
     * Compute Engine zone where your cluster is deployed, and then it will create
     * and manage this project-level, per-location bucket for you.
     * </pre>
     *
     * <code>string config_bucket = 1;</code>
     */
    private $config_bucket = '';
    /**
     * <pre>
     * [Required] The shared Google Compute Engine config settings for
     * all instances in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;</code>
     */
    private $gce_cluster_config = null;
    /**
     * <pre>
     * [Optional] The Google Compute Engine config settings for
     * the master instance in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;</code>
     */
    private $master_config = null;
    /**
     * <pre>
     * [Optional] The Google Compute Engine config settings for
     * worker instances in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;</code>
     */
    private $worker_config = null;
    /**
     * <pre>
     * [Optional] The Google Compute Engine config settings for
     * additional worker instances in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;</code>
     */
    private $secondary_worker_config = null;
    /**
     * <pre>
     * [Optional] The config settings for software inside the cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.SoftwareConfig software_config = 13;</code>
     */
    private $software_config = null;
    /**
     * <pre>
     * [Optional] Commands to execute on each node after config is
     * completed. By default, executables are run on master and all worker nodes.
     * You can test a node's &lt;code&gt;role&lt;/code&gt; metadata to run an executable on
     * a master or worker node, as shown below using `curl` (you can also use `wget`):
     *     ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role)
     *     if [[ "${ROLE}" == 'Master' ]]; then
     *       ... master specific actions ...
     *     else
     *       ... worker specific actions ...
     *     fi
     * </pre>
     *
     * <code>repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;</code>
     */
    private $initialization_actions;

    public function __construct() {
        \GPBMetadata\Google\Cloud\Dataproc\V1\Clusters::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * [Optional] A Google Cloud Storage staging bucket used for sharing generated
     * SSH keys and config. If you do not specify a staging bucket, Cloud
     * Dataproc will determine an appropriate Cloud Storage location (US,
     * ASIA, or EU) for your cluster's staging bucket according to the Google
     * Compute Engine zone where your cluster is deployed, and then it will create
     * and manage this project-level, per-location bucket for you.
     * </pre>
     *
     * <code>string config_bucket = 1;</code>
     */
    public function getConfigBucket()
    {
        return $this->config_bucket;
    }

    /**
     * <pre>
     * [Optional] A Google Cloud Storage staging bucket used for sharing generated
     * SSH keys and config. If you do not specify a staging bucket, Cloud
     * Dataproc will determine an appropriate Cloud Storage location (US,
     * ASIA, or EU) for your cluster's staging bucket according to the Google
     * Compute Engine zone where your cluster is deployed, and then it will create
     * and manage this project-level, per-location bucket for you.
     * </pre>
     *
     * <code>string config_bucket = 1;</code>
     */
    public function setConfigBucket($var)
    {
        GPBUtil::checkString($var, True);
        $this->config_bucket = $var;
    }

    /**
     * <pre>
     * [Required] The shared Google Compute Engine config settings for
     * all instances in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;</code>
     */
    public function getGceClusterConfig()
    {
        return $this->gce_cluster_config;
    }

    /**
     * <pre>
     * [Required] The shared Google Compute Engine config settings for
     * all instances in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;</code>
     */
    public function setGceClusterConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\GceClusterConfig::class);
        $this->gce_cluster_config = $var;
    }

    /**
     * <pre>
     * [Optional] The Google Compute Engine config settings for
     * the master instance in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;</code>
     */
    public function getMasterConfig()
    {
        return $this->master_config;
    }

    /**
     * <pre>
     * [Optional] The Google Compute Engine config settings for
     * the master instance in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;</code>
     */
    public function setMasterConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\InstanceGroupConfig::class);
        $this->master_config = $var;
    }

    /**
     * <pre>
     * [Optional] The Google Compute Engine config settings for
     * worker instances in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;</code>
     */
    public function getWorkerConfig()
    {
        return $this->worker_config;
    }

    /**
     * <pre>
     * [Optional] The Google Compute Engine config settings for
     * worker instances in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;</code>
     */
    public function setWorkerConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\InstanceGroupConfig::class);
        $this->worker_config = $var;
    }

    /**
     * <pre>
     * [Optional] The Google Compute Engine config settings for
     * additional worker instances in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;</code>
     */
    public function getSecondaryWorkerConfig()
    {
        return $this->secondary_worker_config;
    }

    /**
     * <pre>
     * [Optional] The Google Compute Engine config settings for
     * additional worker instances in a cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;</code>
     */
    public function setSecondaryWorkerConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\InstanceGroupConfig::class);
        $this->secondary_worker_config = $var;
    }

    /**
     * <pre>
     * [Optional] The config settings for software inside the cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.SoftwareConfig software_config = 13;</code>
     */
    public function getSoftwareConfig()
    {
        return $this->software_config;
    }

    /**
     * <pre>
     * [Optional] The config settings for software inside the cluster.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.SoftwareConfig software_config = 13;</code>
     */
    public function setSoftwareConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\SoftwareConfig::class);
        $this->software_config = $var;
    }

    /**
     * <pre>
     * [Optional] Commands to execute on each node after config is
     * completed. By default, executables are run on master and all worker nodes.
     * You can test a node's &lt;code&gt;role&lt;/code&gt; metadata to run an executable on
     * a master or worker node, as shown below using `curl` (you can also use `wget`):
     *     ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role)
     *     if [[ "${ROLE}" == 'Master' ]]; then
     *       ... master specific actions ...
     *     else
     *       ... worker specific actions ...
     *     fi
     * </pre>
     *
     * <code>repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;</code>
     */
    public function getInitializationActions()
    {
        return $this->initialization_actions;
    }

    /**
     * <pre>
     * [Optional] Commands to execute on each node after config is
     * completed. By default, executables are run on master and all worker nodes.
     * You can test a node's &lt;code&gt;role&lt;/code&gt; metadata to run an executable on
     * a master or worker node, as shown below using `curl` (you can also use `wget`):
     *     ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role)
     *     if [[ "${ROLE}" == 'Master' ]]; then
     *       ... master specific actions ...
     *     else
     *       ... worker specific actions ...
     *     fi
     * </pre>
     *
     * <code>repeated .google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;</code>
     */
    public function setInitializationActions(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Cloud\Dataproc\V1\NodeInitializationAction::class);
        $this->initialization_actions = $var;
    }

}

