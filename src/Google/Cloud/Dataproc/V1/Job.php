<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/dataproc/v1/jobs.proto

namespace Google\Cloud\Dataproc\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A Cloud Dataproc job resource.
 * </pre>
 *
 * Protobuf type <code>google.cloud.dataproc.v1.Job</code>
 */
class Job extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * [Optional] The fully qualified reference to the job, which can be used to
     * obtain the equivalent REST path of the job resource. If this property
     * is not specified when a job is created, the server generates a
     * &lt;code&gt;job_id&lt;/code&gt;.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.JobReference reference = 1;</code>
     */
    private $reference = null;
    /**
     * <pre>
     * [Required] Job information, including how, when, and where to
     * run the job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.JobPlacement placement = 2;</code>
     */
    private $placement = null;
    /**
     * <pre>
     * [Output-only] The job status. Additional application-specific
     * status information may be contained in the &lt;code&gt;type_job&lt;/code&gt;
     * and &lt;code&gt;yarn_applications&lt;/code&gt; fields.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.JobStatus status = 8;</code>
     */
    private $status = null;
    /**
     * <pre>
     * [Output-only] The previous job status.
     * </pre>
     *
     * <code>repeated .google.cloud.dataproc.v1.JobStatus status_history = 13;</code>
     */
    private $status_history;
    /**
     * <pre>
     * [Output-only] A URI pointing to the location of the stdout of the job's
     * driver program.
     * </pre>
     *
     * <code>string driver_output_resource_uri = 17;</code>
     */
    private $driver_output_resource_uri = '';
    /**
     * <pre>
     * [Output-only] If present, the location of miscellaneous control files
     * which may be used as part of job setup and handling. If not present,
     * control files may be placed in the same location as `driver_output_uri`.
     * </pre>
     *
     * <code>string driver_control_files_uri = 15;</code>
     */
    private $driver_control_files_uri = '';
    protected $type_job;

    public function __construct() {
        \GPBMetadata\Google\Cloud\Dataproc\V1\Jobs::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * [Optional] The fully qualified reference to the job, which can be used to
     * obtain the equivalent REST path of the job resource. If this property
     * is not specified when a job is created, the server generates a
     * &lt;code&gt;job_id&lt;/code&gt;.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.JobReference reference = 1;</code>
     */
    public function getReference()
    {
        return $this->reference;
    }

    /**
     * <pre>
     * [Optional] The fully qualified reference to the job, which can be used to
     * obtain the equivalent REST path of the job resource. If this property
     * is not specified when a job is created, the server generates a
     * &lt;code&gt;job_id&lt;/code&gt;.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.JobReference reference = 1;</code>
     */
    public function setReference(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\JobReference::class);
        $this->reference = $var;
    }

    /**
     * <pre>
     * [Required] Job information, including how, when, and where to
     * run the job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.JobPlacement placement = 2;</code>
     */
    public function getPlacement()
    {
        return $this->placement;
    }

    /**
     * <pre>
     * [Required] Job information, including how, when, and where to
     * run the job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.JobPlacement placement = 2;</code>
     */
    public function setPlacement(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\JobPlacement::class);
        $this->placement = $var;
    }

    /**
     * <pre>
     * Job is a Hadoop job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.HadoopJob hadoop_job = 3;</code>
     */
    public function getHadoopJob()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * Job is a Hadoop job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.HadoopJob hadoop_job = 3;</code>
     */
    public function setHadoopJob(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\HadoopJob::class);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * Job is a Spark job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.SparkJob spark_job = 4;</code>
     */
    public function getSparkJob()
    {
        return $this->readOneof(4);
    }

    /**
     * <pre>
     * Job is a Spark job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.SparkJob spark_job = 4;</code>
     */
    public function setSparkJob(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\SparkJob::class);
        $this->writeOneof(4, $var);
    }

    /**
     * <pre>
     * Job is a Pyspark job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.PySparkJob pyspark_job = 5;</code>
     */
    public function getPysparkJob()
    {
        return $this->readOneof(5);
    }

    /**
     * <pre>
     * Job is a Pyspark job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.PySparkJob pyspark_job = 5;</code>
     */
    public function setPysparkJob(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\PySparkJob::class);
        $this->writeOneof(5, $var);
    }

    /**
     * <pre>
     * Job is a Hive job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.HiveJob hive_job = 6;</code>
     */
    public function getHiveJob()
    {
        return $this->readOneof(6);
    }

    /**
     * <pre>
     * Job is a Hive job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.HiveJob hive_job = 6;</code>
     */
    public function setHiveJob(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\HiveJob::class);
        $this->writeOneof(6, $var);
    }

    /**
     * <pre>
     * Job is a Pig job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.PigJob pig_job = 7;</code>
     */
    public function getPigJob()
    {
        return $this->readOneof(7);
    }

    /**
     * <pre>
     * Job is a Pig job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.PigJob pig_job = 7;</code>
     */
    public function setPigJob(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\PigJob::class);
        $this->writeOneof(7, $var);
    }

    /**
     * <pre>
     * Job is a SparkSql job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.SparkSqlJob spark_sql_job = 12;</code>
     */
    public function getSparkSqlJob()
    {
        return $this->readOneof(12);
    }

    /**
     * <pre>
     * Job is a SparkSql job.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.SparkSqlJob spark_sql_job = 12;</code>
     */
    public function setSparkSqlJob(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\SparkSqlJob::class);
        $this->writeOneof(12, $var);
    }

    /**
     * <pre>
     * [Output-only] The job status. Additional application-specific
     * status information may be contained in the &lt;code&gt;type_job&lt;/code&gt;
     * and &lt;code&gt;yarn_applications&lt;/code&gt; fields.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.JobStatus status = 8;</code>
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * <pre>
     * [Output-only] The job status. Additional application-specific
     * status information may be contained in the &lt;code&gt;type_job&lt;/code&gt;
     * and &lt;code&gt;yarn_applications&lt;/code&gt; fields.
     * </pre>
     *
     * <code>.google.cloud.dataproc.v1.JobStatus status = 8;</code>
     */
    public function setStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Dataproc\V1\JobStatus::class);
        $this->status = $var;
    }

    /**
     * <pre>
     * [Output-only] The previous job status.
     * </pre>
     *
     * <code>repeated .google.cloud.dataproc.v1.JobStatus status_history = 13;</code>
     */
    public function getStatusHistory()
    {
        return $this->status_history;
    }

    /**
     * <pre>
     * [Output-only] The previous job status.
     * </pre>
     *
     * <code>repeated .google.cloud.dataproc.v1.JobStatus status_history = 13;</code>
     */
    public function setStatusHistory(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Cloud\Dataproc\V1\JobStatus::class);
        $this->status_history = $var;
    }

    /**
     * <pre>
     * [Output-only] A URI pointing to the location of the stdout of the job's
     * driver program.
     * </pre>
     *
     * <code>string driver_output_resource_uri = 17;</code>
     */
    public function getDriverOutputResourceUri()
    {
        return $this->driver_output_resource_uri;
    }

    /**
     * <pre>
     * [Output-only] A URI pointing to the location of the stdout of the job's
     * driver program.
     * </pre>
     *
     * <code>string driver_output_resource_uri = 17;</code>
     */
    public function setDriverOutputResourceUri($var)
    {
        GPBUtil::checkString($var, True);
        $this->driver_output_resource_uri = $var;
    }

    /**
     * <pre>
     * [Output-only] If present, the location of miscellaneous control files
     * which may be used as part of job setup and handling. If not present,
     * control files may be placed in the same location as `driver_output_uri`.
     * </pre>
     *
     * <code>string driver_control_files_uri = 15;</code>
     */
    public function getDriverControlFilesUri()
    {
        return $this->driver_control_files_uri;
    }

    /**
     * <pre>
     * [Output-only] If present, the location of miscellaneous control files
     * which may be used as part of job setup and handling. If not present,
     * control files may be placed in the same location as `driver_output_uri`.
     * </pre>
     *
     * <code>string driver_control_files_uri = 15;</code>
     */
    public function setDriverControlFilesUri($var)
    {
        GPBUtil::checkString($var, True);
        $this->driver_control_files_uri = $var;
    }

    public function getTypeJob()
    {
        return $this->type_job;
    }

}

