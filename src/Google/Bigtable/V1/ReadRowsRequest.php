<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/v1/bigtable_service_messages.proto

namespace Google\Bigtable\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Request message for BigtableServer.ReadRows.
 * </pre>
 *
 * Protobuf type <code>google.bigtable.v1.ReadRowsRequest</code>
 */
class ReadRowsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The unique name of the table from which to read.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    private $table_name = '';
    /**
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     *
     * <code>.google.bigtable.v1.RowFilter filter = 5;</code>
     */
    private $filter = null;
    /**
     * <pre>
     * By default, rows are read sequentially, producing results which are
     * guaranteed to arrive in increasing row order. Setting
     * "allow_row_interleaving" to true allows multiple rows to be interleaved in
     * the response stream, which increases throughput but breaks this guarantee,
     * and may force the client to use more memory to buffer partially-received
     * rows. Cannot be set to true when specifying "num_rows_limit".
     * </pre>
     *
     * <code>bool allow_row_interleaving = 6;</code>
     */
    private $allow_row_interleaving = false;
    /**
     * <pre>
     * The read will terminate after committing to N rows' worth of results. The
     * default (zero) is to return all results.
     * Note that "allow_row_interleaving" cannot be set to true when this is set.
     * </pre>
     *
     * <code>int64 num_rows_limit = 7;</code>
     */
    private $num_rows_limit = 0;
    protected $target;

    public function __construct() {
        \GPBMetadata\Google\Bigtable\V1\BigtableServiceMessages::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The unique name of the table from which to read.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    public function getTableName()
    {
        return $this->table_name;
    }

    /**
     * <pre>
     * The unique name of the table from which to read.
     * </pre>
     *
     * <code>string table_name = 1;</code>
     */
    public function setTableName($var)
    {
        GPBUtil::checkString($var, True);
        $this->table_name = $var;
    }

    /**
     * <pre>
     * The key of a single row from which to read.
     * </pre>
     *
     * <code>bytes row_key = 2;</code>
     */
    public function getRowKey()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * The key of a single row from which to read.
     * </pre>
     *
     * <code>bytes row_key = 2;</code>
     */
    public function setRowKey($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(2, $var);
    }

    /**
     * <pre>
     * A range of rows from which to read.
     * </pre>
     *
     * <code>.google.bigtable.v1.RowRange row_range = 3;</code>
     */
    public function getRowRange()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * A range of rows from which to read.
     * </pre>
     *
     * <code>.google.bigtable.v1.RowRange row_range = 3;</code>
     */
    public function setRowRange(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Bigtable\V1\RowRange::class);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     *
     * <code>.google.bigtable.v1.RowSet row_set = 8;</code>
     */
    public function getRowSet()
    {
        return $this->readOneof(8);
    }

    /**
     * <pre>
     * A set of rows from which to read. Entries need not be in order, and will
     * be deduplicated before reading.
     * The total serialized size of the set must not exceed 1MB.
     * </pre>
     *
     * <code>.google.bigtable.v1.RowSet row_set = 8;</code>
     */
    public function setRowSet(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Bigtable\V1\RowSet::class);
        $this->writeOneof(8, $var);
    }

    /**
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     *
     * <code>.google.bigtable.v1.RowFilter filter = 5;</code>
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * <pre>
     * The filter to apply to the contents of the specified row(s). If unset,
     * reads the entire table.
     * </pre>
     *
     * <code>.google.bigtable.v1.RowFilter filter = 5;</code>
     */
    public function setFilter(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Bigtable\V1\RowFilter::class);
        $this->filter = $var;
    }

    /**
     * <pre>
     * By default, rows are read sequentially, producing results which are
     * guaranteed to arrive in increasing row order. Setting
     * "allow_row_interleaving" to true allows multiple rows to be interleaved in
     * the response stream, which increases throughput but breaks this guarantee,
     * and may force the client to use more memory to buffer partially-received
     * rows. Cannot be set to true when specifying "num_rows_limit".
     * </pre>
     *
     * <code>bool allow_row_interleaving = 6;</code>
     */
    public function getAllowRowInterleaving()
    {
        return $this->allow_row_interleaving;
    }

    /**
     * <pre>
     * By default, rows are read sequentially, producing results which are
     * guaranteed to arrive in increasing row order. Setting
     * "allow_row_interleaving" to true allows multiple rows to be interleaved in
     * the response stream, which increases throughput but breaks this guarantee,
     * and may force the client to use more memory to buffer partially-received
     * rows. Cannot be set to true when specifying "num_rows_limit".
     * </pre>
     *
     * <code>bool allow_row_interleaving = 6;</code>
     */
    public function setAllowRowInterleaving($var)
    {
        GPBUtil::checkBool($var);
        $this->allow_row_interleaving = $var;
    }

    /**
     * <pre>
     * The read will terminate after committing to N rows' worth of results. The
     * default (zero) is to return all results.
     * Note that "allow_row_interleaving" cannot be set to true when this is set.
     * </pre>
     *
     * <code>int64 num_rows_limit = 7;</code>
     */
    public function getNumRowsLimit()
    {
        return $this->num_rows_limit;
    }

    /**
     * <pre>
     * The read will terminate after committing to N rows' worth of results. The
     * default (zero) is to return all results.
     * Note that "allow_row_interleaving" cannot be set to true when this is set.
     * </pre>
     *
     * <code>int64 num_rows_limit = 7;</code>
     */
    public function setNumRowsLimit($var)
    {
        GPBUtil::checkInt64($var);
        $this->num_rows_limit = $var;
    }

    public function getTarget()
    {
        return $this->target;
    }

}

