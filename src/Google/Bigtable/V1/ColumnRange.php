<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/v1/bigtable_data.proto

namespace Google\Bigtable\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Specifies a contiguous range of columns within a single column family.
 * The range spans from &lt;column_family&gt;:&lt;start_qualifier&gt; to
 * &lt;column_family&gt;:&lt;end_qualifier&gt;, where both bounds can be either inclusive or
 * exclusive.
 * </pre>
 *
 * Protobuf type <code>google.bigtable.v1.ColumnRange</code>
 */
class ColumnRange extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The name of the column family within which this range falls.
     * </pre>
     *
     * <code>string family_name = 1;</code>
     */
    private $family_name = '';
    protected $start_qualifier;
    protected $end_qualifier;

    public function __construct() {
        \GPBMetadata\Google\Bigtable\V1\BigtableData::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The name of the column family within which this range falls.
     * </pre>
     *
     * <code>string family_name = 1;</code>
     */
    public function getFamilyName()
    {
        return $this->family_name;
    }

    /**
     * <pre>
     * The name of the column family within which this range falls.
     * </pre>
     *
     * <code>string family_name = 1;</code>
     */
    public function setFamilyName($var)
    {
        GPBUtil::checkString($var, True);
        $this->family_name = $var;
    }

    /**
     * <pre>
     * Used when giving an inclusive lower bound for the range.
     * </pre>
     *
     * <code>bytes start_qualifier_inclusive = 2;</code>
     */
    public function getStartQualifierInclusive()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * Used when giving an inclusive lower bound for the range.
     * </pre>
     *
     * <code>bytes start_qualifier_inclusive = 2;</code>
     */
    public function setStartQualifierInclusive($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(2, $var);
    }

    /**
     * <pre>
     * Used when giving an exclusive lower bound for the range.
     * </pre>
     *
     * <code>bytes start_qualifier_exclusive = 3;</code>
     */
    public function getStartQualifierExclusive()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * Used when giving an exclusive lower bound for the range.
     * </pre>
     *
     * <code>bytes start_qualifier_exclusive = 3;</code>
     */
    public function setStartQualifierExclusive($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * Used when giving an inclusive upper bound for the range.
     * </pre>
     *
     * <code>bytes end_qualifier_inclusive = 4;</code>
     */
    public function getEndQualifierInclusive()
    {
        return $this->readOneof(4);
    }

    /**
     * <pre>
     * Used when giving an inclusive upper bound for the range.
     * </pre>
     *
     * <code>bytes end_qualifier_inclusive = 4;</code>
     */
    public function setEndQualifierInclusive($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(4, $var);
    }

    /**
     * <pre>
     * Used when giving an exclusive upper bound for the range.
     * </pre>
     *
     * <code>bytes end_qualifier_exclusive = 5;</code>
     */
    public function getEndQualifierExclusive()
    {
        return $this->readOneof(5);
    }

    /**
     * <pre>
     * Used when giving an exclusive upper bound for the range.
     * </pre>
     *
     * <code>bytes end_qualifier_exclusive = 5;</code>
     */
    public function setEndQualifierExclusive($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(5, $var);
    }

    public function getStartQualifier()
    {
        return $this->whichOneof("start_qualifier");
    }

    public function getEndQualifier()
    {
        return $this->whichOneof("end_qualifier");
    }

}

