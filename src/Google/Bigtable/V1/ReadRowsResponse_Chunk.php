<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/v1/bigtable_service_messages.proto

namespace Google\Bigtable\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Specifies a piece of a row's contents returned as part of the read
 * response stream.
 * </pre>
 *
 * Protobuf type <code>google.bigtable.v1.ReadRowsResponse.Chunk</code>
 */
class ReadRowsResponse_Chunk extends \Google\Protobuf\Internal\Message
{
    protected $chunk;

    public function __construct() {
        \GPBMetadata\Google\Bigtable\V1\BigtableServiceMessages::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * A subset of the data from a particular row. As long as no "reset_row"
     * is received in between, multiple "row_contents" from the same row are
     * from the same atomic view of that row, and will be received in the
     * expected family/column/timestamp order.
     * </pre>
     *
     * <code>.google.bigtable.v1.Family row_contents = 1;</code>
     */
    public function getRowContents()
    {
        return $this->readOneof(1);
    }

    /**
     * <pre>
     * A subset of the data from a particular row. As long as no "reset_row"
     * is received in between, multiple "row_contents" from the same row are
     * from the same atomic view of that row, and will be received in the
     * expected family/column/timestamp order.
     * </pre>
     *
     * <code>.google.bigtable.v1.Family row_contents = 1;</code>
     */
    public function setRowContents(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Bigtable\V1\Family::class);
        $this->writeOneof(1, $var);
    }

    /**
     * <pre>
     * Indicates that the client should drop all previous chunks for
     * "row_key", as it will be re-read from the beginning.
     * </pre>
     *
     * <code>bool reset_row = 2;</code>
     */
    public function getResetRow()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * Indicates that the client should drop all previous chunks for
     * "row_key", as it will be re-read from the beginning.
     * </pre>
     *
     * <code>bool reset_row = 2;</code>
     */
    public function setResetRow($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(2, $var);
    }

    /**
     * <pre>
     * Indicates that the client can safely process all previous chunks for
     * "row_key", as its data has been fully read.
     * </pre>
     *
     * <code>bool commit_row = 3;</code>
     */
    public function getCommitRow()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * Indicates that the client can safely process all previous chunks for
     * "row_key", as its data has been fully read.
     * </pre>
     *
     * <code>bool commit_row = 3;</code>
     */
    public function setCommitRow($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(3, $var);
    }

    public function getChunk()
    {
        return $this->chunk;
    }

}

