<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/container/v1/cluster_service.proto

namespace Google\Container\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * The authentication information for accessing the master endpoint.
 * Authentication can be done using HTTP basic auth or using client
 * certificates.
 * </pre>
 *
 * Protobuf type <code>google.container.v1.MasterAuth</code>
 */
class MasterAuth extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * The username to use for HTTP basic authentication to the master endpoint.
     * For clusters v1.6.0 and later, you can disable basic authentication by
     * providing an empty username.
     * </pre>
     *
     * <code>string username = 1;</code>
     */
    private $username = '';
    /**
     * <pre>
     * The password to use for HTTP basic authentication to the master endpoint.
     * Because the master endpoint is open to the Internet, you should create a
     * strong password.  If a password is provided for cluster creation, username
     * must be non-empty.
     * </pre>
     *
     * <code>string password = 2;</code>
     */
    private $password = '';
    /**
     * <pre>
     * [Output only] Base64-encoded public certificate that is the root of
     * trust for the cluster.
     * </pre>
     *
     * <code>string cluster_ca_certificate = 100;</code>
     */
    private $cluster_ca_certificate = '';
    /**
     * <pre>
     * [Output only] Base64-encoded public certificate used by clients to
     * authenticate to the cluster endpoint.
     * </pre>
     *
     * <code>string client_certificate = 101;</code>
     */
    private $client_certificate = '';
    /**
     * <pre>
     * [Output only] Base64-encoded private key used by clients to authenticate
     * to the cluster endpoint.
     * </pre>
     *
     * <code>string client_key = 102;</code>
     */
    private $client_key = '';

    public function __construct() {
        \GPBMetadata\Google\Container\V1\ClusterService::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The username to use for HTTP basic authentication to the master endpoint.
     * For clusters v1.6.0 and later, you can disable basic authentication by
     * providing an empty username.
     * </pre>
     *
     * <code>string username = 1;</code>
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * <pre>
     * The username to use for HTTP basic authentication to the master endpoint.
     * For clusters v1.6.0 and later, you can disable basic authentication by
     * providing an empty username.
     * </pre>
     *
     * <code>string username = 1;</code>
     */
    public function setUsername($var)
    {
        GPBUtil::checkString($var, True);
        $this->username = $var;
    }

    /**
     * <pre>
     * The password to use for HTTP basic authentication to the master endpoint.
     * Because the master endpoint is open to the Internet, you should create a
     * strong password.  If a password is provided for cluster creation, username
     * must be non-empty.
     * </pre>
     *
     * <code>string password = 2;</code>
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * <pre>
     * The password to use for HTTP basic authentication to the master endpoint.
     * Because the master endpoint is open to the Internet, you should create a
     * strong password.  If a password is provided for cluster creation, username
     * must be non-empty.
     * </pre>
     *
     * <code>string password = 2;</code>
     */
    public function setPassword($var)
    {
        GPBUtil::checkString($var, True);
        $this->password = $var;
    }

    /**
     * <pre>
     * [Output only] Base64-encoded public certificate that is the root of
     * trust for the cluster.
     * </pre>
     *
     * <code>string cluster_ca_certificate = 100;</code>
     */
    public function getClusterCaCertificate()
    {
        return $this->cluster_ca_certificate;
    }

    /**
     * <pre>
     * [Output only] Base64-encoded public certificate that is the root of
     * trust for the cluster.
     * </pre>
     *
     * <code>string cluster_ca_certificate = 100;</code>
     */
    public function setClusterCaCertificate($var)
    {
        GPBUtil::checkString($var, True);
        $this->cluster_ca_certificate = $var;
    }

    /**
     * <pre>
     * [Output only] Base64-encoded public certificate used by clients to
     * authenticate to the cluster endpoint.
     * </pre>
     *
     * <code>string client_certificate = 101;</code>
     */
    public function getClientCertificate()
    {
        return $this->client_certificate;
    }

    /**
     * <pre>
     * [Output only] Base64-encoded public certificate used by clients to
     * authenticate to the cluster endpoint.
     * </pre>
     *
     * <code>string client_certificate = 101;</code>
     */
    public function setClientCertificate($var)
    {
        GPBUtil::checkString($var, True);
        $this->client_certificate = $var;
    }

    /**
     * <pre>
     * [Output only] Base64-encoded private key used by clients to authenticate
     * to the cluster endpoint.
     * </pre>
     *
     * <code>string client_key = 102;</code>
     */
    public function getClientKey()
    {
        return $this->client_key;
    }

    /**
     * <pre>
     * [Output only] Base64-encoded private key used by clients to authenticate
     * to the cluster endpoint.
     * </pre>
     *
     * <code>string client_key = 102;</code>
     */
    public function setClientKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->client_key = $var;
    }

}

