<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/watcher/v1/watch.proto

namespace Google\Watcher\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A Change indicates the most recent state of an element.
 * </pre>
 *
 * Protobuf type <code>google.watcher.v1.Change</code>
 */
class Change extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Name of the element, interpreted relative to the entity's actual
     * name. "" refers to the entity itself. The element name is a valid
     * UTF-8 string.
     * </pre>
     *
     * <code>string element = 1;</code>
     */
    private $element = '';
    /**
     * <pre>
     * The state of the `element`.
     * </pre>
     *
     * <code>.google.watcher.v1.Change.State state = 2;</code>
     */
    private $state = 0;
    /**
     * <pre>
     * The actual change data. This field is present only when `state() == EXISTS`
     * or `state() == ERROR`. Please see [google.protobuf.Any][google.protobuf.Any] about how to use
     * the Any type.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 6;</code>
     */
    private $data = null;
    /**
     * <pre>
     * If present, provides a compact representation of all the messages that have
     * been received by the caller for the given entity, e.g., it could be a
     * sequence number or a multi-part timestamp/version vector. This marker can
     * be provided in the Request message, allowing the caller to resume the stream
     * watching at a specific point without fetching the initial state.
     * </pre>
     *
     * <code>bytes resume_marker = 4;</code>
     */
    private $resume_marker = '';
    /**
     * <pre>
     * If true, this Change is followed by more Changes that are in the same group
     * as this Change.
     * </pre>
     *
     * <code>bool continued = 5;</code>
     */
    private $continued = false;

    public function __construct() {
        \GPBMetadata\Google\Watcher\V1\Watch::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Name of the element, interpreted relative to the entity's actual
     * name. "" refers to the entity itself. The element name is a valid
     * UTF-8 string.
     * </pre>
     *
     * <code>string element = 1;</code>
     */
    public function getElement()
    {
        return $this->element;
    }

    /**
     * <pre>
     * Name of the element, interpreted relative to the entity's actual
     * name. "" refers to the entity itself. The element name is a valid
     * UTF-8 string.
     * </pre>
     *
     * <code>string element = 1;</code>
     */
    public function setElement($var)
    {
        GPBUtil::checkString($var, True);
        $this->element = $var;
    }

    /**
     * <pre>
     * The state of the `element`.
     * </pre>
     *
     * <code>.google.watcher.v1.Change.State state = 2;</code>
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * <pre>
     * The state of the `element`.
     * </pre>
     *
     * <code>.google.watcher.v1.Change.State state = 2;</code>
     */
    public function setState($var)
    {
        GPBUtil::checkEnum($var, \Google\Watcher\V1\Change_State::class);
        $this->state = $var;
    }

    /**
     * <pre>
     * The actual change data. This field is present only when `state() == EXISTS`
     * or `state() == ERROR`. Please see [google.protobuf.Any][google.protobuf.Any] about how to use
     * the Any type.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 6;</code>
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * <pre>
     * The actual change data. This field is present only when `state() == EXISTS`
     * or `state() == ERROR`. Please see [google.protobuf.Any][google.protobuf.Any] about how to use
     * the Any type.
     * </pre>
     *
     * <code>.google.protobuf.Any data = 6;</code>
     */
    public function setData(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->data = $var;
    }

    /**
     * <pre>
     * If present, provides a compact representation of all the messages that have
     * been received by the caller for the given entity, e.g., it could be a
     * sequence number or a multi-part timestamp/version vector. This marker can
     * be provided in the Request message, allowing the caller to resume the stream
     * watching at a specific point without fetching the initial state.
     * </pre>
     *
     * <code>bytes resume_marker = 4;</code>
     */
    public function getResumeMarker()
    {
        return $this->resume_marker;
    }

    /**
     * <pre>
     * If present, provides a compact representation of all the messages that have
     * been received by the caller for the given entity, e.g., it could be a
     * sequence number or a multi-part timestamp/version vector. This marker can
     * be provided in the Request message, allowing the caller to resume the stream
     * watching at a specific point without fetching the initial state.
     * </pre>
     *
     * <code>bytes resume_marker = 4;</code>
     */
    public function setResumeMarker($var)
    {
        GPBUtil::checkString($var, False);
        $this->resume_marker = $var;
    }

    /**
     * <pre>
     * If true, this Change is followed by more Changes that are in the same group
     * as this Change.
     * </pre>
     *
     * <code>bool continued = 5;</code>
     */
    public function getContinued()
    {
        return $this->continued;
    }

    /**
     * <pre>
     * If true, this Change is followed by more Changes that are in the same group
     * as this Change.
     * </pre>
     *
     * <code>bool continued = 5;</code>
     */
    public function setContinued($var)
    {
        GPBUtil::checkBool($var);
        $this->continued = $var;
    }

}

