<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/assistant/embedded/v1alpha1/embedded_assistant.proto

namespace Google\Assistant\Embedded\V1alpha1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * The top-level message sent by the client. Clients must send at least two, and
 * typically numerous `ConverseRequest` messages. The first message must
 * contain a `config` message and must not contain `audio_in` data. All
 * subsequent messages must contain `audio_in` data and must not contain a
 * `config` message.
 * </pre>
 *
 * Protobuf type <code>google.assistant.embedded.v1alpha1.ConverseRequest</code>
 */
class ConverseRequest extends \Google\Protobuf\Internal\Message
{
    protected $converse_request;

    public function __construct() {
        \GPBMetadata\Google\Assistant\Embedded\V1Alpha1\EmbeddedAssistant::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * The `config` message provides information to the recognizer that
     * specifies how to process the request.
     * The first `ConverseRequest` message must contain a `config` message.
     * </pre>
     *
     * <code>.google.assistant.embedded.v1alpha1.ConverseConfig config = 1;</code>
     */
    public function getConfig()
    {
        return $this->readOneof(1);
    }

    /**
     * <pre>
     * The `config` message provides information to the recognizer that
     * specifies how to process the request.
     * The first `ConverseRequest` message must contain a `config` message.
     * </pre>
     *
     * <code>.google.assistant.embedded.v1alpha1.ConverseConfig config = 1;</code>
     */
    public function setConfig(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Assistant\Embedded\V1alpha1\ConverseConfig::class);
        $this->writeOneof(1, $var);
    }

    /**
     * <pre>
     * The audio data to be recognized. Sequential chunks of audio data are sent
     * in sequential `ConverseRequest` messages. The first `ConverseRequest`
     * message must not contain `audio_in` data and all subsequent
     * `ConverseRequest` messages must contain `audio_in` data. The audio bytes
     * must be encoded as specified in `AudioInConfig`.
     * Audio must be sent at approximately real-time (16000 samples per second).
     * An error will be returned if audio is sent significantly faster or
     * slower.
     * </pre>
     *
     * <code>bytes audio_in = 2;</code>
     */
    public function getAudioIn()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * The audio data to be recognized. Sequential chunks of audio data are sent
     * in sequential `ConverseRequest` messages. The first `ConverseRequest`
     * message must not contain `audio_in` data and all subsequent
     * `ConverseRequest` messages must contain `audio_in` data. The audio bytes
     * must be encoded as specified in `AudioInConfig`.
     * Audio must be sent at approximately real-time (16000 samples per second).
     * An error will be returned if audio is sent significantly faster or
     * slower.
     * </pre>
     *
     * <code>bytes audio_in = 2;</code>
     */
    public function setAudioIn($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(2, $var);
    }

    public function getConverseRequest()
    {
        return $this->converse_request;
    }

}

