<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/appengine/v1/app_yaml.proto

namespace Google\Appengine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Files served directly to the user for a given URL, such as images, CSS
 * stylesheets, or JavaScript source files. Static file handlers describe which
 * files in the application directory are static files, and which URLs serve
 * them.
 * </pre>
 *
 * Protobuf type <code>google.appengine.v1.StaticFilesHandler</code>
 */
class StaticFilesHandler extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Path to the static files matched by the URL pattern, from the
     * application root directory. The path can refer to text matched in groupings
     * in the URL pattern.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    private $path = '';
    /**
     * <pre>
     * Regular expression that matches the file paths for all files that should be
     * referenced by this handler.
     * </pre>
     *
     * <code>string upload_path_regex = 2;</code>
     */
    private $upload_path_regex = '';
    /**
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    private $http_headers;
    /**
     * <pre>
     * MIME type used to serve all files served by this handler.
     * Defaults to file-specific MIME types, which are derived from each file's
     * filename extension.
     * </pre>
     *
     * <code>string mime_type = 4;</code>
     */
    private $mime_type = '';
    /**
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    private $expiration = null;
    /**
     * <pre>
     * Whether this handler should match the request if the file
     * referenced by the handler does not exist.
     * </pre>
     *
     * <code>bool require_matching_file = 6;</code>
     */
    private $require_matching_file = false;
    /**
     * <pre>
     * Whether files should also be uploaded as code data. By default, files
     * declared in static file handlers are uploaded as static
     * data and are only served to end users; they cannot be read by the
     * application. If enabled, uploads are charged against both your code and
     * static data storage resource quotas.
     * </pre>
     *
     * <code>bool application_readable = 7;</code>
     */
    private $application_readable = false;

    public function __construct() {
        \GPBMetadata\Google\Appengine\V1\AppYaml::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Path to the static files matched by the URL pattern, from the
     * application root directory. The path can refer to text matched in groupings
     * in the URL pattern.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    public function getPath()
    {
        return $this->path;
    }

    /**
     * <pre>
     * Path to the static files matched by the URL pattern, from the
     * application root directory. The path can refer to text matched in groupings
     * in the URL pattern.
     * </pre>
     *
     * <code>string path = 1;</code>
     */
    public function setPath($var)
    {
        GPBUtil::checkString($var, True);
        $this->path = $var;
    }

    /**
     * <pre>
     * Regular expression that matches the file paths for all files that should be
     * referenced by this handler.
     * </pre>
     *
     * <code>string upload_path_regex = 2;</code>
     */
    public function getUploadPathRegex()
    {
        return $this->upload_path_regex;
    }

    /**
     * <pre>
     * Regular expression that matches the file paths for all files that should be
     * referenced by this handler.
     * </pre>
     *
     * <code>string upload_path_regex = 2;</code>
     */
    public function setUploadPathRegex($var)
    {
        GPBUtil::checkString($var, True);
        $this->upload_path_regex = $var;
    }

    /**
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    public function getHttpHeaders()
    {
        return $this->http_headers;
    }

    /**
     * <pre>
     * HTTP headers to use for all responses from these URLs.
     * </pre>
     *
     * <code>map&lt;string, string&gt; http_headers = 3;</code>
     */
    public function setHttpHeaders(&$var)
    {
        $this->http_headers = $var;
    }

    /**
     * <pre>
     * MIME type used to serve all files served by this handler.
     * Defaults to file-specific MIME types, which are derived from each file's
     * filename extension.
     * </pre>
     *
     * <code>string mime_type = 4;</code>
     */
    public function getMimeType()
    {
        return $this->mime_type;
    }

    /**
     * <pre>
     * MIME type used to serve all files served by this handler.
     * Defaults to file-specific MIME types, which are derived from each file's
     * filename extension.
     * </pre>
     *
     * <code>string mime_type = 4;</code>
     */
    public function setMimeType($var)
    {
        GPBUtil::checkString($var, True);
        $this->mime_type = $var;
    }

    /**
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    public function getExpiration()
    {
        return $this->expiration;
    }

    /**
     * <pre>
     * Time a static file served by this handler should be cached
     * by web proxies and browsers.
     * </pre>
     *
     * <code>.google.protobuf.Duration expiration = 5;</code>
     */
    public function setExpiration(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->expiration = $var;
    }

    /**
     * <pre>
     * Whether this handler should match the request if the file
     * referenced by the handler does not exist.
     * </pre>
     *
     * <code>bool require_matching_file = 6;</code>
     */
    public function getRequireMatchingFile()
    {
        return $this->require_matching_file;
    }

    /**
     * <pre>
     * Whether this handler should match the request if the file
     * referenced by the handler does not exist.
     * </pre>
     *
     * <code>bool require_matching_file = 6;</code>
     */
    public function setRequireMatchingFile($var)
    {
        GPBUtil::checkBool($var);
        $this->require_matching_file = $var;
    }

    /**
     * <pre>
     * Whether files should also be uploaded as code data. By default, files
     * declared in static file handlers are uploaded as static
     * data and are only served to end users; they cannot be read by the
     * application. If enabled, uploads are charged against both your code and
     * static data storage resource quotas.
     * </pre>
     *
     * <code>bool application_readable = 7;</code>
     */
    public function getApplicationReadable()
    {
        return $this->application_readable;
    }

    /**
     * <pre>
     * Whether files should also be uploaded as code data. By default, files
     * declared in static file handlers are uploaded as static
     * data and are only served to end users; they cannot be read by the
     * application. If enabled, uploads are charged against both your code and
     * static data storage resource quotas.
     * </pre>
     *
     * <code>bool application_readable = 7;</code>
     */
    public function setApplicationReadable($var)
    {
        GPBUtil::checkBool($var);
        $this->application_readable = $var;
    }

}

