<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/appengine/v1/service.proto

namespace Google\Appengine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Traffic routing configuration for versions within a single service. Traffic
 * splits define how traffic directed to the service is assigned to versions.
 * </pre>
 *
 * Protobuf type <code>google.appengine.v1.TrafficSplit</code>
 */
class TrafficSplit extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Mechanism used to determine which version a request is sent to.
     * The traffic selection algorithm will
     * be stable for either type until allocations are changed.
     * </pre>
     *
     * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
     */
    private $shard_by = 0;
    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */
    private $allocations;

    public function __construct() {
        \GPBMetadata\Google\Appengine\V1\Service::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Mechanism used to determine which version a request is sent to.
     * The traffic selection algorithm will
     * be stable for either type until allocations are changed.
     * </pre>
     *
     * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
     */
    public function getShardBy()
    {
        return $this->shard_by;
    }

    /**
     * <pre>
     * Mechanism used to determine which version a request is sent to.
     * The traffic selection algorithm will
     * be stable for either type until allocations are changed.
     * </pre>
     *
     * <code>.google.appengine.v1.TrafficSplit.ShardBy shard_by = 1;</code>
     */
    public function setShardBy($var)
    {
        GPBUtil::checkEnum($var, \Google\Appengine\V1\TrafficSplit_ShardBy::class);
        $this->shard_by = $var;
    }

    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */
    public function getAllocations()
    {
        return $this->allocations;
    }

    /**
     * <pre>
     * Mapping from version IDs within the service to fractional
     * (0.000, 1] allocations of traffic for that version. Each version can
     * be specified only once, but some versions in the service may not
     * have any traffic allocation. Services that have traffic allocated
     * cannot be deleted until either the service is deleted or
     * their traffic allocation is removed. Allocations must sum to 1.
     * Up to two decimal place precision is supported for IP-based splits and
     * up to three decimal places is supported for cookie-based splits.
     * </pre>
     *
     * <code>map&lt;string, double&gt; allocations = 2;</code>
     */
    public function setAllocations(&$var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::DOUBLE);
        $this->allocations = $arr;
    }

}

