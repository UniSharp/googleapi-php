<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/appengine/v1/version.proto

namespace Google\Appengine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A service with basic scaling will create an instance when the application
 * receives a request. The instance will be turned down when the app becomes
 * idle. Basic scaling is ideal for work that is intermittent or driven by
 * user activity.
 * </pre>
 *
 * Protobuf type <code>google.appengine.v1.BasicScaling</code>
 */
class BasicScaling extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Duration of time after the last request that an instance must wait before
     * the instance is shut down.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    private $idle_timeout = null;
    /**
     * <pre>
     * Maximum number of instances to create for this version.
     * </pre>
     *
     * <code>int32 max_instances = 2;</code>
     */
    private $max_instances = 0;

    public function __construct() {
        \GPBMetadata\Google\Appengine\V1\Version::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Duration of time after the last request that an instance must wait before
     * the instance is shut down.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    public function getIdleTimeout()
    {
        return $this->idle_timeout;
    }

    /**
     * <pre>
     * Duration of time after the last request that an instance must wait before
     * the instance is shut down.
     * </pre>
     *
     * <code>.google.protobuf.Duration idle_timeout = 1;</code>
     */
    public function setIdleTimeout(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->idle_timeout = $var;
    }

    /**
     * <pre>
     * Maximum number of instances to create for this version.
     * </pre>
     *
     * <code>int32 max_instances = 2;</code>
     */
    public function getMaxInstances()
    {
        return $this->max_instances;
    }

    /**
     * <pre>
     * Maximum number of instances to create for this version.
     * </pre>
     *
     * <code>int32 max_instances = 2;</code>
     */
    public function setMaxInstances($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_instances = $var;
    }

}

