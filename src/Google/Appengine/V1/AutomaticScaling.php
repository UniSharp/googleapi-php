<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/appengine/v1/version.proto

namespace Google\Appengine\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Automatic scaling is based on request rate, response latencies, and other
 * application metrics.
 * </pre>
 *
 * Protobuf type <code>google.appengine.v1.AutomaticScaling</code>
 */
class AutomaticScaling extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Amount of time that the
     * [Autoscaler](https://cloud.google.com/compute/docs/autoscaler/)
     * should wait between changes to the number of virtual machines.
     * Only applicable for VM runtimes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cool_down_period = 1;</code>
     */
    private $cool_down_period = null;
    /**
     * <pre>
     * Target scaling by CPU usage.
     * </pre>
     *
     * <code>.google.appengine.v1.CpuUtilization cpu_utilization = 2;</code>
     */
    private $cpu_utilization = null;
    /**
     * <pre>
     * Number of concurrent requests an automatic scaling instance can accept
     * before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * </pre>
     *
     * <code>int32 max_concurrent_requests = 3;</code>
     */
    private $max_concurrent_requests = 0;
    /**
     * <pre>
     * Maximum number of idle instances that should be maintained for this
     * version.
     * </pre>
     *
     * <code>int32 max_idle_instances = 4;</code>
     */
    private $max_idle_instances = 0;
    /**
     * <pre>
     * Maximum number of instances that should be started to handle requests.
     * </pre>
     *
     * <code>int32 max_total_instances = 5;</code>
     */
    private $max_total_instances = 0;
    /**
     * <pre>
     * Maximum amount of time that a request should wait in the pending queue
     * before starting a new instance to handle it.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_pending_latency = 6;</code>
     */
    private $max_pending_latency = null;
    /**
     * <pre>
     * Minimum number of idle instances that should be maintained for
     * this version. Only applicable for the default version of a service.
     * </pre>
     *
     * <code>int32 min_idle_instances = 7;</code>
     */
    private $min_idle_instances = 0;
    /**
     * <pre>
     * Minimum number of instances that should be maintained for this version.
     * </pre>
     *
     * <code>int32 min_total_instances = 8;</code>
     */
    private $min_total_instances = 0;
    /**
     * <pre>
     * Minimum amount of time a request should wait in the pending queue before
     * starting a new instance to handle it.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_pending_latency = 9;</code>
     */
    private $min_pending_latency = null;
    /**
     * <pre>
     * Target scaling by request utilization.
     * </pre>
     *
     * <code>.google.appengine.v1.RequestUtilization request_utilization = 10;</code>
     */
    private $request_utilization = null;
    /**
     * <pre>
     * Target scaling by disk usage.
     * </pre>
     *
     * <code>.google.appengine.v1.DiskUtilization disk_utilization = 11;</code>
     */
    private $disk_utilization = null;
    /**
     * <pre>
     * Target scaling by network usage.
     * </pre>
     *
     * <code>.google.appengine.v1.NetworkUtilization network_utilization = 12;</code>
     */
    private $network_utilization = null;

    public function __construct() {
        \GPBMetadata\Google\Appengine\V1\Version::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Amount of time that the
     * [Autoscaler](https://cloud.google.com/compute/docs/autoscaler/)
     * should wait between changes to the number of virtual machines.
     * Only applicable for VM runtimes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cool_down_period = 1;</code>
     */
    public function getCoolDownPeriod()
    {
        return $this->cool_down_period;
    }

    /**
     * <pre>
     * Amount of time that the
     * [Autoscaler](https://cloud.google.com/compute/docs/autoscaler/)
     * should wait between changes to the number of virtual machines.
     * Only applicable for VM runtimes.
     * </pre>
     *
     * <code>.google.protobuf.Duration cool_down_period = 1;</code>
     */
    public function setCoolDownPeriod(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->cool_down_period = $var;
    }

    /**
     * <pre>
     * Target scaling by CPU usage.
     * </pre>
     *
     * <code>.google.appengine.v1.CpuUtilization cpu_utilization = 2;</code>
     */
    public function getCpuUtilization()
    {
        return $this->cpu_utilization;
    }

    /**
     * <pre>
     * Target scaling by CPU usage.
     * </pre>
     *
     * <code>.google.appengine.v1.CpuUtilization cpu_utilization = 2;</code>
     */
    public function setCpuUtilization(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Appengine\V1\CpuUtilization::class);
        $this->cpu_utilization = $var;
    }

    /**
     * <pre>
     * Number of concurrent requests an automatic scaling instance can accept
     * before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * </pre>
     *
     * <code>int32 max_concurrent_requests = 3;</code>
     */
    public function getMaxConcurrentRequests()
    {
        return $this->max_concurrent_requests;
    }

    /**
     * <pre>
     * Number of concurrent requests an automatic scaling instance can accept
     * before the scheduler spawns a new instance.
     * Defaults to a runtime-specific value.
     * </pre>
     *
     * <code>int32 max_concurrent_requests = 3;</code>
     */
    public function setMaxConcurrentRequests($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_concurrent_requests = $var;
    }

    /**
     * <pre>
     * Maximum number of idle instances that should be maintained for this
     * version.
     * </pre>
     *
     * <code>int32 max_idle_instances = 4;</code>
     */
    public function getMaxIdleInstances()
    {
        return $this->max_idle_instances;
    }

    /**
     * <pre>
     * Maximum number of idle instances that should be maintained for this
     * version.
     * </pre>
     *
     * <code>int32 max_idle_instances = 4;</code>
     */
    public function setMaxIdleInstances($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_idle_instances = $var;
    }

    /**
     * <pre>
     * Maximum number of instances that should be started to handle requests.
     * </pre>
     *
     * <code>int32 max_total_instances = 5;</code>
     */
    public function getMaxTotalInstances()
    {
        return $this->max_total_instances;
    }

    /**
     * <pre>
     * Maximum number of instances that should be started to handle requests.
     * </pre>
     *
     * <code>int32 max_total_instances = 5;</code>
     */
    public function setMaxTotalInstances($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_total_instances = $var;
    }

    /**
     * <pre>
     * Maximum amount of time that a request should wait in the pending queue
     * before starting a new instance to handle it.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_pending_latency = 6;</code>
     */
    public function getMaxPendingLatency()
    {
        return $this->max_pending_latency;
    }

    /**
     * <pre>
     * Maximum amount of time that a request should wait in the pending queue
     * before starting a new instance to handle it.
     * </pre>
     *
     * <code>.google.protobuf.Duration max_pending_latency = 6;</code>
     */
    public function setMaxPendingLatency(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->max_pending_latency = $var;
    }

    /**
     * <pre>
     * Minimum number of idle instances that should be maintained for
     * this version. Only applicable for the default version of a service.
     * </pre>
     *
     * <code>int32 min_idle_instances = 7;</code>
     */
    public function getMinIdleInstances()
    {
        return $this->min_idle_instances;
    }

    /**
     * <pre>
     * Minimum number of idle instances that should be maintained for
     * this version. Only applicable for the default version of a service.
     * </pre>
     *
     * <code>int32 min_idle_instances = 7;</code>
     */
    public function setMinIdleInstances($var)
    {
        GPBUtil::checkInt32($var);
        $this->min_idle_instances = $var;
    }

    /**
     * <pre>
     * Minimum number of instances that should be maintained for this version.
     * </pre>
     *
     * <code>int32 min_total_instances = 8;</code>
     */
    public function getMinTotalInstances()
    {
        return $this->min_total_instances;
    }

    /**
     * <pre>
     * Minimum number of instances that should be maintained for this version.
     * </pre>
     *
     * <code>int32 min_total_instances = 8;</code>
     */
    public function setMinTotalInstances($var)
    {
        GPBUtil::checkInt32($var);
        $this->min_total_instances = $var;
    }

    /**
     * <pre>
     * Minimum amount of time a request should wait in the pending queue before
     * starting a new instance to handle it.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_pending_latency = 9;</code>
     */
    public function getMinPendingLatency()
    {
        return $this->min_pending_latency;
    }

    /**
     * <pre>
     * Minimum amount of time a request should wait in the pending queue before
     * starting a new instance to handle it.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_pending_latency = 9;</code>
     */
    public function setMinPendingLatency(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->min_pending_latency = $var;
    }

    /**
     * <pre>
     * Target scaling by request utilization.
     * </pre>
     *
     * <code>.google.appengine.v1.RequestUtilization request_utilization = 10;</code>
     */
    public function getRequestUtilization()
    {
        return $this->request_utilization;
    }

    /**
     * <pre>
     * Target scaling by request utilization.
     * </pre>
     *
     * <code>.google.appengine.v1.RequestUtilization request_utilization = 10;</code>
     */
    public function setRequestUtilization(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Appengine\V1\RequestUtilization::class);
        $this->request_utilization = $var;
    }

    /**
     * <pre>
     * Target scaling by disk usage.
     * </pre>
     *
     * <code>.google.appengine.v1.DiskUtilization disk_utilization = 11;</code>
     */
    public function getDiskUtilization()
    {
        return $this->disk_utilization;
    }

    /**
     * <pre>
     * Target scaling by disk usage.
     * </pre>
     *
     * <code>.google.appengine.v1.DiskUtilization disk_utilization = 11;</code>
     */
    public function setDiskUtilization(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Appengine\V1\DiskUtilization::class);
        $this->disk_utilization = $var;
    }

    /**
     * <pre>
     * Target scaling by network usage.
     * </pre>
     *
     * <code>.google.appengine.v1.NetworkUtilization network_utilization = 12;</code>
     */
    public function getNetworkUtilization()
    {
        return $this->network_utilization;
    }

    /**
     * <pre>
     * Target scaling by network usage.
     * </pre>
     *
     * <code>.google.appengine.v1.NetworkUtilization network_utilization = 12;</code>
     */
    public function setNetworkUtilization(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Appengine\V1\NetworkUtilization::class);
        $this->network_utilization = $var;
    }

}

