<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/appengine/logging/v1/request_log.proto

namespace Google\Appengine\Logging\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Specifies a location in a source code file.
 * </pre>
 *
 * Protobuf type <code>google.appengine.logging.v1.SourceLocation</code>
 */
class SourceLocation extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Source file name. Depending on the runtime environment, this might be a
     * simple name or a fully-qualified name.
     * </pre>
     *
     * <code>string file = 1;</code>
     */
    private $file = '';
    /**
     * <pre>
     * Line within the source file.
     * </pre>
     *
     * <code>int64 line = 2;</code>
     */
    private $line = 0;
    /**
     * <pre>
     * Human-readable name of the function or method being invoked, with optional
     * context such as the class or package name. This information is used in
     * contexts such as the logs viewer, where a file and line number are less
     * meaningful. The format can vary by language. For example:
     * `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
     * (Python).
     * </pre>
     *
     * <code>string function_name = 3;</code>
     */
    private $function_name = '';

    public function __construct() {
        \GPBMetadata\Google\Appengine\Logging\V1\RequestLog::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Source file name. Depending on the runtime environment, this might be a
     * simple name or a fully-qualified name.
     * </pre>
     *
     * <code>string file = 1;</code>
     */
    public function getFile()
    {
        return $this->file;
    }

    /**
     * <pre>
     * Source file name. Depending on the runtime environment, this might be a
     * simple name or a fully-qualified name.
     * </pre>
     *
     * <code>string file = 1;</code>
     */
    public function setFile($var)
    {
        GPBUtil::checkString($var, True);
        $this->file = $var;
    }

    /**
     * <pre>
     * Line within the source file.
     * </pre>
     *
     * <code>int64 line = 2;</code>
     */
    public function getLine()
    {
        return $this->line;
    }

    /**
     * <pre>
     * Line within the source file.
     * </pre>
     *
     * <code>int64 line = 2;</code>
     */
    public function setLine($var)
    {
        GPBUtil::checkInt64($var);
        $this->line = $var;
    }

    /**
     * <pre>
     * Human-readable name of the function or method being invoked, with optional
     * context such as the class or package name. This information is used in
     * contexts such as the logs viewer, where a file and line number are less
     * meaningful. The format can vary by language. For example:
     * `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
     * (Python).
     * </pre>
     *
     * <code>string function_name = 3;</code>
     */
    public function getFunctionName()
    {
        return $this->function_name;
    }

    /**
     * <pre>
     * Human-readable name of the function or method being invoked, with optional
     * context such as the class or package name. This information is used in
     * contexts such as the logs viewer, where a file and line number are less
     * meaningful. The format can vary by language. For example:
     * `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
     * (Python).
     * </pre>
     *
     * <code>string function_name = 3;</code>
     */
    public function setFunctionName($var)
    {
        GPBUtil::checkString($var, True);
        $this->function_name = $var;
    }

}

