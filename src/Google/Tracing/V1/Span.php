<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/tracing/trace.proto

namespace Google\Tracing\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A span represents a single operation within a trace. Spans can be nested
 * and form a trace tree. Often, a trace contains a root span that describes the
 * end-to-end latency and, optionally, one or more subspans for
 * its sub-operations. Spans do not need to be contiguous. There may be gaps
 * between spans in a trace.
 * </pre>
 *
 * Protobuf type <code>google.tracing.v1.Span</code>
 */
class Span extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Identifier for the span. Must be a 64-bit integer other than 0 and
     * unique within a trace.
     * </pre>
     *
     * <code>fixed64 id = 1;</code>
     */
    private $id = 0;
    /**
     * <pre>
     * Name of the span. The span name is sanitized and displayed in the
     * Stackdriver Trace tool in the {% dynamic print site_values.console_name %}.
     * The name may be a method name or some other per-call site name.
     * For the same executable and the same call point, a best practice is
     * to use a consistent name, which makes it easier to correlate
     * cross-trace spans.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    private $name = '';
    /**
     * <pre>
     * ID of parent span. 0 or missing if this is a root span.
     * </pre>
     *
     * <code>fixed64 parent_id = 3;</code>
     */
    private $parent_id = 0;
    /**
     * <pre>
     * Local machine clock in nanoseconds from the UNIX epoch,
     * at which span execution started.
     * On the server side these are the times when the server application
     * handler starts running.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_start_time = 4;</code>
     */
    private $local_start_time = null;
    /**
     * <pre>
     * Local machine clock in nanoseconds from the UNIX epoch,
     * at which span execution ended.
     * On the server side these are the times when the server application
     * handler finishes running.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_end_time = 5;</code>
     */
    private $local_end_time = null;
    /**
     * <pre>
     * Properties of a span. Labels at the span level.
     * E.g.
     * "/instance_id": "my-instance"
     * "/zone": "us-central1-a"
     * "/grpc/peer_address": "ip:port" (dns, etc.)
     * "/grpc/deadline": "Duration"
     * "/http/user_agent"
     * "/http/request_bytes": 300
     * "/http/response_bytes": 1200
     * "/http/url": google.com/apis
     * "/pid"
     * "abc.com/mylabel": "my label value"
     * </pre>
     *
     * <code>map&lt;string, .google.tracing.v1.LabelValue&gt; labels = 6;</code>
     */
    private $labels;
    /**
     * <pre>
     * Stack trace captured at the start of the span. This is optional.
     * </pre>
     *
     * <code>.google.tracing.v1.StackTrace stack_trace = 7;</code>
     */
    private $stack_trace = null;
    /**
     * <pre>
     * A collection of time-stamped events.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.Span.TimeEvent time_events = 8;</code>
     */
    private $time_events;
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.Span.Link links = 9;</code>
     */
    private $links;
    /**
     * <pre>
     * The final status of the Span. This is optional.
     * </pre>
     *
     * <code>.google.rpc.Status status = 10;</code>
     */
    private $status = null;
    /**
     * <pre>
     * True if this Span has a remote parent (is an RPC server Span).
     * </pre>
     *
     * <code>bool has_remote_parent = 11;</code>
     */
    private $has_remote_parent = false;

    public function __construct() {
        \GPBMetadata\Google\Tracing\Trace::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Identifier for the span. Must be a 64-bit integer other than 0 and
     * unique within a trace.
     * </pre>
     *
     * <code>fixed64 id = 1;</code>
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * <pre>
     * Identifier for the span. Must be a 64-bit integer other than 0 and
     * unique within a trace.
     * </pre>
     *
     * <code>fixed64 id = 1;</code>
     */
    public function setId($var)
    {
        GPBUtil::checkUint64($var);
        $this->id = $var;
    }

    /**
     * <pre>
     * Name of the span. The span name is sanitized and displayed in the
     * Stackdriver Trace tool in the {% dynamic print site_values.console_name %}.
     * The name may be a method name or some other per-call site name.
     * For the same executable and the same call point, a best practice is
     * to use a consistent name, which makes it easier to correlate
     * cross-trace spans.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * <pre>
     * Name of the span. The span name is sanitized and displayed in the
     * Stackdriver Trace tool in the {% dynamic print site_values.console_name %}.
     * The name may be a method name or some other per-call site name.
     * For the same executable and the same call point, a best practice is
     * to use a consistent name, which makes it easier to correlate
     * cross-trace spans.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;
    }

    /**
     * <pre>
     * ID of parent span. 0 or missing if this is a root span.
     * </pre>
     *
     * <code>fixed64 parent_id = 3;</code>
     */
    public function getParentId()
    {
        return $this->parent_id;
    }

    /**
     * <pre>
     * ID of parent span. 0 or missing if this is a root span.
     * </pre>
     *
     * <code>fixed64 parent_id = 3;</code>
     */
    public function setParentId($var)
    {
        GPBUtil::checkUint64($var);
        $this->parent_id = $var;
    }

    /**
     * <pre>
     * Local machine clock in nanoseconds from the UNIX epoch,
     * at which span execution started.
     * On the server side these are the times when the server application
     * handler starts running.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_start_time = 4;</code>
     */
    public function getLocalStartTime()
    {
        return $this->local_start_time;
    }

    /**
     * <pre>
     * Local machine clock in nanoseconds from the UNIX epoch,
     * at which span execution started.
     * On the server side these are the times when the server application
     * handler starts running.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_start_time = 4;</code>
     */
    public function setLocalStartTime(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->local_start_time = $var;
    }

    /**
     * <pre>
     * Local machine clock in nanoseconds from the UNIX epoch,
     * at which span execution ended.
     * On the server side these are the times when the server application
     * handler finishes running.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_end_time = 5;</code>
     */
    public function getLocalEndTime()
    {
        return $this->local_end_time;
    }

    /**
     * <pre>
     * Local machine clock in nanoseconds from the UNIX epoch,
     * at which span execution ended.
     * On the server side these are the times when the server application
     * handler finishes running.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp local_end_time = 5;</code>
     */
    public function setLocalEndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->local_end_time = $var;
    }

    /**
     * <pre>
     * Properties of a span. Labels at the span level.
     * E.g.
     * "/instance_id": "my-instance"
     * "/zone": "us-central1-a"
     * "/grpc/peer_address": "ip:port" (dns, etc.)
     * "/grpc/deadline": "Duration"
     * "/http/user_agent"
     * "/http/request_bytes": 300
     * "/http/response_bytes": 1200
     * "/http/url": google.com/apis
     * "/pid"
     * "abc.com/mylabel": "my label value"
     * </pre>
     *
     * <code>map&lt;string, .google.tracing.v1.LabelValue&gt; labels = 6;</code>
     */
    public function getLabels()
    {
        return $this->labels;
    }

    /**
     * <pre>
     * Properties of a span. Labels at the span level.
     * E.g.
     * "/instance_id": "my-instance"
     * "/zone": "us-central1-a"
     * "/grpc/peer_address": "ip:port" (dns, etc.)
     * "/grpc/deadline": "Duration"
     * "/http/user_agent"
     * "/http/request_bytes": 300
     * "/http/response_bytes": 1200
     * "/http/url": google.com/apis
     * "/pid"
     * "abc.com/mylabel": "my label value"
     * </pre>
     *
     * <code>map&lt;string, .google.tracing.v1.LabelValue&gt; labels = 6;</code>
     */
    public function setLabels(&$var)
    {
        $this->labels = $var;
    }

    /**
     * <pre>
     * Stack trace captured at the start of the span. This is optional.
     * </pre>
     *
     * <code>.google.tracing.v1.StackTrace stack_trace = 7;</code>
     */
    public function getStackTrace()
    {
        return $this->stack_trace;
    }

    /**
     * <pre>
     * Stack trace captured at the start of the span. This is optional.
     * </pre>
     *
     * <code>.google.tracing.v1.StackTrace stack_trace = 7;</code>
     */
    public function setStackTrace(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Tracing\V1\StackTrace::class);
        $this->stack_trace = $var;
    }

    /**
     * <pre>
     * A collection of time-stamped events.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.Span.TimeEvent time_events = 8;</code>
     */
    public function getTimeEvents()
    {
        return $this->time_events;
    }

    /**
     * <pre>
     * A collection of time-stamped events.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.Span.TimeEvent time_events = 8;</code>
     */
    public function setTimeEvents(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Tracing\V1\Span_TimeEvent::class);
        $this->time_events = $var;
    }

    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.Span.Link links = 9;</code>
     */
    public function getLinks()
    {
        return $this->links;
    }

    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .google.tracing.v1.Span.Link links = 9;</code>
     */
    public function setLinks(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Tracing\V1\Span_Link::class);
        $this->links = $var;
    }

    /**
     * <pre>
     * The final status of the Span. This is optional.
     * </pre>
     *
     * <code>.google.rpc.Status status = 10;</code>
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * <pre>
     * The final status of the Span. This is optional.
     * </pre>
     *
     * <code>.google.rpc.Status status = 10;</code>
     */
    public function setStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Rpc\Status::class);
        $this->status = $var;
    }

    /**
     * <pre>
     * True if this Span has a remote parent (is an RPC server Span).
     * </pre>
     *
     * <code>bool has_remote_parent = 11;</code>
     */
    public function getHasRemoteParent()
    {
        return $this->has_remote_parent;
    }

    /**
     * <pre>
     * True if this Span has a remote parent (is an RPC server Span).
     * </pre>
     *
     * <code>bool has_remote_parent = 11;</code>
     */
    public function setHasRemoteParent($var)
    {
        GPBUtil::checkBool($var);
        $this->has_remote_parent = $var;
    }

}

