<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/tracing/trace.proto

namespace Google\Tracing\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * Presents a single stack frame in a stack trace.
 * </pre>
 *
 * Protobuf type <code>google.tracing.v1.StackTrace.StackFrame</code>
 */
class StackTrace_StackFrame extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Fully qualified names which uniquely identify function/method/etc.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     */
    private $function_name = '';
    /**
     * <pre>
     * Used when function name is ‘mangled’. Not guaranteed to be fully
     * qualified but usually it is.
     * </pre>
     *
     * <code>string orig_function_name = 2;</code>
     */
    private $orig_function_name = '';
    /**
     * <pre>
     * File name of the frame.
     * </pre>
     *
     * <code>string file_name = 3;</code>
     */
    private $file_name = '';
    /**
     * <pre>
     * Line number of the frame.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     */
    private $line_number = 0;
    /**
     * <pre>
     * Column number is important in JavaScript(anonymous functions),
     * Might not be available in some languages.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     */
    private $column_number = 0;
    /**
     * <pre>
     * Binary module the code is loaded from.
     * </pre>
     *
     * <code>.google.tracing.v1.Module load_module = 6;</code>
     */
    private $load_module = null;
    /**
     * <pre>
     * source_version is deployment specific. It might be
     * better to be stored in deployment metadata.
     * However, in distributed tracing, it’s hard to keep track of
     * source/binary versions at one place for all spans.
     * </pre>
     *
     * <code>string source_version = 7;</code>
     */
    private $source_version = '';

    public function __construct() {
        \GPBMetadata\Google\Tracing\Trace::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Fully qualified names which uniquely identify function/method/etc.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     */
    public function getFunctionName()
    {
        return $this->function_name;
    }

    /**
     * <pre>
     * Fully qualified names which uniquely identify function/method/etc.
     * </pre>
     *
     * <code>string function_name = 1;</code>
     */
    public function setFunctionName($var)
    {
        GPBUtil::checkString($var, True);
        $this->function_name = $var;
    }

    /**
     * <pre>
     * Used when function name is ‘mangled’. Not guaranteed to be fully
     * qualified but usually it is.
     * </pre>
     *
     * <code>string orig_function_name = 2;</code>
     */
    public function getOrigFunctionName()
    {
        return $this->orig_function_name;
    }

    /**
     * <pre>
     * Used when function name is ‘mangled’. Not guaranteed to be fully
     * qualified but usually it is.
     * </pre>
     *
     * <code>string orig_function_name = 2;</code>
     */
    public function setOrigFunctionName($var)
    {
        GPBUtil::checkString($var, True);
        $this->orig_function_name = $var;
    }

    /**
     * <pre>
     * File name of the frame.
     * </pre>
     *
     * <code>string file_name = 3;</code>
     */
    public function getFileName()
    {
        return $this->file_name;
    }

    /**
     * <pre>
     * File name of the frame.
     * </pre>
     *
     * <code>string file_name = 3;</code>
     */
    public function setFileName($var)
    {
        GPBUtil::checkString($var, True);
        $this->file_name = $var;
    }

    /**
     * <pre>
     * Line number of the frame.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     */
    public function getLineNumber()
    {
        return $this->line_number;
    }

    /**
     * <pre>
     * Line number of the frame.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     */
    public function setLineNumber($var)
    {
        GPBUtil::checkInt64($var);
        $this->line_number = $var;
    }

    /**
     * <pre>
     * Column number is important in JavaScript(anonymous functions),
     * Might not be available in some languages.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     */
    public function getColumnNumber()
    {
        return $this->column_number;
    }

    /**
     * <pre>
     * Column number is important in JavaScript(anonymous functions),
     * Might not be available in some languages.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     */
    public function setColumnNumber($var)
    {
        GPBUtil::checkInt64($var);
        $this->column_number = $var;
    }

    /**
     * <pre>
     * Binary module the code is loaded from.
     * </pre>
     *
     * <code>.google.tracing.v1.Module load_module = 6;</code>
     */
    public function getLoadModule()
    {
        return $this->load_module;
    }

    /**
     * <pre>
     * Binary module the code is loaded from.
     * </pre>
     *
     * <code>.google.tracing.v1.Module load_module = 6;</code>
     */
    public function setLoadModule(&$var)
    {
        GPBUtil::checkMessage($var, \Google\Tracing\V1\Module::class);
        $this->load_module = $var;
    }

    /**
     * <pre>
     * source_version is deployment specific. It might be
     * better to be stored in deployment metadata.
     * However, in distributed tracing, it’s hard to keep track of
     * source/binary versions at one place for all spans.
     * </pre>
     *
     * <code>string source_version = 7;</code>
     */
    public function getSourceVersion()
    {
        return $this->source_version;
    }

    /**
     * <pre>
     * source_version is deployment specific. It might be
     * better to be stored in deployment metadata.
     * However, in distributed tracing, it’s hard to keep track of
     * source/binary versions at one place for all spans.
     * </pre>
     *
     * <code>string source_version = 7;</code>
     */
    public function setSourceVersion($var)
    {
        GPBUtil::checkString($var, True);
        $this->source_version = $var;
    }

}

