<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/storagetransfer/v1/transfer_types.proto

namespace Google\Storagetransfer\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * TransferOptions uses three boolean parameters to define the actions
 * to be performed on objects in a transfer.
 * </pre>
 *
 * Protobuf type <code>google.storagetransfer.v1.TransferOptions</code>
 */
class TransferOptions extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Whether overwriting objects that already exist in the sink is allowed.
     * </pre>
     *
     * <code>bool overwrite_objects_already_existing_in_sink = 1;</code>
     */
    private $overwrite_objects_already_existing_in_sink = false;
    /**
     * <pre>
     * Whether objects that exist only in the sink should be deleted.
     * </pre>
     *
     * <code>bool delete_objects_unique_in_sink = 2;</code>
     */
    private $delete_objects_unique_in_sink = false;
    /**
     * <pre>
     * Whether objects should be deleted from the source after they are
     * transferred to the sink.
     * </pre>
     *
     * <code>bool delete_objects_from_source_after_transfer = 3;</code>
     */
    private $delete_objects_from_source_after_transfer = false;

    public function __construct() {
        \GPBMetadata\Google\Storagetransfer\V1\TransferTypes::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Whether overwriting objects that already exist in the sink is allowed.
     * </pre>
     *
     * <code>bool overwrite_objects_already_existing_in_sink = 1;</code>
     */
    public function getOverwriteObjectsAlreadyExistingInSink()
    {
        return $this->overwrite_objects_already_existing_in_sink;
    }

    /**
     * <pre>
     * Whether overwriting objects that already exist in the sink is allowed.
     * </pre>
     *
     * <code>bool overwrite_objects_already_existing_in_sink = 1;</code>
     */
    public function setOverwriteObjectsAlreadyExistingInSink($var)
    {
        GPBUtil::checkBool($var);
        $this->overwrite_objects_already_existing_in_sink = $var;
    }

    /**
     * <pre>
     * Whether objects that exist only in the sink should be deleted.
     * </pre>
     *
     * <code>bool delete_objects_unique_in_sink = 2;</code>
     */
    public function getDeleteObjectsUniqueInSink()
    {
        return $this->delete_objects_unique_in_sink;
    }

    /**
     * <pre>
     * Whether objects that exist only in the sink should be deleted.
     * </pre>
     *
     * <code>bool delete_objects_unique_in_sink = 2;</code>
     */
    public function setDeleteObjectsUniqueInSink($var)
    {
        GPBUtil::checkBool($var);
        $this->delete_objects_unique_in_sink = $var;
    }

    /**
     * <pre>
     * Whether objects should be deleted from the source after they are
     * transferred to the sink.
     * </pre>
     *
     * <code>bool delete_objects_from_source_after_transfer = 3;</code>
     */
    public function getDeleteObjectsFromSourceAfterTransfer()
    {
        return $this->delete_objects_from_source_after_transfer;
    }

    /**
     * <pre>
     * Whether objects should be deleted from the source after they are
     * transferred to the sink.
     * </pre>
     *
     * <code>bool delete_objects_from_source_after_transfer = 3;</code>
     */
    public function setDeleteObjectsFromSourceAfterTransfer($var)
    {
        GPBUtil::checkBool($var);
        $this->delete_objects_from_source_after_transfer = $var;
    }

}

