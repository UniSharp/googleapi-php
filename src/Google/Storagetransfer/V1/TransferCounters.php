<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/storagetransfer/v1/transfer_types.proto

namespace Google\Storagetransfer\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * <pre>
 * A collection of counters that report the progress of a transfer operation.
 * </pre>
 *
 * Protobuf type <code>google.storagetransfer.v1.TransferCounters</code>
 */
class TransferCounters extends \Google\Protobuf\Internal\Message
{
    /**
     * <pre>
     * Objects found in the data source that are scheduled to be transferred,
     * which will be copied, excluded based on conditions, or skipped due to
     * failures.
     * </pre>
     *
     * <code>int64 objects_found_from_source = 1;</code>
     */
    private $objects_found_from_source = 0;
    /**
     * <pre>
     * Bytes found in the data source that are scheduled to be transferred,
     * which will be copied, excluded based on conditions, or skipped due to
     * failures.
     * </pre>
     *
     * <code>int64 bytes_found_from_source = 2;</code>
     */
    private $bytes_found_from_source = 0;
    /**
     * <pre>
     * Objects found only in the data sink that are scheduled to be deleted.
     * </pre>
     *
     * <code>int64 objects_found_only_from_sink = 3;</code>
     */
    private $objects_found_only_from_sink = 0;
    /**
     * <pre>
     * Bytes found only in the data sink that are scheduled to be deleted.
     * </pre>
     *
     * <code>int64 bytes_found_only_from_sink = 4;</code>
     */
    private $bytes_found_only_from_sink = 0;
    /**
     * <pre>
     * Objects in the data source that are not transferred because they already
     * exist in the data sink.
     * </pre>
     *
     * <code>int64 objects_from_source_skipped_by_sync = 5;</code>
     */
    private $objects_from_source_skipped_by_sync = 0;
    /**
     * <pre>
     * Bytes in the data source that are not transferred because they already
     * exist in the data sink.
     * </pre>
     *
     * <code>int64 bytes_from_source_skipped_by_sync = 6;</code>
     */
    private $bytes_from_source_skipped_by_sync = 0;
    /**
     * <pre>
     * Objects that are copied to the data sink.
     * </pre>
     *
     * <code>int64 objects_copied_to_sink = 7;</code>
     */
    private $objects_copied_to_sink = 0;
    /**
     * <pre>
     * Bytes that are copied to the data sink.
     * </pre>
     *
     * <code>int64 bytes_copied_to_sink = 8;</code>
     */
    private $bytes_copied_to_sink = 0;
    /**
     * <pre>
     * Objects that are deleted from the data source.
     * </pre>
     *
     * <code>int64 objects_deleted_from_source = 9;</code>
     */
    private $objects_deleted_from_source = 0;
    /**
     * <pre>
     * Bytes that are deleted from the data source.
     * </pre>
     *
     * <code>int64 bytes_deleted_from_source = 10;</code>
     */
    private $bytes_deleted_from_source = 0;
    /**
     * <pre>
     * Objects that are deleted from the data sink.
     * </pre>
     *
     * <code>int64 objects_deleted_from_sink = 11;</code>
     */
    private $objects_deleted_from_sink = 0;
    /**
     * <pre>
     * Bytes that are deleted from the data sink.
     * </pre>
     *
     * <code>int64 bytes_deleted_from_sink = 12;</code>
     */
    private $bytes_deleted_from_sink = 0;
    /**
     * <pre>
     * Objects in the data source that failed during the transfer.
     * </pre>
     *
     * <code>int64 objects_from_source_failed = 13;</code>
     */
    private $objects_from_source_failed = 0;
    /**
     * <pre>
     * Bytes in the data source that failed during the transfer.
     * </pre>
     *
     * <code>int64 bytes_from_source_failed = 14;</code>
     */
    private $bytes_from_source_failed = 0;
    /**
     * <pre>
     * Objects that failed to be deleted from the data sink.
     * </pre>
     *
     * <code>int64 objects_failed_to_delete_from_sink = 15;</code>
     */
    private $objects_failed_to_delete_from_sink = 0;
    /**
     * <pre>
     * Bytes that failed to be deleted from the data sink.
     * </pre>
     *
     * <code>int64 bytes_failed_to_delete_from_sink = 16;</code>
     */
    private $bytes_failed_to_delete_from_sink = 0;

    public function __construct() {
        \GPBMetadata\Google\Storagetransfer\V1\TransferTypes::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * Objects found in the data source that are scheduled to be transferred,
     * which will be copied, excluded based on conditions, or skipped due to
     * failures.
     * </pre>
     *
     * <code>int64 objects_found_from_source = 1;</code>
     */
    public function getObjectsFoundFromSource()
    {
        return $this->objects_found_from_source;
    }

    /**
     * <pre>
     * Objects found in the data source that are scheduled to be transferred,
     * which will be copied, excluded based on conditions, or skipped due to
     * failures.
     * </pre>
     *
     * <code>int64 objects_found_from_source = 1;</code>
     */
    public function setObjectsFoundFromSource($var)
    {
        GPBUtil::checkInt64($var);
        $this->objects_found_from_source = $var;
    }

    /**
     * <pre>
     * Bytes found in the data source that are scheduled to be transferred,
     * which will be copied, excluded based on conditions, or skipped due to
     * failures.
     * </pre>
     *
     * <code>int64 bytes_found_from_source = 2;</code>
     */
    public function getBytesFoundFromSource()
    {
        return $this->bytes_found_from_source;
    }

    /**
     * <pre>
     * Bytes found in the data source that are scheduled to be transferred,
     * which will be copied, excluded based on conditions, or skipped due to
     * failures.
     * </pre>
     *
     * <code>int64 bytes_found_from_source = 2;</code>
     */
    public function setBytesFoundFromSource($var)
    {
        GPBUtil::checkInt64($var);
        $this->bytes_found_from_source = $var;
    }

    /**
     * <pre>
     * Objects found only in the data sink that are scheduled to be deleted.
     * </pre>
     *
     * <code>int64 objects_found_only_from_sink = 3;</code>
     */
    public function getObjectsFoundOnlyFromSink()
    {
        return $this->objects_found_only_from_sink;
    }

    /**
     * <pre>
     * Objects found only in the data sink that are scheduled to be deleted.
     * </pre>
     *
     * <code>int64 objects_found_only_from_sink = 3;</code>
     */
    public function setObjectsFoundOnlyFromSink($var)
    {
        GPBUtil::checkInt64($var);
        $this->objects_found_only_from_sink = $var;
    }

    /**
     * <pre>
     * Bytes found only in the data sink that are scheduled to be deleted.
     * </pre>
     *
     * <code>int64 bytes_found_only_from_sink = 4;</code>
     */
    public function getBytesFoundOnlyFromSink()
    {
        return $this->bytes_found_only_from_sink;
    }

    /**
     * <pre>
     * Bytes found only in the data sink that are scheduled to be deleted.
     * </pre>
     *
     * <code>int64 bytes_found_only_from_sink = 4;</code>
     */
    public function setBytesFoundOnlyFromSink($var)
    {
        GPBUtil::checkInt64($var);
        $this->bytes_found_only_from_sink = $var;
    }

    /**
     * <pre>
     * Objects in the data source that are not transferred because they already
     * exist in the data sink.
     * </pre>
     *
     * <code>int64 objects_from_source_skipped_by_sync = 5;</code>
     */
    public function getObjectsFromSourceSkippedBySync()
    {
        return $this->objects_from_source_skipped_by_sync;
    }

    /**
     * <pre>
     * Objects in the data source that are not transferred because they already
     * exist in the data sink.
     * </pre>
     *
     * <code>int64 objects_from_source_skipped_by_sync = 5;</code>
     */
    public function setObjectsFromSourceSkippedBySync($var)
    {
        GPBUtil::checkInt64($var);
        $this->objects_from_source_skipped_by_sync = $var;
    }

    /**
     * <pre>
     * Bytes in the data source that are not transferred because they already
     * exist in the data sink.
     * </pre>
     *
     * <code>int64 bytes_from_source_skipped_by_sync = 6;</code>
     */
    public function getBytesFromSourceSkippedBySync()
    {
        return $this->bytes_from_source_skipped_by_sync;
    }

    /**
     * <pre>
     * Bytes in the data source that are not transferred because they already
     * exist in the data sink.
     * </pre>
     *
     * <code>int64 bytes_from_source_skipped_by_sync = 6;</code>
     */
    public function setBytesFromSourceSkippedBySync($var)
    {
        GPBUtil::checkInt64($var);
        $this->bytes_from_source_skipped_by_sync = $var;
    }

    /**
     * <pre>
     * Objects that are copied to the data sink.
     * </pre>
     *
     * <code>int64 objects_copied_to_sink = 7;</code>
     */
    public function getObjectsCopiedToSink()
    {
        return $this->objects_copied_to_sink;
    }

    /**
     * <pre>
     * Objects that are copied to the data sink.
     * </pre>
     *
     * <code>int64 objects_copied_to_sink = 7;</code>
     */
    public function setObjectsCopiedToSink($var)
    {
        GPBUtil::checkInt64($var);
        $this->objects_copied_to_sink = $var;
    }

    /**
     * <pre>
     * Bytes that are copied to the data sink.
     * </pre>
     *
     * <code>int64 bytes_copied_to_sink = 8;</code>
     */
    public function getBytesCopiedToSink()
    {
        return $this->bytes_copied_to_sink;
    }

    /**
     * <pre>
     * Bytes that are copied to the data sink.
     * </pre>
     *
     * <code>int64 bytes_copied_to_sink = 8;</code>
     */
    public function setBytesCopiedToSink($var)
    {
        GPBUtil::checkInt64($var);
        $this->bytes_copied_to_sink = $var;
    }

    /**
     * <pre>
     * Objects that are deleted from the data source.
     * </pre>
     *
     * <code>int64 objects_deleted_from_source = 9;</code>
     */
    public function getObjectsDeletedFromSource()
    {
        return $this->objects_deleted_from_source;
    }

    /**
     * <pre>
     * Objects that are deleted from the data source.
     * </pre>
     *
     * <code>int64 objects_deleted_from_source = 9;</code>
     */
    public function setObjectsDeletedFromSource($var)
    {
        GPBUtil::checkInt64($var);
        $this->objects_deleted_from_source = $var;
    }

    /**
     * <pre>
     * Bytes that are deleted from the data source.
     * </pre>
     *
     * <code>int64 bytes_deleted_from_source = 10;</code>
     */
    public function getBytesDeletedFromSource()
    {
        return $this->bytes_deleted_from_source;
    }

    /**
     * <pre>
     * Bytes that are deleted from the data source.
     * </pre>
     *
     * <code>int64 bytes_deleted_from_source = 10;</code>
     */
    public function setBytesDeletedFromSource($var)
    {
        GPBUtil::checkInt64($var);
        $this->bytes_deleted_from_source = $var;
    }

    /**
     * <pre>
     * Objects that are deleted from the data sink.
     * </pre>
     *
     * <code>int64 objects_deleted_from_sink = 11;</code>
     */
    public function getObjectsDeletedFromSink()
    {
        return $this->objects_deleted_from_sink;
    }

    /**
     * <pre>
     * Objects that are deleted from the data sink.
     * </pre>
     *
     * <code>int64 objects_deleted_from_sink = 11;</code>
     */
    public function setObjectsDeletedFromSink($var)
    {
        GPBUtil::checkInt64($var);
        $this->objects_deleted_from_sink = $var;
    }

    /**
     * <pre>
     * Bytes that are deleted from the data sink.
     * </pre>
     *
     * <code>int64 bytes_deleted_from_sink = 12;</code>
     */
    public function getBytesDeletedFromSink()
    {
        return $this->bytes_deleted_from_sink;
    }

    /**
     * <pre>
     * Bytes that are deleted from the data sink.
     * </pre>
     *
     * <code>int64 bytes_deleted_from_sink = 12;</code>
     */
    public function setBytesDeletedFromSink($var)
    {
        GPBUtil::checkInt64($var);
        $this->bytes_deleted_from_sink = $var;
    }

    /**
     * <pre>
     * Objects in the data source that failed during the transfer.
     * </pre>
     *
     * <code>int64 objects_from_source_failed = 13;</code>
     */
    public function getObjectsFromSourceFailed()
    {
        return $this->objects_from_source_failed;
    }

    /**
     * <pre>
     * Objects in the data source that failed during the transfer.
     * </pre>
     *
     * <code>int64 objects_from_source_failed = 13;</code>
     */
    public function setObjectsFromSourceFailed($var)
    {
        GPBUtil::checkInt64($var);
        $this->objects_from_source_failed = $var;
    }

    /**
     * <pre>
     * Bytes in the data source that failed during the transfer.
     * </pre>
     *
     * <code>int64 bytes_from_source_failed = 14;</code>
     */
    public function getBytesFromSourceFailed()
    {
        return $this->bytes_from_source_failed;
    }

    /**
     * <pre>
     * Bytes in the data source that failed during the transfer.
     * </pre>
     *
     * <code>int64 bytes_from_source_failed = 14;</code>
     */
    public function setBytesFromSourceFailed($var)
    {
        GPBUtil::checkInt64($var);
        $this->bytes_from_source_failed = $var;
    }

    /**
     * <pre>
     * Objects that failed to be deleted from the data sink.
     * </pre>
     *
     * <code>int64 objects_failed_to_delete_from_sink = 15;</code>
     */
    public function getObjectsFailedToDeleteFromSink()
    {
        return $this->objects_failed_to_delete_from_sink;
    }

    /**
     * <pre>
     * Objects that failed to be deleted from the data sink.
     * </pre>
     *
     * <code>int64 objects_failed_to_delete_from_sink = 15;</code>
     */
    public function setObjectsFailedToDeleteFromSink($var)
    {
        GPBUtil::checkInt64($var);
        $this->objects_failed_to_delete_from_sink = $var;
    }

    /**
     * <pre>
     * Bytes that failed to be deleted from the data sink.
     * </pre>
     *
     * <code>int64 bytes_failed_to_delete_from_sink = 16;</code>
     */
    public function getBytesFailedToDeleteFromSink()
    {
        return $this->bytes_failed_to_delete_from_sink;
    }

    /**
     * <pre>
     * Bytes that failed to be deleted from the data sink.
     * </pre>
     *
     * <code>int64 bytes_failed_to_delete_from_sink = 16;</code>
     */
    public function setBytesFailedToDeleteFromSink($var)
    {
        GPBUtil::checkInt64($var);
        $this->bytes_failed_to_delete_from_sink = $var;
    }

}

