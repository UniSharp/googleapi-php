<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/genomics/v1/variants.proto
//   Date: 2017-06-13 04:25:47

namespace google\genomics\v1 {

  class InfoMergeOperation extends \DrSlump\Protobuf\Enum {
    const INFO_MERGE_OPERATION_UNSPECIFIED = 0;
    const IGNORE_NEW = 1;
    const MOVE_TO_CALLS = 2;
  }
}
namespace google\genomics\v1\VariantSetMetadata {

  class Type extends \DrSlump\Protobuf\Enum {
    const TYPE_UNSPECIFIED = 0;
    const INTEGER = 1;
    const FLOAT = 2;
    const FLAG = 3;
    const CHARACTER = 4;
    const STRING = 5;
  }
}
namespace google\genomics\v1\VariantSetMetadata {

  class InfoEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\protobuf\ListValue */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.VariantSetMetadata.InfoEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\genomics\v1\VariantSetMetadata\InfoEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSetMetadata\InfoEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\genomics\v1\VariantSetMetadata\InfoEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\protobuf\ListValue
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\genomics\v1\VariantSetMetadata\InfoEntry
     */
    public function setValue(\google\protobuf\ListValue $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1 {

  class VariantSetMetadata extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    
    /**  @var string */
    public $id = null;
    
    /**  @var int - \google\genomics\v1\VariantSetMetadata\Type */
    public $type = null;
    
    /**  @var string */
    public $number = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var \google\genomics\v1\VariantSetMetadata\InfoEntry[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.VariantSetMetadata');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\VariantSetMetadata\Type';
      $descriptor->addField($f);

      // OPTIONAL STRING number = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "number";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\VariantSetMetadata\InfoEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function clearId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(4);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function setId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <type> value
     *
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function clearType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \google\genomics\v1\VariantSetMetadata\Type
     */
    public function getType(){
      return $this->_get(5);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \google\genomics\v1\VariantSetMetadata\Type $value
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function setType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <number> has a value
     *
     * @return boolean
     */
    public function hasNumber(){
      return $this->_has(8);
    }
    
    /**
     * Clear <number> value
     *
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function clearNumber(){
      return $this->_clear(8);
    }
    
    /**
     * Get <number> value
     *
     * @return string
     */
    public function getNumber(){
      return $this->_get(8);
    }
    
    /**
     * Set <number> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function setNumber( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(7);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function clearDescription(){
      return $this->_clear(7);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(7);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function setDescription( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <info> value
     *
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function clearInfo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \google\genomics\v1\VariantSetMetadata\InfoEntry
     */
    public function getInfo($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \google\genomics\v1\VariantSetMetadata\InfoEntry $value
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function setInfo(\google\genomics\v1\VariantSetMetadata\InfoEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \google\genomics\v1\VariantSetMetadata\InfoEntry[]
     */
    public function getInfoList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \google\genomics\v1\VariantSetMetadata\InfoEntry $value
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function addInfo(\google\genomics\v1\VariantSetMetadata\InfoEntry $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\genomics\v1 {

  class VariantSet extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $dataset_id = null;
    
    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $reference_set_id = null;
    
    /**  @var \google\genomics\v1\ReferenceBound[]  */
    public $reference_bounds = array();
    
    /**  @var \google\genomics\v1\VariantSetMetadata[]  */
    public $metadata = array();
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.VariantSet');

      // OPTIONAL STRING dataset_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dataset_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING reference_set_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "reference_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE reference_bounds = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "reference_bounds";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\ReferenceBound';
      $descriptor->addField($f);

      // REPEATED MESSAGE metadata = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "metadata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\VariantSetMetadata';
      $descriptor->addField($f);

      // OPTIONAL STRING name = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dataset_id> has a value
     *
     * @return boolean
     */
    public function hasDatasetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dataset_id> value
     *
     * @return \google\genomics\v1\VariantSet
     */
    public function clearDatasetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dataset_id> value
     *
     * @return string
     */
    public function getDatasetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <dataset_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSet
     */
    public function setDatasetId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\genomics\v1\VariantSet
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSet
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <reference_set_id> has a value
     *
     * @return boolean
     */
    public function hasReferenceSetId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <reference_set_id> value
     *
     * @return \google\genomics\v1\VariantSet
     */
    public function clearReferenceSetId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <reference_set_id> value
     *
     * @return string
     */
    public function getReferenceSetId(){
      return $this->_get(6);
    }
    
    /**
     * Set <reference_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSet
     */
    public function setReferenceSetId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <reference_bounds> has a value
     *
     * @return boolean
     */
    public function hasReferenceBounds(){
      return $this->_has(5);
    }
    
    /**
     * Clear <reference_bounds> value
     *
     * @return \google\genomics\v1\VariantSet
     */
    public function clearReferenceBounds(){
      return $this->_clear(5);
    }
    
    /**
     * Get <reference_bounds> value
     *
     * @param int $idx
     * @return \google\genomics\v1\ReferenceBound
     */
    public function getReferenceBounds($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <reference_bounds> value
     *
     * @param \google\genomics\v1\ReferenceBound $value
     * @return \google\genomics\v1\VariantSet
     */
    public function setReferenceBounds(\google\genomics\v1\ReferenceBound $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <reference_bounds>
     *
     * @return \google\genomics\v1\ReferenceBound[]
     */
    public function getReferenceBoundsList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <reference_bounds>
     *
     * @param \google\genomics\v1\ReferenceBound $value
     * @return \google\genomics\v1\VariantSet
     */
    public function addReferenceBounds(\google\genomics\v1\ReferenceBound $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <metadata> has a value
     *
     * @return boolean
     */
    public function hasMetadata(){
      return $this->_has(4);
    }
    
    /**
     * Clear <metadata> value
     *
     * @return \google\genomics\v1\VariantSet
     */
    public function clearMetadata(){
      return $this->_clear(4);
    }
    
    /**
     * Get <metadata> value
     *
     * @param int $idx
     * @return \google\genomics\v1\VariantSetMetadata
     */
    public function getMetadata($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <metadata> value
     *
     * @param \google\genomics\v1\VariantSetMetadata $value
     * @return \google\genomics\v1\VariantSet
     */
    public function setMetadata(\google\genomics\v1\VariantSetMetadata $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <metadata>
     *
     * @return \google\genomics\v1\VariantSetMetadata[]
     */
    public function getMetadataList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <metadata>
     *
     * @param \google\genomics\v1\VariantSetMetadata $value
     * @return \google\genomics\v1\VariantSet
     */
    public function addMetadata(\google\genomics\v1\VariantSetMetadata $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(7);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\genomics\v1\VariantSet
     */
    public function clearName(){
      return $this->_clear(7);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(7);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSet
     */
    public function setName( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(8);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\genomics\v1\VariantSet
     */
    public function clearDescription(){
      return $this->_clear(8);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(8);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantSet
     */
    public function setDescription( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace google\genomics\v1\Variant {

  class InfoEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\protobuf\ListValue */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.Variant.InfoEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\genomics\v1\Variant\InfoEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\genomics\v1\Variant\InfoEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\genomics\v1\Variant\InfoEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\protobuf\ListValue
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\genomics\v1\Variant\InfoEntry
     */
    public function setValue(\google\protobuf\ListValue $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1 {

  class Variant extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_set_id = null;
    
    /**  @var string */
    public $id = null;
    
    /**  @var string[]  */
    public $names = array();
    
    /**  @var int */
    public $created = null;
    
    /**  @var string */
    public $reference_name = null;
    
    /**  @var int */
    public $start = null;
    
    /**  @var int */
    public $end = null;
    
    /**  @var string */
    public $reference_bases = null;
    
    /**  @var string[]  */
    public $alternate_bases = array();
    
    /**  @var float */
    public $quality = null;
    
    /**  @var string[]  */
    public $filter = array();
    
    /**  @var \google\genomics\v1\Variant\InfoEntry[]  */
    public $info = array();
    
    /**  @var \google\genomics\v1\VariantCall[]  */
    public $calls = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.Variant');

      // OPTIONAL STRING variant_set_id = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "variant_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING names = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "names";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT64 created = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "created";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING reference_name = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "reference_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 start = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 end = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "end";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING reference_bases = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "reference_bases";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING alternate_bases = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "alternate_bases";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE quality = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "quality";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING filter = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\Variant\InfoEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE calls = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "calls";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\VariantCall';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set_id> has a value
     *
     * @return boolean
     */
    public function hasVariantSetId(){
      return $this->_has(15);
    }
    
    /**
     * Clear <variant_set_id> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearVariantSetId(){
      return $this->_clear(15);
    }
    
    /**
     * Get <variant_set_id> value
     *
     * @return string
     */
    public function getVariantSetId(){
      return $this->_get(15);
    }
    
    /**
     * Set <variant_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function setVariantSetId( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <names> has a value
     *
     * @return boolean
     */
    public function hasNames(){
      return $this->_has(3);
    }
    
    /**
     * Clear <names> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearNames(){
      return $this->_clear(3);
    }
    
    /**
     * Get <names> value
     *
     * @param int $idx
     * @return string
     */
    public function getNames($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <names> value
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function setNames( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <names>
     *
     * @return string[]
     */
    public function getNamesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <names>
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function addNames( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated(){
      return $this->_has(12);
    }
    
    /**
     * Clear <created> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearCreated(){
      return $this->_clear(12);
    }
    
    /**
     * Get <created> value
     *
     * @return int
     */
    public function getCreated(){
      return $this->_get(12);
    }
    
    /**
     * Set <created> value
     *
     * @param int $value
     * @return \google\genomics\v1\Variant
     */
    public function setCreated( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <reference_name> has a value
     *
     * @return boolean
     */
    public function hasReferenceName(){
      return $this->_has(14);
    }
    
    /**
     * Clear <reference_name> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearReferenceName(){
      return $this->_clear(14);
    }
    
    /**
     * Get <reference_name> value
     *
     * @return string
     */
    public function getReferenceName(){
      return $this->_get(14);
    }
    
    /**
     * Set <reference_name> value
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function setReferenceName( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(16);
    }
    
    /**
     * Clear <start> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearStart(){
      return $this->_clear(16);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(16);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \google\genomics\v1\Variant
     */
    public function setStart( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(13);
    }
    
    /**
     * Clear <end> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearEnd(){
      return $this->_clear(13);
    }
    
    /**
     * Get <end> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(13);
    }
    
    /**
     * Set <end> value
     *
     * @param int $value
     * @return \google\genomics\v1\Variant
     */
    public function setEnd( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <reference_bases> has a value
     *
     * @return boolean
     */
    public function hasReferenceBases(){
      return $this->_has(6);
    }
    
    /**
     * Clear <reference_bases> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearReferenceBases(){
      return $this->_clear(6);
    }
    
    /**
     * Get <reference_bases> value
     *
     * @return string
     */
    public function getReferenceBases(){
      return $this->_get(6);
    }
    
    /**
     * Set <reference_bases> value
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function setReferenceBases( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <alternate_bases> has a value
     *
     * @return boolean
     */
    public function hasAlternateBases(){
      return $this->_has(7);
    }
    
    /**
     * Clear <alternate_bases> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearAlternateBases(){
      return $this->_clear(7);
    }
    
    /**
     * Get <alternate_bases> value
     *
     * @param int $idx
     * @return string
     */
    public function getAlternateBases($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <alternate_bases> value
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function setAlternateBases( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <alternate_bases>
     *
     * @return string[]
     */
    public function getAlternateBasesList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <alternate_bases>
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function addAlternateBases( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <quality> has a value
     *
     * @return boolean
     */
    public function hasQuality(){
      return $this->_has(8);
    }
    
    /**
     * Clear <quality> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearQuality(){
      return $this->_clear(8);
    }
    
    /**
     * Get <quality> value
     *
     * @return float
     */
    public function getQuality(){
      return $this->_get(8);
    }
    
    /**
     * Set <quality> value
     *
     * @param float $value
     * @return \google\genomics\v1\Variant
     */
    public function setQuality( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(9);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearFilter(){
      return $this->_clear(9);
    }
    
    /**
     * Get <filter> value
     *
     * @param int $idx
     * @return string
     */
    public function getFilter($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <filter> value
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function setFilter( $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <filter>
     *
     * @return string[]
     */
    public function getFilterList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <filter>
     *
     * @param string $value
     * @return \google\genomics\v1\Variant
     */
    public function addFilter( $value){
     return $this->_add(9, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(10);
    }
    
    /**
     * Clear <info> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearInfo(){
      return $this->_clear(10);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \google\genomics\v1\Variant\InfoEntry
     */
    public function getInfo($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \google\genomics\v1\Variant\InfoEntry $value
     * @return \google\genomics\v1\Variant
     */
    public function setInfo(\google\genomics\v1\Variant\InfoEntry $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \google\genomics\v1\Variant\InfoEntry[]
     */
    public function getInfoList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \google\genomics\v1\Variant\InfoEntry $value
     * @return \google\genomics\v1\Variant
     */
    public function addInfo(\google\genomics\v1\Variant\InfoEntry $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <calls> has a value
     *
     * @return boolean
     */
    public function hasCalls(){
      return $this->_has(11);
    }
    
    /**
     * Clear <calls> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function clearCalls(){
      return $this->_clear(11);
    }
    
    /**
     * Get <calls> value
     *
     * @param int $idx
     * @return \google\genomics\v1\VariantCall
     */
    public function getCalls($idx = NULL){
      return $this->_get(11, $idx);
    }
    
    /**
     * Set <calls> value
     *
     * @param \google\genomics\v1\VariantCall $value
     * @return \google\genomics\v1\Variant
     */
    public function setCalls(\google\genomics\v1\VariantCall $value, $idx = NULL){
      return $this->_set(11, $value, $idx);
    }
    
    /**
     * Get all elements of <calls>
     *
     * @return \google\genomics\v1\VariantCall[]
     */
    public function getCallsList(){
     return $this->_get(11);
    }
    
    /**
     * Add a new element to <calls>
     *
     * @param \google\genomics\v1\VariantCall $value
     * @return \google\genomics\v1\Variant
     */
    public function addCalls(\google\genomics\v1\VariantCall $value){
     return $this->_add(11, $value);
    }
  }
}

namespace google\genomics\v1\VariantCall {

  class InfoEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\protobuf\ListValue */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.VariantCall.InfoEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\genomics\v1\VariantCall\InfoEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantCall\InfoEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\genomics\v1\VariantCall\InfoEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\protobuf\ListValue
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\genomics\v1\VariantCall\InfoEntry
     */
    public function setValue(\google\protobuf\ListValue $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1 {

  class VariantCall extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $call_set_id = null;
    
    /**  @var string */
    public $call_set_name = null;
    
    /**  @var int[]  */
    public $genotype = array();
    
    /**  @var string */
    public $phaseset = null;
    
    /**  @var float[]  */
    public $genotype_likelihood = array();
    
    /**  @var \google\genomics\v1\VariantCall\InfoEntry[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.VariantCall');

      // OPTIONAL STRING call_set_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "call_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING call_set_name = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "call_set_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED INT32 genotype = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "genotype";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING phaseset = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "phaseset";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED DOUBLE genotype_likelihood = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "genotype_likelihood";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\VariantCall\InfoEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <call_set_id> has a value
     *
     * @return boolean
     */
    public function hasCallSetId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <call_set_id> value
     *
     * @return \google\genomics\v1\VariantCall
     */
    public function clearCallSetId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <call_set_id> value
     *
     * @return string
     */
    public function getCallSetId(){
      return $this->_get(8);
    }
    
    /**
     * Set <call_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantCall
     */
    public function setCallSetId( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <call_set_name> has a value
     *
     * @return boolean
     */
    public function hasCallSetName(){
      return $this->_has(9);
    }
    
    /**
     * Clear <call_set_name> value
     *
     * @return \google\genomics\v1\VariantCall
     */
    public function clearCallSetName(){
      return $this->_clear(9);
    }
    
    /**
     * Get <call_set_name> value
     *
     * @return string
     */
    public function getCallSetName(){
      return $this->_get(9);
    }
    
    /**
     * Set <call_set_name> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantCall
     */
    public function setCallSetName( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <genotype> has a value
     *
     * @return boolean
     */
    public function hasGenotype(){
      return $this->_has(7);
    }
    
    /**
     * Clear <genotype> value
     *
     * @return \google\genomics\v1\VariantCall
     */
    public function clearGenotype(){
      return $this->_clear(7);
    }
    
    /**
     * Get <genotype> value
     *
     * @param int $idx
     * @return int
     */
    public function getGenotype($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <genotype> value
     *
     * @param int $value
     * @return \google\genomics\v1\VariantCall
     */
    public function setGenotype( $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <genotype>
     *
     * @return int[]
     */
    public function getGenotypeList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <genotype>
     *
     * @param int $value
     * @return \google\genomics\v1\VariantCall
     */
    public function addGenotype( $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <phaseset> has a value
     *
     * @return boolean
     */
    public function hasPhaseset(){
      return $this->_has(5);
    }
    
    /**
     * Clear <phaseset> value
     *
     * @return \google\genomics\v1\VariantCall
     */
    public function clearPhaseset(){
      return $this->_clear(5);
    }
    
    /**
     * Get <phaseset> value
     *
     * @return string
     */
    public function getPhaseset(){
      return $this->_get(5);
    }
    
    /**
     * Set <phaseset> value
     *
     * @param string $value
     * @return \google\genomics\v1\VariantCall
     */
    public function setPhaseset( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <genotype_likelihood> has a value
     *
     * @return boolean
     */
    public function hasGenotypeLikelihood(){
      return $this->_has(6);
    }
    
    /**
     * Clear <genotype_likelihood> value
     *
     * @return \google\genomics\v1\VariantCall
     */
    public function clearGenotypeLikelihood(){
      return $this->_clear(6);
    }
    
    /**
     * Get <genotype_likelihood> value
     *
     * @param int $idx
     * @return float
     */
    public function getGenotypeLikelihood($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <genotype_likelihood> value
     *
     * @param float $value
     * @return \google\genomics\v1\VariantCall
     */
    public function setGenotypeLikelihood( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <genotype_likelihood>
     *
     * @return float[]
     */
    public function getGenotypeLikelihoodList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <genotype_likelihood>
     *
     * @param float $value
     * @return \google\genomics\v1\VariantCall
     */
    public function addGenotypeLikelihood( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <info> value
     *
     * @return \google\genomics\v1\VariantCall
     */
    public function clearInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \google\genomics\v1\VariantCall\InfoEntry
     */
    public function getInfo($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \google\genomics\v1\VariantCall\InfoEntry $value
     * @return \google\genomics\v1\VariantCall
     */
    public function setInfo(\google\genomics\v1\VariantCall\InfoEntry $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \google\genomics\v1\VariantCall\InfoEntry[]
     */
    public function getInfoList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \google\genomics\v1\VariantCall\InfoEntry $value
     * @return \google\genomics\v1\VariantCall
     */
    public function addInfo(\google\genomics\v1\VariantCall\InfoEntry $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\genomics\v1\CallSet {

  class InfoEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\protobuf\ListValue */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.CallSet.InfoEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\ListValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\genomics\v1\CallSet\InfoEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\genomics\v1\CallSet\InfoEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\genomics\v1\CallSet\InfoEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\protobuf\ListValue
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\protobuf\ListValue $value
     * @return \google\genomics\v1\CallSet\InfoEntry
     */
    public function setValue(\google\protobuf\ListValue $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1 {

  class CallSet extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $sample_id = null;
    
    /**  @var string[]  */
    public $variant_set_ids = array();
    
    /**  @var int */
    public $created = null;
    
    /**  @var \google\genomics\v1\CallSet\InfoEntry[]  */
    public $info = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.CallSet');

      // OPTIONAL STRING id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sample_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "sample_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING variant_set_ids = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "variant_set_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT64 created = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "created";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE info = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\CallSet\InfoEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \google\genomics\v1\CallSet
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return string
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param string $value
     * @return \google\genomics\v1\CallSet
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\genomics\v1\CallSet
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\genomics\v1\CallSet
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sample_id> has a value
     *
     * @return boolean
     */
    public function hasSampleId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <sample_id> value
     *
     * @return \google\genomics\v1\CallSet
     */
    public function clearSampleId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <sample_id> value
     *
     * @return string
     */
    public function getSampleId(){
      return $this->_get(7);
    }
    
    /**
     * Set <sample_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\CallSet
     */
    public function setSampleId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <variant_set_ids> has a value
     *
     * @return boolean
     */
    public function hasVariantSetIds(){
      return $this->_has(6);
    }
    
    /**
     * Clear <variant_set_ids> value
     *
     * @return \google\genomics\v1\CallSet
     */
    public function clearVariantSetIds(){
      return $this->_clear(6);
    }
    
    /**
     * Get <variant_set_ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getVariantSetIds($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <variant_set_ids> value
     *
     * @param string $value
     * @return \google\genomics\v1\CallSet
     */
    public function setVariantSetIds( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <variant_set_ids>
     *
     * @return string[]
     */
    public function getVariantSetIdsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <variant_set_ids>
     *
     * @param string $value
     * @return \google\genomics\v1\CallSet
     */
    public function addVariantSetIds( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <created> has a value
     *
     * @return boolean
     */
    public function hasCreated(){
      return $this->_has(5);
    }
    
    /**
     * Clear <created> value
     *
     * @return \google\genomics\v1\CallSet
     */
    public function clearCreated(){
      return $this->_clear(5);
    }
    
    /**
     * Get <created> value
     *
     * @return int
     */
    public function getCreated(){
      return $this->_get(5);
    }
    
    /**
     * Set <created> value
     *
     * @param int $value
     * @return \google\genomics\v1\CallSet
     */
    public function setCreated( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <info> has a value
     *
     * @return boolean
     */
    public function hasInfo(){
      return $this->_has(4);
    }
    
    /**
     * Clear <info> value
     *
     * @return \google\genomics\v1\CallSet
     */
    public function clearInfo(){
      return $this->_clear(4);
    }
    
    /**
     * Get <info> value
     *
     * @param int $idx
     * @return \google\genomics\v1\CallSet\InfoEntry
     */
    public function getInfo($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <info> value
     *
     * @param \google\genomics\v1\CallSet\InfoEntry $value
     * @return \google\genomics\v1\CallSet
     */
    public function setInfo(\google\genomics\v1\CallSet\InfoEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <info>
     *
     * @return \google\genomics\v1\CallSet\InfoEntry[]
     */
    public function getInfoList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <info>
     *
     * @param \google\genomics\v1\CallSet\InfoEntry $value
     * @return \google\genomics\v1\CallSet
     */
    public function addInfo(\google\genomics\v1\CallSet\InfoEntry $value){
     return $this->_add(4, $value);
    }
  }
}

namespace google\genomics\v1 {

  class ReferenceBound extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $reference_name = null;
    
    /**  @var int */
    public $upper_bound = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.ReferenceBound');

      // OPTIONAL STRING reference_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "reference_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 upper_bound = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "upper_bound";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <reference_name> has a value
     *
     * @return boolean
     */
    public function hasReferenceName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <reference_name> value
     *
     * @return \google\genomics\v1\ReferenceBound
     */
    public function clearReferenceName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <reference_name> value
     *
     * @return string
     */
    public function getReferenceName(){
      return $this->_get(1);
    }
    
    /**
     * Set <reference_name> value
     *
     * @param string $value
     * @return \google\genomics\v1\ReferenceBound
     */
    public function setReferenceName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <upper_bound> has a value
     *
     * @return boolean
     */
    public function hasUpperBound(){
      return $this->_has(2);
    }
    
    /**
     * Clear <upper_bound> value
     *
     * @return \google\genomics\v1\ReferenceBound
     */
    public function clearUpperBound(){
      return $this->_clear(2);
    }
    
    /**
     * Get <upper_bound> value
     *
     * @return int
     */
    public function getUpperBound(){
      return $this->_get(2);
    }
    
    /**
     * Set <upper_bound> value
     *
     * @param int $value
     * @return \google\genomics\v1\ReferenceBound
     */
    public function setUpperBound( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1\ImportVariantsRequest {

  class Format extends \DrSlump\Protobuf\Enum {
    const FORMAT_UNSPECIFIED = 0;
    const FORMAT_VCF = 1;
    const FORMAT_COMPLETE_GENOMICS = 2;
  }
}
namespace google\genomics\v1\ImportVariantsRequest {

  class InfoMergeConfigEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int - \google\genomics\v1\InfoMergeOperation */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.ImportVariantsRequest.InfoMergeConfigEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\InfoMergeOperation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int - \google\genomics\v1\InfoMergeOperation
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int - \google\genomics\v1\InfoMergeOperation $value
     * @return \google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1 {

  class ImportVariantsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_set_id = null;
    
    /**  @var string[]  */
    public $source_uris = array();
    
    /**  @var int - \google\genomics\v1\ImportVariantsRequest\Format */
    public $format = null;
    
    /**  @var boolean */
    public $normalize_reference_names = null;
    
    /**  @var \google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry[]  */
    public $info_merge_config = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.ImportVariantsRequest');

      // OPTIONAL STRING variant_set_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING source_uris = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "source_uris";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL ENUM format = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "format";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\ImportVariantsRequest\Format';
      $descriptor->addField($f);

      // OPTIONAL BOOL normalize_reference_names = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "normalize_reference_names";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE info_merge_config = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "info_merge_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set_id> has a value
     *
     * @return boolean
     */
    public function hasVariantSetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_set_id> value
     *
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function clearVariantSetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_set_id> value
     *
     * @return string
     */
    public function getVariantSetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function setVariantSetId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <source_uris> has a value
     *
     * @return boolean
     */
    public function hasSourceUris(){
      return $this->_has(2);
    }
    
    /**
     * Clear <source_uris> value
     *
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function clearSourceUris(){
      return $this->_clear(2);
    }
    
    /**
     * Get <source_uris> value
     *
     * @param int $idx
     * @return string
     */
    public function getSourceUris($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <source_uris> value
     *
     * @param string $value
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function setSourceUris( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <source_uris>
     *
     * @return string[]
     */
    public function getSourceUrisList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <source_uris>
     *
     * @param string $value
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function addSourceUris( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <format> has a value
     *
     * @return boolean
     */
    public function hasFormat(){
      return $this->_has(3);
    }
    
    /**
     * Clear <format> value
     *
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function clearFormat(){
      return $this->_clear(3);
    }
    
    /**
     * Get <format> value
     *
     * @return int - \google\genomics\v1\ImportVariantsRequest\Format
     */
    public function getFormat(){
      return $this->_get(3);
    }
    
    /**
     * Set <format> value
     *
     * @param int - \google\genomics\v1\ImportVariantsRequest\Format $value
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function setFormat( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <normalize_reference_names> has a value
     *
     * @return boolean
     */
    public function hasNormalizeReferenceNames(){
      return $this->_has(5);
    }
    
    /**
     * Clear <normalize_reference_names> value
     *
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function clearNormalizeReferenceNames(){
      return $this->_clear(5);
    }
    
    /**
     * Get <normalize_reference_names> value
     *
     * @return boolean
     */
    public function getNormalizeReferenceNames(){
      return $this->_get(5);
    }
    
    /**
     * Set <normalize_reference_names> value
     *
     * @param boolean $value
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function setNormalizeReferenceNames( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <info_merge_config> has a value
     *
     * @return boolean
     */
    public function hasInfoMergeConfig(){
      return $this->_has(6);
    }
    
    /**
     * Clear <info_merge_config> value
     *
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function clearInfoMergeConfig(){
      return $this->_clear(6);
    }
    
    /**
     * Get <info_merge_config> value
     *
     * @param int $idx
     * @return \google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry
     */
    public function getInfoMergeConfig($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <info_merge_config> value
     *
     * @param \google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry $value
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function setInfoMergeConfig(\google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <info_merge_config>
     *
     * @return \google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry[]
     */
    public function getInfoMergeConfigList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <info_merge_config>
     *
     * @param \google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry $value
     * @return \google\genomics\v1\ImportVariantsRequest
     */
    public function addInfoMergeConfig(\google\genomics\v1\ImportVariantsRequest\InfoMergeConfigEntry $value){
     return $this->_add(6, $value);
    }
  }
}

namespace google\genomics\v1 {

  class ImportVariantsResponse extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $call_set_ids = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.ImportVariantsResponse');

      // REPEATED STRING call_set_ids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "call_set_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <call_set_ids> has a value
     *
     * @return boolean
     */
    public function hasCallSetIds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <call_set_ids> value
     *
     * @return \google\genomics\v1\ImportVariantsResponse
     */
    public function clearCallSetIds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <call_set_ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getCallSetIds($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <call_set_ids> value
     *
     * @param string $value
     * @return \google\genomics\v1\ImportVariantsResponse
     */
    public function setCallSetIds( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <call_set_ids>
     *
     * @return string[]
     */
    public function getCallSetIdsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <call_set_ids>
     *
     * @param string $value
     * @return \google\genomics\v1\ImportVariantsResponse
     */
    public function addCallSetIds( $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\genomics\v1 {

  class CreateVariantSetRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\genomics\v1\VariantSet */
    public $variant_set = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.CreateVariantSetRequest');

      // OPTIONAL MESSAGE variant_set = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\VariantSet';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set> has a value
     *
     * @return boolean
     */
    public function hasVariantSet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_set> value
     *
     * @return \google\genomics\v1\CreateVariantSetRequest
     */
    public function clearVariantSet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_set> value
     *
     * @return \google\genomics\v1\VariantSet
     */
    public function getVariantSet(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_set> value
     *
     * @param \google\genomics\v1\VariantSet $value
     * @return \google\genomics\v1\CreateVariantSetRequest
     */
    public function setVariantSet(\google\genomics\v1\VariantSet $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\genomics\v1\ExportVariantSetRequest {

  class Format extends \DrSlump\Protobuf\Enum {
    const FORMAT_UNSPECIFIED = 0;
    const FORMAT_BIGQUERY = 1;
  }
}
namespace google\genomics\v1 {

  class ExportVariantSetRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_set_id = null;
    
    /**  @var string[]  */
    public $call_set_ids = array();
    
    /**  @var string */
    public $project_id = null;
    
    /**  @var int - \google\genomics\v1\ExportVariantSetRequest\Format */
    public $format = null;
    
    /**  @var string */
    public $bigquery_dataset = null;
    
    /**  @var string */
    public $bigquery_table = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.ExportVariantSetRequest');

      // OPTIONAL STRING variant_set_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING call_set_ids = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "call_set_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING project_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM format = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "format";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\ExportVariantSetRequest\Format';
      $descriptor->addField($f);

      // OPTIONAL STRING bigquery_dataset = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "bigquery_dataset";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bigquery_table = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "bigquery_table";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set_id> has a value
     *
     * @return boolean
     */
    public function hasVariantSetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_set_id> value
     *
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function clearVariantSetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_set_id> value
     *
     * @return string
     */
    public function getVariantSetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function setVariantSetId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <call_set_ids> has a value
     *
     * @return boolean
     */
    public function hasCallSetIds(){
      return $this->_has(2);
    }
    
    /**
     * Clear <call_set_ids> value
     *
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function clearCallSetIds(){
      return $this->_clear(2);
    }
    
    /**
     * Get <call_set_ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getCallSetIds($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <call_set_ids> value
     *
     * @param string $value
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function setCallSetIds( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <call_set_ids>
     *
     * @return string[]
     */
    public function getCallSetIdsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <call_set_ids>
     *
     * @param string $value
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function addCallSetIds( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function clearProjectId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(3);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function setProjectId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <format> has a value
     *
     * @return boolean
     */
    public function hasFormat(){
      return $this->_has(4);
    }
    
    /**
     * Clear <format> value
     *
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function clearFormat(){
      return $this->_clear(4);
    }
    
    /**
     * Get <format> value
     *
     * @return int - \google\genomics\v1\ExportVariantSetRequest\Format
     */
    public function getFormat(){
      return $this->_get(4);
    }
    
    /**
     * Set <format> value
     *
     * @param int - \google\genomics\v1\ExportVariantSetRequest\Format $value
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function setFormat( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <bigquery_dataset> has a value
     *
     * @return boolean
     */
    public function hasBigqueryDataset(){
      return $this->_has(5);
    }
    
    /**
     * Clear <bigquery_dataset> value
     *
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function clearBigqueryDataset(){
      return $this->_clear(5);
    }
    
    /**
     * Get <bigquery_dataset> value
     *
     * @return string
     */
    public function getBigqueryDataset(){
      return $this->_get(5);
    }
    
    /**
     * Set <bigquery_dataset> value
     *
     * @param string $value
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function setBigqueryDataset( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <bigquery_table> has a value
     *
     * @return boolean
     */
    public function hasBigqueryTable(){
      return $this->_has(6);
    }
    
    /**
     * Clear <bigquery_table> value
     *
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function clearBigqueryTable(){
      return $this->_clear(6);
    }
    
    /**
     * Get <bigquery_table> value
     *
     * @return string
     */
    public function getBigqueryTable(){
      return $this->_get(6);
    }
    
    /**
     * Set <bigquery_table> value
     *
     * @param string $value
     * @return \google\genomics\v1\ExportVariantSetRequest
     */
    public function setBigqueryTable( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace google\genomics\v1 {

  class GetVariantSetRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_set_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.GetVariantSetRequest');

      // OPTIONAL STRING variant_set_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set_id> has a value
     *
     * @return boolean
     */
    public function hasVariantSetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_set_id> value
     *
     * @return \google\genomics\v1\GetVariantSetRequest
     */
    public function clearVariantSetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_set_id> value
     *
     * @return string
     */
    public function getVariantSetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\GetVariantSetRequest
     */
    public function setVariantSetId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\genomics\v1 {

  class SearchVariantSetsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $dataset_ids = array();
    
    /**  @var string */
    public $page_token = null;
    
    /**  @var int */
    public $page_size = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.SearchVariantSetsRequest');

      // REPEATED STRING dataset_ids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "dataset_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <dataset_ids> has a value
     *
     * @return boolean
     */
    public function hasDatasetIds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <dataset_ids> value
     *
     * @return \google\genomics\v1\SearchVariantSetsRequest
     */
    public function clearDatasetIds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <dataset_ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getDatasetIds($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <dataset_ids> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantSetsRequest
     */
    public function setDatasetIds( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <dataset_ids>
     *
     * @return string[]
     */
    public function getDatasetIdsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <dataset_ids>
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantSetsRequest
     */
    public function addDatasetIds( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\genomics\v1\SearchVariantSetsRequest
     */
    public function clearPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantSetsRequest
     */
    public function setPageToken( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\genomics\v1\SearchVariantSetsRequest
     */
    public function clearPageSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\genomics\v1\SearchVariantSetsRequest
     */
    public function setPageSize( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\genomics\v1 {

  class SearchVariantSetsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\genomics\v1\VariantSet[]  */
    public $variant_sets = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.SearchVariantSetsResponse');

      // REPEATED MESSAGE variant_sets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_sets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\VariantSet';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_sets> has a value
     *
     * @return boolean
     */
    public function hasVariantSets(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_sets> value
     *
     * @return \google\genomics\v1\SearchVariantSetsResponse
     */
    public function clearVariantSets(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_sets> value
     *
     * @param int $idx
     * @return \google\genomics\v1\VariantSet
     */
    public function getVariantSets($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <variant_sets> value
     *
     * @param \google\genomics\v1\VariantSet $value
     * @return \google\genomics\v1\SearchVariantSetsResponse
     */
    public function setVariantSets(\google\genomics\v1\VariantSet $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <variant_sets>
     *
     * @return \google\genomics\v1\VariantSet[]
     */
    public function getVariantSetsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <variant_sets>
     *
     * @param \google\genomics\v1\VariantSet $value
     * @return \google\genomics\v1\SearchVariantSetsResponse
     */
    public function addVariantSets(\google\genomics\v1\VariantSet $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\genomics\v1\SearchVariantSetsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantSetsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1 {

  class DeleteVariantSetRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_set_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.DeleteVariantSetRequest');

      // OPTIONAL STRING variant_set_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set_id> has a value
     *
     * @return boolean
     */
    public function hasVariantSetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_set_id> value
     *
     * @return \google\genomics\v1\DeleteVariantSetRequest
     */
    public function clearVariantSetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_set_id> value
     *
     * @return string
     */
    public function getVariantSetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\DeleteVariantSetRequest
     */
    public function setVariantSetId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\genomics\v1 {

  class UpdateVariantSetRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_set_id = null;
    
    /**  @var \google\genomics\v1\VariantSet */
    public $variant_set = null;
    
    /**  @var \google\protobuf\FieldMask */
    public $update_mask = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.UpdateVariantSetRequest');

      // OPTIONAL STRING variant_set_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE variant_set = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "variant_set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\VariantSet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE update_mask = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "update_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldMask';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set_id> has a value
     *
     * @return boolean
     */
    public function hasVariantSetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_set_id> value
     *
     * @return \google\genomics\v1\UpdateVariantSetRequest
     */
    public function clearVariantSetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_set_id> value
     *
     * @return string
     */
    public function getVariantSetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\UpdateVariantSetRequest
     */
    public function setVariantSetId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <variant_set> has a value
     *
     * @return boolean
     */
    public function hasVariantSet(){
      return $this->_has(2);
    }
    
    /**
     * Clear <variant_set> value
     *
     * @return \google\genomics\v1\UpdateVariantSetRequest
     */
    public function clearVariantSet(){
      return $this->_clear(2);
    }
    
    /**
     * Get <variant_set> value
     *
     * @return \google\genomics\v1\VariantSet
     */
    public function getVariantSet(){
      return $this->_get(2);
    }
    
    /**
     * Set <variant_set> value
     *
     * @param \google\genomics\v1\VariantSet $value
     * @return \google\genomics\v1\UpdateVariantSetRequest
     */
    public function setVariantSet(\google\genomics\v1\VariantSet $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <update_mask> has a value
     *
     * @return boolean
     */
    public function hasUpdateMask(){
      return $this->_has(5);
    }
    
    /**
     * Clear <update_mask> value
     *
     * @return \google\genomics\v1\UpdateVariantSetRequest
     */
    public function clearUpdateMask(){
      return $this->_clear(5);
    }
    
    /**
     * Get <update_mask> value
     *
     * @return \google\protobuf\FieldMask
     */
    public function getUpdateMask(){
      return $this->_get(5);
    }
    
    /**
     * Set <update_mask> value
     *
     * @param \google\protobuf\FieldMask $value
     * @return \google\genomics\v1\UpdateVariantSetRequest
     */
    public function setUpdateMask(\google\protobuf\FieldMask $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\genomics\v1 {

  class SearchVariantsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $variant_set_ids = array();
    
    /**  @var string */
    public $variant_name = null;
    
    /**  @var string[]  */
    public $call_set_ids = array();
    
    /**  @var string */
    public $reference_name = null;
    
    /**  @var int */
    public $start = null;
    
    /**  @var int */
    public $end = null;
    
    /**  @var string */
    public $page_token = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var int */
    public $max_calls = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.SearchVariantsRequest');

      // REPEATED STRING variant_set_ids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_set_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING variant_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "variant_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING call_set_ids = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "call_set_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING reference_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "reference_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 start = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 end = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "end";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 max_calls = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "max_calls";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set_ids> has a value
     *
     * @return boolean
     */
    public function hasVariantSetIds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_set_ids> value
     *
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function clearVariantSetIds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_set_ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getVariantSetIds($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <variant_set_ids> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function setVariantSetIds( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <variant_set_ids>
     *
     * @return string[]
     */
    public function getVariantSetIdsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <variant_set_ids>
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function addVariantSetIds( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <variant_name> has a value
     *
     * @return boolean
     */
    public function hasVariantName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <variant_name> value
     *
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function clearVariantName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <variant_name> value
     *
     * @return string
     */
    public function getVariantName(){
      return $this->_get(2);
    }
    
    /**
     * Set <variant_name> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function setVariantName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <call_set_ids> has a value
     *
     * @return boolean
     */
    public function hasCallSetIds(){
      return $this->_has(3);
    }
    
    /**
     * Clear <call_set_ids> value
     *
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function clearCallSetIds(){
      return $this->_clear(3);
    }
    
    /**
     * Get <call_set_ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getCallSetIds($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <call_set_ids> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function setCallSetIds( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <call_set_ids>
     *
     * @return string[]
     */
    public function getCallSetIdsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <call_set_ids>
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function addCallSetIds( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <reference_name> has a value
     *
     * @return boolean
     */
    public function hasReferenceName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <reference_name> value
     *
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function clearReferenceName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <reference_name> value
     *
     * @return string
     */
    public function getReferenceName(){
      return $this->_get(4);
    }
    
    /**
     * Set <reference_name> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function setReferenceName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(5);
    }
    
    /**
     * Clear <start> value
     *
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function clearStart(){
      return $this->_clear(5);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(5);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function setStart( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(6);
    }
    
    /**
     * Clear <end> value
     *
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function clearEnd(){
      return $this->_clear(6);
    }
    
    /**
     * Get <end> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(6);
    }
    
    /**
     * Set <end> value
     *
     * @param int $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function setEnd( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(7);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function clearPageToken(){
      return $this->_clear(7);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(7);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function setPageToken( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(8);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function clearPageSize(){
      return $this->_clear(8);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(8);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function setPageSize( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <max_calls> has a value
     *
     * @return boolean
     */
    public function hasMaxCalls(){
      return $this->_has(9);
    }
    
    /**
     * Clear <max_calls> value
     *
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function clearMaxCalls(){
      return $this->_clear(9);
    }
    
    /**
     * Get <max_calls> value
     *
     * @return int
     */
    public function getMaxCalls(){
      return $this->_get(9);
    }
    
    /**
     * Set <max_calls> value
     *
     * @param int $value
     * @return \google\genomics\v1\SearchVariantsRequest
     */
    public function setMaxCalls( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace google\genomics\v1 {

  class SearchVariantsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\genomics\v1\Variant[]  */
    public $variants = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.SearchVariantsResponse');

      // REPEATED MESSAGE variants = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variants";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\Variant';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variants> has a value
     *
     * @return boolean
     */
    public function hasVariants(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variants> value
     *
     * @return \google\genomics\v1\SearchVariantsResponse
     */
    public function clearVariants(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variants> value
     *
     * @param int $idx
     * @return \google\genomics\v1\Variant
     */
    public function getVariants($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <variants> value
     *
     * @param \google\genomics\v1\Variant $value
     * @return \google\genomics\v1\SearchVariantsResponse
     */
    public function setVariants(\google\genomics\v1\Variant $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <variants>
     *
     * @return \google\genomics\v1\Variant[]
     */
    public function getVariantsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <variants>
     *
     * @param \google\genomics\v1\Variant $value
     * @return \google\genomics\v1\SearchVariantsResponse
     */
    public function addVariants(\google\genomics\v1\Variant $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\genomics\v1\SearchVariantsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchVariantsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1 {

  class CreateVariantRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\genomics\v1\Variant */
    public $variant = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.CreateVariantRequest');

      // OPTIONAL MESSAGE variant = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\Variant';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant> has a value
     *
     * @return boolean
     */
    public function hasVariant(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant> value
     *
     * @return \google\genomics\v1\CreateVariantRequest
     */
    public function clearVariant(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function getVariant(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant> value
     *
     * @param \google\genomics\v1\Variant $value
     * @return \google\genomics\v1\CreateVariantRequest
     */
    public function setVariant(\google\genomics\v1\Variant $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\genomics\v1 {

  class UpdateVariantRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_id = null;
    
    /**  @var \google\genomics\v1\Variant */
    public $variant = null;
    
    /**  @var \google\protobuf\FieldMask */
    public $update_mask = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.UpdateVariantRequest');

      // OPTIONAL STRING variant_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE variant = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "variant";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\Variant';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE update_mask = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "update_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldMask';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_id> has a value
     *
     * @return boolean
     */
    public function hasVariantId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_id> value
     *
     * @return \google\genomics\v1\UpdateVariantRequest
     */
    public function clearVariantId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_id> value
     *
     * @return string
     */
    public function getVariantId(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\UpdateVariantRequest
     */
    public function setVariantId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <variant> has a value
     *
     * @return boolean
     */
    public function hasVariant(){
      return $this->_has(2);
    }
    
    /**
     * Clear <variant> value
     *
     * @return \google\genomics\v1\UpdateVariantRequest
     */
    public function clearVariant(){
      return $this->_clear(2);
    }
    
    /**
     * Get <variant> value
     *
     * @return \google\genomics\v1\Variant
     */
    public function getVariant(){
      return $this->_get(2);
    }
    
    /**
     * Set <variant> value
     *
     * @param \google\genomics\v1\Variant $value
     * @return \google\genomics\v1\UpdateVariantRequest
     */
    public function setVariant(\google\genomics\v1\Variant $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <update_mask> has a value
     *
     * @return boolean
     */
    public function hasUpdateMask(){
      return $this->_has(3);
    }
    
    /**
     * Clear <update_mask> value
     *
     * @return \google\genomics\v1\UpdateVariantRequest
     */
    public function clearUpdateMask(){
      return $this->_clear(3);
    }
    
    /**
     * Get <update_mask> value
     *
     * @return \google\protobuf\FieldMask
     */
    public function getUpdateMask(){
      return $this->_get(3);
    }
    
    /**
     * Set <update_mask> value
     *
     * @param \google\protobuf\FieldMask $value
     * @return \google\genomics\v1\UpdateVariantRequest
     */
    public function setUpdateMask(\google\protobuf\FieldMask $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\genomics\v1 {

  class DeleteVariantRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.DeleteVariantRequest');

      // OPTIONAL STRING variant_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_id> has a value
     *
     * @return boolean
     */
    public function hasVariantId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_id> value
     *
     * @return \google\genomics\v1\DeleteVariantRequest
     */
    public function clearVariantId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_id> value
     *
     * @return string
     */
    public function getVariantId(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\DeleteVariantRequest
     */
    public function setVariantId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\genomics\v1 {

  class GetVariantRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.GetVariantRequest');

      // OPTIONAL STRING variant_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_id> has a value
     *
     * @return boolean
     */
    public function hasVariantId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_id> value
     *
     * @return \google\genomics\v1\GetVariantRequest
     */
    public function clearVariantId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_id> value
     *
     * @return string
     */
    public function getVariantId(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\GetVariantRequest
     */
    public function setVariantId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\genomics\v1\MergeVariantsRequest {

  class InfoMergeConfigEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var int - \google\genomics\v1\InfoMergeOperation */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.MergeVariantsRequest.InfoMergeConfigEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\InfoMergeOperation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int - \google\genomics\v1\InfoMergeOperation
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int - \google\genomics\v1\InfoMergeOperation $value
     * @return \google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1 {

  class MergeVariantsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variant_set_id = null;
    
    /**  @var \google\genomics\v1\Variant[]  */
    public $variants = array();
    
    /**  @var \google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry[]  */
    public $info_merge_config = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.MergeVariantsRequest');

      // OPTIONAL STRING variant_set_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE variants = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "variants";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\Variant';
      $descriptor->addField($f);

      // REPEATED MESSAGE info_merge_config = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "info_merge_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set_id> has a value
     *
     * @return boolean
     */
    public function hasVariantSetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_set_id> value
     *
     * @return \google\genomics\v1\MergeVariantsRequest
     */
    public function clearVariantSetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_set_id> value
     *
     * @return string
     */
    public function getVariantSetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <variant_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\MergeVariantsRequest
     */
    public function setVariantSetId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <variants> has a value
     *
     * @return boolean
     */
    public function hasVariants(){
      return $this->_has(2);
    }
    
    /**
     * Clear <variants> value
     *
     * @return \google\genomics\v1\MergeVariantsRequest
     */
    public function clearVariants(){
      return $this->_clear(2);
    }
    
    /**
     * Get <variants> value
     *
     * @param int $idx
     * @return \google\genomics\v1\Variant
     */
    public function getVariants($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <variants> value
     *
     * @param \google\genomics\v1\Variant $value
     * @return \google\genomics\v1\MergeVariantsRequest
     */
    public function setVariants(\google\genomics\v1\Variant $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <variants>
     *
     * @return \google\genomics\v1\Variant[]
     */
    public function getVariantsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <variants>
     *
     * @param \google\genomics\v1\Variant $value
     * @return \google\genomics\v1\MergeVariantsRequest
     */
    public function addVariants(\google\genomics\v1\Variant $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <info_merge_config> has a value
     *
     * @return boolean
     */
    public function hasInfoMergeConfig(){
      return $this->_has(3);
    }
    
    /**
     * Clear <info_merge_config> value
     *
     * @return \google\genomics\v1\MergeVariantsRequest
     */
    public function clearInfoMergeConfig(){
      return $this->_clear(3);
    }
    
    /**
     * Get <info_merge_config> value
     *
     * @param int $idx
     * @return \google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry
     */
    public function getInfoMergeConfig($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <info_merge_config> value
     *
     * @param \google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry $value
     * @return \google\genomics\v1\MergeVariantsRequest
     */
    public function setInfoMergeConfig(\google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <info_merge_config>
     *
     * @return \google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry[]
     */
    public function getInfoMergeConfigList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <info_merge_config>
     *
     * @param \google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry $value
     * @return \google\genomics\v1\MergeVariantsRequest
     */
    public function addInfoMergeConfig(\google\genomics\v1\MergeVariantsRequest\InfoMergeConfigEntry $value){
     return $this->_add(3, $value);
    }
  }
}

namespace google\genomics\v1 {

  class SearchCallSetsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $variant_set_ids = array();
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $page_token = null;
    
    /**  @var int */
    public $page_size = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.SearchCallSetsRequest');

      // REPEATED STRING variant_set_ids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variant_set_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variant_set_ids> has a value
     *
     * @return boolean
     */
    public function hasVariantSetIds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variant_set_ids> value
     *
     * @return \google\genomics\v1\SearchCallSetsRequest
     */
    public function clearVariantSetIds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variant_set_ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getVariantSetIds($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <variant_set_ids> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchCallSetsRequest
     */
    public function setVariantSetIds( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <variant_set_ids>
     *
     * @return string[]
     */
    public function getVariantSetIdsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <variant_set_ids>
     *
     * @param string $value
     * @return \google\genomics\v1\SearchCallSetsRequest
     */
    public function addVariantSetIds( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\genomics\v1\SearchCallSetsRequest
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchCallSetsRequest
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\genomics\v1\SearchCallSetsRequest
     */
    public function clearPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchCallSetsRequest
     */
    public function setPageToken( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\genomics\v1\SearchCallSetsRequest
     */
    public function clearPageSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\genomics\v1\SearchCallSetsRequest
     */
    public function setPageSize( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\genomics\v1 {

  class SearchCallSetsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\genomics\v1\CallSet[]  */
    public $call_sets = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.SearchCallSetsResponse');

      // REPEATED MESSAGE call_sets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "call_sets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\CallSet';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <call_sets> has a value
     *
     * @return boolean
     */
    public function hasCallSets(){
      return $this->_has(1);
    }
    
    /**
     * Clear <call_sets> value
     *
     * @return \google\genomics\v1\SearchCallSetsResponse
     */
    public function clearCallSets(){
      return $this->_clear(1);
    }
    
    /**
     * Get <call_sets> value
     *
     * @param int $idx
     * @return \google\genomics\v1\CallSet
     */
    public function getCallSets($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <call_sets> value
     *
     * @param \google\genomics\v1\CallSet $value
     * @return \google\genomics\v1\SearchCallSetsResponse
     */
    public function setCallSets(\google\genomics\v1\CallSet $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <call_sets>
     *
     * @return \google\genomics\v1\CallSet[]
     */
    public function getCallSetsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <call_sets>
     *
     * @param \google\genomics\v1\CallSet $value
     * @return \google\genomics\v1\SearchCallSetsResponse
     */
    public function addCallSets(\google\genomics\v1\CallSet $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\genomics\v1\SearchCallSetsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\genomics\v1\SearchCallSetsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\genomics\v1 {

  class CreateCallSetRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\genomics\v1\CallSet */
    public $call_set = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.CreateCallSetRequest');

      // OPTIONAL MESSAGE call_set = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "call_set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\CallSet';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <call_set> has a value
     *
     * @return boolean
     */
    public function hasCallSet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <call_set> value
     *
     * @return \google\genomics\v1\CreateCallSetRequest
     */
    public function clearCallSet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <call_set> value
     *
     * @return \google\genomics\v1\CallSet
     */
    public function getCallSet(){
      return $this->_get(1);
    }
    
    /**
     * Set <call_set> value
     *
     * @param \google\genomics\v1\CallSet $value
     * @return \google\genomics\v1\CreateCallSetRequest
     */
    public function setCallSet(\google\genomics\v1\CallSet $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\genomics\v1 {

  class UpdateCallSetRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $call_set_id = null;
    
    /**  @var \google\genomics\v1\CallSet */
    public $call_set = null;
    
    /**  @var \google\protobuf\FieldMask */
    public $update_mask = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.UpdateCallSetRequest');

      // OPTIONAL STRING call_set_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "call_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE call_set = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "call_set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\genomics\v1\CallSet';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE update_mask = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "update_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldMask';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <call_set_id> has a value
     *
     * @return boolean
     */
    public function hasCallSetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <call_set_id> value
     *
     * @return \google\genomics\v1\UpdateCallSetRequest
     */
    public function clearCallSetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <call_set_id> value
     *
     * @return string
     */
    public function getCallSetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <call_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\UpdateCallSetRequest
     */
    public function setCallSetId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <call_set> has a value
     *
     * @return boolean
     */
    public function hasCallSet(){
      return $this->_has(2);
    }
    
    /**
     * Clear <call_set> value
     *
     * @return \google\genomics\v1\UpdateCallSetRequest
     */
    public function clearCallSet(){
      return $this->_clear(2);
    }
    
    /**
     * Get <call_set> value
     *
     * @return \google\genomics\v1\CallSet
     */
    public function getCallSet(){
      return $this->_get(2);
    }
    
    /**
     * Set <call_set> value
     *
     * @param \google\genomics\v1\CallSet $value
     * @return \google\genomics\v1\UpdateCallSetRequest
     */
    public function setCallSet(\google\genomics\v1\CallSet $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <update_mask> has a value
     *
     * @return boolean
     */
    public function hasUpdateMask(){
      return $this->_has(3);
    }
    
    /**
     * Clear <update_mask> value
     *
     * @return \google\genomics\v1\UpdateCallSetRequest
     */
    public function clearUpdateMask(){
      return $this->_clear(3);
    }
    
    /**
     * Get <update_mask> value
     *
     * @return \google\protobuf\FieldMask
     */
    public function getUpdateMask(){
      return $this->_get(3);
    }
    
    /**
     * Set <update_mask> value
     *
     * @param \google\protobuf\FieldMask $value
     * @return \google\genomics\v1\UpdateCallSetRequest
     */
    public function setUpdateMask(\google\protobuf\FieldMask $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\genomics\v1 {

  class DeleteCallSetRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $call_set_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.DeleteCallSetRequest');

      // OPTIONAL STRING call_set_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "call_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <call_set_id> has a value
     *
     * @return boolean
     */
    public function hasCallSetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <call_set_id> value
     *
     * @return \google\genomics\v1\DeleteCallSetRequest
     */
    public function clearCallSetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <call_set_id> value
     *
     * @return string
     */
    public function getCallSetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <call_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\DeleteCallSetRequest
     */
    public function setCallSetId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\genomics\v1 {

  class GetCallSetRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $call_set_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.GetCallSetRequest');

      // OPTIONAL STRING call_set_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "call_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <call_set_id> has a value
     *
     * @return boolean
     */
    public function hasCallSetId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <call_set_id> value
     *
     * @return \google\genomics\v1\GetCallSetRequest
     */
    public function clearCallSetId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <call_set_id> value
     *
     * @return string
     */
    public function getCallSetId(){
      return $this->_get(1);
    }
    
    /**
     * Set <call_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\GetCallSetRequest
     */
    public function setCallSetId( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\genomics\v1 {

  class StreamVariantsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $variant_set_id = null;
    
    /**  @var string[]  */
    public $call_set_ids = array();
    
    /**  @var string */
    public $reference_name = null;
    
    /**  @var int */
    public $start = null;
    
    /**  @var int */
    public $end = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.StreamVariantsRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING variant_set_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "variant_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING call_set_ids = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "call_set_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING reference_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "reference_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 start = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "start";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 end = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "end";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <variant_set_id> has a value
     *
     * @return boolean
     */
    public function hasVariantSetId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <variant_set_id> value
     *
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function clearVariantSetId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <variant_set_id> value
     *
     * @return string
     */
    public function getVariantSetId(){
      return $this->_get(2);
    }
    
    /**
     * Set <variant_set_id> value
     *
     * @param string $value
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function setVariantSetId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <call_set_ids> has a value
     *
     * @return boolean
     */
    public function hasCallSetIds(){
      return $this->_has(3);
    }
    
    /**
     * Clear <call_set_ids> value
     *
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function clearCallSetIds(){
      return $this->_clear(3);
    }
    
    /**
     * Get <call_set_ids> value
     *
     * @param int $idx
     * @return string
     */
    public function getCallSetIds($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <call_set_ids> value
     *
     * @param string $value
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function setCallSetIds( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <call_set_ids>
     *
     * @return string[]
     */
    public function getCallSetIdsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <call_set_ids>
     *
     * @param string $value
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function addCallSetIds( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <reference_name> has a value
     *
     * @return boolean
     */
    public function hasReferenceName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <reference_name> value
     *
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function clearReferenceName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <reference_name> value
     *
     * @return string
     */
    public function getReferenceName(){
      return $this->_get(4);
    }
    
    /**
     * Set <reference_name> value
     *
     * @param string $value
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function setReferenceName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <start> has a value
     *
     * @return boolean
     */
    public function hasStart(){
      return $this->_has(5);
    }
    
    /**
     * Clear <start> value
     *
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function clearStart(){
      return $this->_clear(5);
    }
    
    /**
     * Get <start> value
     *
     * @return int
     */
    public function getStart(){
      return $this->_get(5);
    }
    
    /**
     * Set <start> value
     *
     * @param int $value
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function setStart( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <end> has a value
     *
     * @return boolean
     */
    public function hasEnd(){
      return $this->_has(6);
    }
    
    /**
     * Clear <end> value
     *
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function clearEnd(){
      return $this->_clear(6);
    }
    
    /**
     * Get <end> value
     *
     * @return int
     */
    public function getEnd(){
      return $this->_get(6);
    }
    
    /**
     * Set <end> value
     *
     * @param int $value
     * @return \google\genomics\v1\StreamVariantsRequest
     */
    public function setEnd( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace google\genomics\v1 {

  class StreamVariantsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\genomics\v1\Variant[]  */
    public $variants = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.genomics.v1.StreamVariantsResponse');

      // REPEATED MESSAGE variants = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variants";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\genomics\v1\Variant';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variants> has a value
     *
     * @return boolean
     */
    public function hasVariants(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variants> value
     *
     * @return \google\genomics\v1\StreamVariantsResponse
     */
    public function clearVariants(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variants> value
     *
     * @param int $idx
     * @return \google\genomics\v1\Variant
     */
    public function getVariants($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <variants> value
     *
     * @param \google\genomics\v1\Variant $value
     * @return \google\genomics\v1\StreamVariantsResponse
     */
    public function setVariants(\google\genomics\v1\Variant $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <variants>
     *
     * @return \google\genomics\v1\Variant[]
     */
    public function getVariantsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <variants>
     *
     * @param \google\genomics\v1\Variant $value
     * @return \google\genomics\v1\StreamVariantsResponse
     */
    public function addVariants(\google\genomics\v1\Variant $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\genomics\v1 {

  class StreamingVariantServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\genomics\v1\StreamVariantsRequest $input
     */
    public function StreamVariants($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/google.genomics.v1.StreamingVariantService/StreamVariants', $argument, '\google\genomics\v1\StreamVariantsResponse::deserialize', $metadata, $options);
    }
  }
}
namespace google\genomics\v1 {

  class VariantServiceV1Client extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\genomics\v1\ImportVariantsRequest $input
     */
    public function ImportVariants(\google\genomics\v1\ImportVariantsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/ImportVariants', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\CreateVariantSetRequest $input
     */
    public function CreateVariantSet(\google\genomics\v1\CreateVariantSetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/CreateVariantSet', $argument, '\google\genomics\v1\VariantSet::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\ExportVariantSetRequest $input
     */
    public function ExportVariantSet(\google\genomics\v1\ExportVariantSetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/ExportVariantSet', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\GetVariantSetRequest $input
     */
    public function GetVariantSet(\google\genomics\v1\GetVariantSetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/GetVariantSet', $argument, '\google\genomics\v1\VariantSet::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\SearchVariantSetsRequest $input
     */
    public function SearchVariantSets(\google\genomics\v1\SearchVariantSetsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/SearchVariantSets', $argument, '\google\genomics\v1\SearchVariantSetsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\DeleteVariantSetRequest $input
     */
    public function DeleteVariantSet(\google\genomics\v1\DeleteVariantSetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/DeleteVariantSet', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\UpdateVariantSetRequest $input
     */
    public function UpdateVariantSet(\google\genomics\v1\UpdateVariantSetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/UpdateVariantSet', $argument, '\google\genomics\v1\VariantSet::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\SearchVariantsRequest $input
     */
    public function SearchVariants(\google\genomics\v1\SearchVariantsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/SearchVariants', $argument, '\google\genomics\v1\SearchVariantsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\CreateVariantRequest $input
     */
    public function CreateVariant(\google\genomics\v1\CreateVariantRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/CreateVariant', $argument, '\google\genomics\v1\Variant::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\UpdateVariantRequest $input
     */
    public function UpdateVariant(\google\genomics\v1\UpdateVariantRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/UpdateVariant', $argument, '\google\genomics\v1\Variant::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\DeleteVariantRequest $input
     */
    public function DeleteVariant(\google\genomics\v1\DeleteVariantRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/DeleteVariant', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\GetVariantRequest $input
     */
    public function GetVariant(\google\genomics\v1\GetVariantRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/GetVariant', $argument, '\google\genomics\v1\Variant::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\MergeVariantsRequest $input
     */
    public function MergeVariants(\google\genomics\v1\MergeVariantsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/MergeVariants', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\SearchCallSetsRequest $input
     */
    public function SearchCallSets(\google\genomics\v1\SearchCallSetsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/SearchCallSets', $argument, '\google\genomics\v1\SearchCallSetsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\CreateCallSetRequest $input
     */
    public function CreateCallSet(\google\genomics\v1\CreateCallSetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/CreateCallSet', $argument, '\google\genomics\v1\CallSet::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\UpdateCallSetRequest $input
     */
    public function UpdateCallSet(\google\genomics\v1\UpdateCallSetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/UpdateCallSet', $argument, '\google\genomics\v1\CallSet::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\DeleteCallSetRequest $input
     */
    public function DeleteCallSet(\google\genomics\v1\DeleteCallSetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/DeleteCallSet', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\genomics\v1\GetCallSetRequest $input
     */
    public function GetCallSet(\google\genomics\v1\GetCallSetRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.genomics.v1.VariantServiceV1/GetCallSet', $argument, '\google\genomics\v1\CallSet::deserialize', $metadata, $options);
    }
  }
}
