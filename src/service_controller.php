<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/api/servicecontrol/v1/service_controller.proto
//   Date: 2017-06-13 04:22:59

namespace google\api\servicecontrol\v1 {

  class CheckRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $service_name = null;
    
    /**  @var \google\api\servicecontrol\v1\Operation */
    public $operation = null;
    
    /**  @var string */
    public $service_config_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.servicecontrol.v1.CheckRequest');

      // OPTIONAL STRING service_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "service_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE operation = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "operation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\api\servicecontrol\v1\Operation';
      $descriptor->addField($f);

      // OPTIONAL STRING service_config_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "service_config_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <service_name> has a value
     *
     * @return boolean
     */
    public function hasServiceName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <service_name> value
     *
     * @return \google\api\servicecontrol\v1\CheckRequest
     */
    public function clearServiceName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <service_name> value
     *
     * @return string
     */
    public function getServiceName(){
      return $this->_get(1);
    }
    
    /**
     * Set <service_name> value
     *
     * @param string $value
     * @return \google\api\servicecontrol\v1\CheckRequest
     */
    public function setServiceName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <operation> has a value
     *
     * @return boolean
     */
    public function hasOperation(){
      return $this->_has(2);
    }
    
    /**
     * Clear <operation> value
     *
     * @return \google\api\servicecontrol\v1\CheckRequest
     */
    public function clearOperation(){
      return $this->_clear(2);
    }
    
    /**
     * Get <operation> value
     *
     * @return \google\api\servicecontrol\v1\Operation
     */
    public function getOperation(){
      return $this->_get(2);
    }
    
    /**
     * Set <operation> value
     *
     * @param \google\api\servicecontrol\v1\Operation $value
     * @return \google\api\servicecontrol\v1\CheckRequest
     */
    public function setOperation(\google\api\servicecontrol\v1\Operation $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <service_config_id> has a value
     *
     * @return boolean
     */
    public function hasServiceConfigId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <service_config_id> value
     *
     * @return \google\api\servicecontrol\v1\CheckRequest
     */
    public function clearServiceConfigId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <service_config_id> value
     *
     * @return string
     */
    public function getServiceConfigId(){
      return $this->_get(4);
    }
    
    /**
     * Set <service_config_id> value
     *
     * @param string $value
     * @return \google\api\servicecontrol\v1\CheckRequest
     */
    public function setServiceConfigId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\api\servicecontrol\v1 {

  class CheckResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $operation_id = null;
    
    /**  @var \google\api\servicecontrol\v1\CheckError[]  */
    public $check_errors = array();
    
    /**  @var string */
    public $service_config_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.servicecontrol.v1.CheckResponse');

      // OPTIONAL STRING operation_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "operation_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE check_errors = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "check_errors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\servicecontrol\v1\CheckError';
      $descriptor->addField($f);

      // OPTIONAL STRING service_config_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "service_config_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <operation_id> has a value
     *
     * @return boolean
     */
    public function hasOperationId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <operation_id> value
     *
     * @return \google\api\servicecontrol\v1\CheckResponse
     */
    public function clearOperationId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <operation_id> value
     *
     * @return string
     */
    public function getOperationId(){
      return $this->_get(1);
    }
    
    /**
     * Set <operation_id> value
     *
     * @param string $value
     * @return \google\api\servicecontrol\v1\CheckResponse
     */
    public function setOperationId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <check_errors> has a value
     *
     * @return boolean
     */
    public function hasCheckErrors(){
      return $this->_has(2);
    }
    
    /**
     * Clear <check_errors> value
     *
     * @return \google\api\servicecontrol\v1\CheckResponse
     */
    public function clearCheckErrors(){
      return $this->_clear(2);
    }
    
    /**
     * Get <check_errors> value
     *
     * @param int $idx
     * @return \google\api\servicecontrol\v1\CheckError
     */
    public function getCheckErrors($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <check_errors> value
     *
     * @param \google\api\servicecontrol\v1\CheckError $value
     * @return \google\api\servicecontrol\v1\CheckResponse
     */
    public function setCheckErrors(\google\api\servicecontrol\v1\CheckError $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <check_errors>
     *
     * @return \google\api\servicecontrol\v1\CheckError[]
     */
    public function getCheckErrorsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <check_errors>
     *
     * @param \google\api\servicecontrol\v1\CheckError $value
     * @return \google\api\servicecontrol\v1\CheckResponse
     */
    public function addCheckErrors(\google\api\servicecontrol\v1\CheckError $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <service_config_id> has a value
     *
     * @return boolean
     */
    public function hasServiceConfigId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <service_config_id> value
     *
     * @return \google\api\servicecontrol\v1\CheckResponse
     */
    public function clearServiceConfigId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <service_config_id> value
     *
     * @return string
     */
    public function getServiceConfigId(){
      return $this->_get(5);
    }
    
    /**
     * Set <service_config_id> value
     *
     * @param string $value
     * @return \google\api\servicecontrol\v1\CheckResponse
     */
    public function setServiceConfigId( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\api\servicecontrol\v1 {

  class ReportRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $service_name = null;
    
    /**  @var \google\api\servicecontrol\v1\Operation[]  */
    public $operations = array();
    
    /**  @var string */
    public $service_config_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.servicecontrol.v1.ReportRequest');

      // OPTIONAL STRING service_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "service_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE operations = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "operations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\servicecontrol\v1\Operation';
      $descriptor->addField($f);

      // OPTIONAL STRING service_config_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "service_config_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <service_name> has a value
     *
     * @return boolean
     */
    public function hasServiceName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <service_name> value
     *
     * @return \google\api\servicecontrol\v1\ReportRequest
     */
    public function clearServiceName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <service_name> value
     *
     * @return string
     */
    public function getServiceName(){
      return $this->_get(1);
    }
    
    /**
     * Set <service_name> value
     *
     * @param string $value
     * @return \google\api\servicecontrol\v1\ReportRequest
     */
    public function setServiceName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <operations> has a value
     *
     * @return boolean
     */
    public function hasOperations(){
      return $this->_has(2);
    }
    
    /**
     * Clear <operations> value
     *
     * @return \google\api\servicecontrol\v1\ReportRequest
     */
    public function clearOperations(){
      return $this->_clear(2);
    }
    
    /**
     * Get <operations> value
     *
     * @param int $idx
     * @return \google\api\servicecontrol\v1\Operation
     */
    public function getOperations($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <operations> value
     *
     * @param \google\api\servicecontrol\v1\Operation $value
     * @return \google\api\servicecontrol\v1\ReportRequest
     */
    public function setOperations(\google\api\servicecontrol\v1\Operation $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <operations>
     *
     * @return \google\api\servicecontrol\v1\Operation[]
     */
    public function getOperationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <operations>
     *
     * @param \google\api\servicecontrol\v1\Operation $value
     * @return \google\api\servicecontrol\v1\ReportRequest
     */
    public function addOperations(\google\api\servicecontrol\v1\Operation $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <service_config_id> has a value
     *
     * @return boolean
     */
    public function hasServiceConfigId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <service_config_id> value
     *
     * @return \google\api\servicecontrol\v1\ReportRequest
     */
    public function clearServiceConfigId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <service_config_id> value
     *
     * @return string
     */
    public function getServiceConfigId(){
      return $this->_get(3);
    }
    
    /**
     * Set <service_config_id> value
     *
     * @param string $value
     * @return \google\api\servicecontrol\v1\ReportRequest
     */
    public function setServiceConfigId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\api\servicecontrol\v1\ReportResponse {

  class ReportError extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $operation_id = null;
    
    /**  @var \google\rpc\Status */
    public $status = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.servicecontrol.v1.ReportResponse.ReportError');

      // OPTIONAL STRING operation_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "operation_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE status = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\rpc\Status';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <operation_id> has a value
     *
     * @return boolean
     */
    public function hasOperationId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <operation_id> value
     *
     * @return \google\api\servicecontrol\v1\ReportResponse\ReportError
     */
    public function clearOperationId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <operation_id> value
     *
     * @return string
     */
    public function getOperationId(){
      return $this->_get(1);
    }
    
    /**
     * Set <operation_id> value
     *
     * @param string $value
     * @return \google\api\servicecontrol\v1\ReportResponse\ReportError
     */
    public function setOperationId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(2);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\api\servicecontrol\v1\ReportResponse\ReportError
     */
    public function clearStatus(){
      return $this->_clear(2);
    }
    
    /**
     * Get <status> value
     *
     * @return \google\rpc\Status
     */
    public function getStatus(){
      return $this->_get(2);
    }
    
    /**
     * Set <status> value
     *
     * @param \google\rpc\Status $value
     * @return \google\api\servicecontrol\v1\ReportResponse\ReportError
     */
    public function setStatus(\google\rpc\Status $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\api\servicecontrol\v1 {

  class ReportResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\api\servicecontrol\v1\ReportResponse\ReportError[]  */
    public $report_errors = array();
    
    /**  @var string */
    public $service_config_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.api.servicecontrol.v1.ReportResponse');

      // REPEATED MESSAGE report_errors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "report_errors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\api\servicecontrol\v1\ReportResponse\ReportError';
      $descriptor->addField($f);

      // OPTIONAL STRING service_config_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "service_config_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <report_errors> has a value
     *
     * @return boolean
     */
    public function hasReportErrors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <report_errors> value
     *
     * @return \google\api\servicecontrol\v1\ReportResponse
     */
    public function clearReportErrors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <report_errors> value
     *
     * @param int $idx
     * @return \google\api\servicecontrol\v1\ReportResponse\ReportError
     */
    public function getReportErrors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <report_errors> value
     *
     * @param \google\api\servicecontrol\v1\ReportResponse\ReportError $value
     * @return \google\api\servicecontrol\v1\ReportResponse
     */
    public function setReportErrors(\google\api\servicecontrol\v1\ReportResponse\ReportError $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <report_errors>
     *
     * @return \google\api\servicecontrol\v1\ReportResponse\ReportError[]
     */
    public function getReportErrorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <report_errors>
     *
     * @param \google\api\servicecontrol\v1\ReportResponse\ReportError $value
     * @return \google\api\servicecontrol\v1\ReportResponse
     */
    public function addReportErrors(\google\api\servicecontrol\v1\ReportResponse\ReportError $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <service_config_id> has a value
     *
     * @return boolean
     */
    public function hasServiceConfigId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <service_config_id> value
     *
     * @return \google\api\servicecontrol\v1\ReportResponse
     */
    public function clearServiceConfigId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <service_config_id> value
     *
     * @return string
     */
    public function getServiceConfigId(){
      return $this->_get(2);
    }
    
    /**
     * Set <service_config_id> value
     *
     * @param string $value
     * @return \google\api\servicecontrol\v1\ReportResponse
     */
    public function setServiceConfigId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\api\servicecontrol\v1 {

  class ServiceControllerClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\api\servicecontrol\v1\CheckRequest $input
     */
    public function Check(\google\api\servicecontrol\v1\CheckRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.api.servicecontrol.v1.ServiceController/Check', $argument, '\google\api\servicecontrol\v1\CheckResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\api\servicecontrol\v1\ReportRequest $input
     */
    public function Report(\google\api\servicecontrol\v1\ReportRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.api.servicecontrol.v1.ServiceController/Report', $argument, '\google\api\servicecontrol\v1\ReportResponse::deserialize', $metadata, $options);
    }
  }
}
