<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/container/v1/cluster_service.proto
//   Date: 2017-06-13 04:24:47

namespace google\container\v1\NodeConfig {

  class MetadataEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.NodeConfig.MetadataEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\container\v1\NodeConfig\MetadataEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig\MetadataEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\container\v1\NodeConfig\MetadataEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig\MetadataEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\container\v1\NodeConfig {

  class LabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.NodeConfig.LabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\container\v1\NodeConfig\LabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig\LabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\container\v1\NodeConfig\LabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig\LabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\container\v1 {

  class NodeConfig extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $machine_type = null;
    
    /**  @var int */
    public $disk_size_gb = null;
    
    /**  @var string[]  */
    public $oauth_scopes = array();
    
    /**  @var string */
    public $service_account = null;
    
    /**  @var \google\container\v1\NodeConfig\MetadataEntry[]  */
    public $metadata = array();
    
    /**  @var string */
    public $image_type = null;
    
    /**  @var \google\container\v1\NodeConfig\LabelsEntry[]  */
    public $labels = array();
    
    /**  @var int */
    public $local_ssd_count = null;
    
    /**  @var string[]  */
    public $tags = array();
    
    /**  @var boolean */
    public $preemptible = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.NodeConfig');

      // OPTIONAL STRING machine_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "machine_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 disk_size_gb = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "disk_size_gb";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING oauth_scopes = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "oauth_scopes";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING service_account = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "service_account";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE metadata = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "metadata";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\container\v1\NodeConfig\MetadataEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING image_type = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "image_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE labels = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\container\v1\NodeConfig\LabelsEntry';
      $descriptor->addField($f);

      // OPTIONAL INT32 local_ssd_count = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "local_ssd_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING tags = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "tags";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL preemptible = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "preemptible";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <machine_type> has a value
     *
     * @return boolean
     */
    public function hasMachineType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <machine_type> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearMachineType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <machine_type> value
     *
     * @return string
     */
    public function getMachineType(){
      return $this->_get(1);
    }
    
    /**
     * Set <machine_type> value
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig
     */
    public function setMachineType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <disk_size_gb> has a value
     *
     * @return boolean
     */
    public function hasDiskSizeGb(){
      return $this->_has(2);
    }
    
    /**
     * Clear <disk_size_gb> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearDiskSizeGb(){
      return $this->_clear(2);
    }
    
    /**
     * Get <disk_size_gb> value
     *
     * @return int
     */
    public function getDiskSizeGb(){
      return $this->_get(2);
    }
    
    /**
     * Set <disk_size_gb> value
     *
     * @param int $value
     * @return \google\container\v1\NodeConfig
     */
    public function setDiskSizeGb( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <oauth_scopes> has a value
     *
     * @return boolean
     */
    public function hasOauthScopes(){
      return $this->_has(3);
    }
    
    /**
     * Clear <oauth_scopes> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearOauthScopes(){
      return $this->_clear(3);
    }
    
    /**
     * Get <oauth_scopes> value
     *
     * @param int $idx
     * @return string
     */
    public function getOauthScopes($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <oauth_scopes> value
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig
     */
    public function setOauthScopes( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <oauth_scopes>
     *
     * @return string[]
     */
    public function getOauthScopesList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <oauth_scopes>
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig
     */
    public function addOauthScopes( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <service_account> has a value
     *
     * @return boolean
     */
    public function hasServiceAccount(){
      return $this->_has(9);
    }
    
    /**
     * Clear <service_account> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearServiceAccount(){
      return $this->_clear(9);
    }
    
    /**
     * Get <service_account> value
     *
     * @return string
     */
    public function getServiceAccount(){
      return $this->_get(9);
    }
    
    /**
     * Set <service_account> value
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig
     */
    public function setServiceAccount( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <metadata> has a value
     *
     * @return boolean
     */
    public function hasMetadata(){
      return $this->_has(4);
    }
    
    /**
     * Clear <metadata> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearMetadata(){
      return $this->_clear(4);
    }
    
    /**
     * Get <metadata> value
     *
     * @param int $idx
     * @return \google\container\v1\NodeConfig\MetadataEntry
     */
    public function getMetadata($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <metadata> value
     *
     * @param \google\container\v1\NodeConfig\MetadataEntry $value
     * @return \google\container\v1\NodeConfig
     */
    public function setMetadata(\google\container\v1\NodeConfig\MetadataEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <metadata>
     *
     * @return \google\container\v1\NodeConfig\MetadataEntry[]
     */
    public function getMetadataList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <metadata>
     *
     * @param \google\container\v1\NodeConfig\MetadataEntry $value
     * @return \google\container\v1\NodeConfig
     */
    public function addMetadata(\google\container\v1\NodeConfig\MetadataEntry $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <image_type> has a value
     *
     * @return boolean
     */
    public function hasImageType(){
      return $this->_has(5);
    }
    
    /**
     * Clear <image_type> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearImageType(){
      return $this->_clear(5);
    }
    
    /**
     * Get <image_type> value
     *
     * @return string
     */
    public function getImageType(){
      return $this->_get(5);
    }
    
    /**
     * Set <image_type> value
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig
     */
    public function setImageType( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <labels> has a value
     *
     * @return boolean
     */
    public function hasLabels(){
      return $this->_has(6);
    }
    
    /**
     * Clear <labels> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearLabels(){
      return $this->_clear(6);
    }
    
    /**
     * Get <labels> value
     *
     * @param int $idx
     * @return \google\container\v1\NodeConfig\LabelsEntry
     */
    public function getLabels($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <labels> value
     *
     * @param \google\container\v1\NodeConfig\LabelsEntry $value
     * @return \google\container\v1\NodeConfig
     */
    public function setLabels(\google\container\v1\NodeConfig\LabelsEntry $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <labels>
     *
     * @return \google\container\v1\NodeConfig\LabelsEntry[]
     */
    public function getLabelsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <labels>
     *
     * @param \google\container\v1\NodeConfig\LabelsEntry $value
     * @return \google\container\v1\NodeConfig
     */
    public function addLabels(\google\container\v1\NodeConfig\LabelsEntry $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <local_ssd_count> has a value
     *
     * @return boolean
     */
    public function hasLocalSsdCount(){
      return $this->_has(7);
    }
    
    /**
     * Clear <local_ssd_count> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearLocalSsdCount(){
      return $this->_clear(7);
    }
    
    /**
     * Get <local_ssd_count> value
     *
     * @return int
     */
    public function getLocalSsdCount(){
      return $this->_get(7);
    }
    
    /**
     * Set <local_ssd_count> value
     *
     * @param int $value
     * @return \google\container\v1\NodeConfig
     */
    public function setLocalSsdCount( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <tags> has a value
     *
     * @return boolean
     */
    public function hasTags(){
      return $this->_has(8);
    }
    
    /**
     * Clear <tags> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearTags(){
      return $this->_clear(8);
    }
    
    /**
     * Get <tags> value
     *
     * @param int $idx
     * @return string
     */
    public function getTags($idx = NULL){
      return $this->_get(8, $idx);
    }
    
    /**
     * Set <tags> value
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig
     */
    public function setTags( $value, $idx = NULL){
      return $this->_set(8, $value, $idx);
    }
    
    /**
     * Get all elements of <tags>
     *
     * @return string[]
     */
    public function getTagsList(){
     return $this->_get(8);
    }
    
    /**
     * Add a new element to <tags>
     *
     * @param string $value
     * @return \google\container\v1\NodeConfig
     */
    public function addTags( $value){
     return $this->_add(8, $value);
    }
    
    /**
     * Check if <preemptible> has a value
     *
     * @return boolean
     */
    public function hasPreemptible(){
      return $this->_has(10);
    }
    
    /**
     * Clear <preemptible> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function clearPreemptible(){
      return $this->_clear(10);
    }
    
    /**
     * Get <preemptible> value
     *
     * @return boolean
     */
    public function getPreemptible(){
      return $this->_get(10);
    }
    
    /**
     * Set <preemptible> value
     *
     * @param boolean $value
     * @return \google\container\v1\NodeConfig
     */
    public function setPreemptible( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace google\container\v1 {

  class MasterAuth extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $username = null;
    
    /**  @var string */
    public $password = null;
    
    /**  @var string */
    public $cluster_ca_certificate = null;
    
    /**  @var string */
    public $client_certificate = null;
    
    /**  @var string */
    public $client_key = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.MasterAuth');

      // OPTIONAL STRING username = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING password = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "password";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_ca_certificate = 100
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 100;
      $f->name      = "cluster_ca_certificate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING client_certificate = 101
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 101;
      $f->name      = "client_certificate";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING client_key = 102
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 102;
      $f->name      = "client_key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(1);
    }
    
    /**
     * Clear <username> value
     *
     * @return \google\container\v1\MasterAuth
     */
    public function clearUsername(){
      return $this->_clear(1);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(1);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \google\container\v1\MasterAuth
     */
    public function setUsername( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <password> has a value
     *
     * @return boolean
     */
    public function hasPassword(){
      return $this->_has(2);
    }
    
    /**
     * Clear <password> value
     *
     * @return \google\container\v1\MasterAuth
     */
    public function clearPassword(){
      return $this->_clear(2);
    }
    
    /**
     * Get <password> value
     *
     * @return string
     */
    public function getPassword(){
      return $this->_get(2);
    }
    
    /**
     * Set <password> value
     *
     * @param string $value
     * @return \google\container\v1\MasterAuth
     */
    public function setPassword( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_ca_certificate> has a value
     *
     * @return boolean
     */
    public function hasClusterCaCertificate(){
      return $this->_has(100);
    }
    
    /**
     * Clear <cluster_ca_certificate> value
     *
     * @return \google\container\v1\MasterAuth
     */
    public function clearClusterCaCertificate(){
      return $this->_clear(100);
    }
    
    /**
     * Get <cluster_ca_certificate> value
     *
     * @return string
     */
    public function getClusterCaCertificate(){
      return $this->_get(100);
    }
    
    /**
     * Set <cluster_ca_certificate> value
     *
     * @param string $value
     * @return \google\container\v1\MasterAuth
     */
    public function setClusterCaCertificate( $value){
      return $this->_set(100, $value);
    }
    
    /**
     * Check if <client_certificate> has a value
     *
     * @return boolean
     */
    public function hasClientCertificate(){
      return $this->_has(101);
    }
    
    /**
     * Clear <client_certificate> value
     *
     * @return \google\container\v1\MasterAuth
     */
    public function clearClientCertificate(){
      return $this->_clear(101);
    }
    
    /**
     * Get <client_certificate> value
     *
     * @return string
     */
    public function getClientCertificate(){
      return $this->_get(101);
    }
    
    /**
     * Set <client_certificate> value
     *
     * @param string $value
     * @return \google\container\v1\MasterAuth
     */
    public function setClientCertificate( $value){
      return $this->_set(101, $value);
    }
    
    /**
     * Check if <client_key> has a value
     *
     * @return boolean
     */
    public function hasClientKey(){
      return $this->_has(102);
    }
    
    /**
     * Clear <client_key> value
     *
     * @return \google\container\v1\MasterAuth
     */
    public function clearClientKey(){
      return $this->_clear(102);
    }
    
    /**
     * Get <client_key> value
     *
     * @return string
     */
    public function getClientKey(){
      return $this->_get(102);
    }
    
    /**
     * Set <client_key> value
     *
     * @param string $value
     * @return \google\container\v1\MasterAuth
     */
    public function setClientKey( $value){
      return $this->_set(102, $value);
    }
  }
}

namespace google\container\v1 {

  class AddonsConfig extends \DrSlump\Protobuf\Message {

    /**  @var \google\container\v1\HttpLoadBalancing */
    public $http_load_balancing = null;
    
    /**  @var \google\container\v1\HorizontalPodAutoscaling */
    public $horizontal_pod_autoscaling = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.AddonsConfig');

      // OPTIONAL MESSAGE http_load_balancing = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "http_load_balancing";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\HttpLoadBalancing';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE horizontal_pod_autoscaling = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "horizontal_pod_autoscaling";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\HorizontalPodAutoscaling';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <http_load_balancing> has a value
     *
     * @return boolean
     */
    public function hasHttpLoadBalancing(){
      return $this->_has(1);
    }
    
    /**
     * Clear <http_load_balancing> value
     *
     * @return \google\container\v1\AddonsConfig
     */
    public function clearHttpLoadBalancing(){
      return $this->_clear(1);
    }
    
    /**
     * Get <http_load_balancing> value
     *
     * @return \google\container\v1\HttpLoadBalancing
     */
    public function getHttpLoadBalancing(){
      return $this->_get(1);
    }
    
    /**
     * Set <http_load_balancing> value
     *
     * @param \google\container\v1\HttpLoadBalancing $value
     * @return \google\container\v1\AddonsConfig
     */
    public function setHttpLoadBalancing(\google\container\v1\HttpLoadBalancing $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <horizontal_pod_autoscaling> has a value
     *
     * @return boolean
     */
    public function hasHorizontalPodAutoscaling(){
      return $this->_has(2);
    }
    
    /**
     * Clear <horizontal_pod_autoscaling> value
     *
     * @return \google\container\v1\AddonsConfig
     */
    public function clearHorizontalPodAutoscaling(){
      return $this->_clear(2);
    }
    
    /**
     * Get <horizontal_pod_autoscaling> value
     *
     * @return \google\container\v1\HorizontalPodAutoscaling
     */
    public function getHorizontalPodAutoscaling(){
      return $this->_get(2);
    }
    
    /**
     * Set <horizontal_pod_autoscaling> value
     *
     * @param \google\container\v1\HorizontalPodAutoscaling $value
     * @return \google\container\v1\AddonsConfig
     */
    public function setHorizontalPodAutoscaling(\google\container\v1\HorizontalPodAutoscaling $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\container\v1 {

  class HttpLoadBalancing extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $disabled = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.HttpLoadBalancing');

      // OPTIONAL BOOL disabled = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "disabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <disabled> has a value
     *
     * @return boolean
     */
    public function hasDisabled(){
      return $this->_has(1);
    }
    
    /**
     * Clear <disabled> value
     *
     * @return \google\container\v1\HttpLoadBalancing
     */
    public function clearDisabled(){
      return $this->_clear(1);
    }
    
    /**
     * Get <disabled> value
     *
     * @return boolean
     */
    public function getDisabled(){
      return $this->_get(1);
    }
    
    /**
     * Set <disabled> value
     *
     * @param boolean $value
     * @return \google\container\v1\HttpLoadBalancing
     */
    public function setDisabled( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\container\v1 {

  class HorizontalPodAutoscaling extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $disabled = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.HorizontalPodAutoscaling');

      // OPTIONAL BOOL disabled = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "disabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <disabled> has a value
     *
     * @return boolean
     */
    public function hasDisabled(){
      return $this->_has(1);
    }
    
    /**
     * Clear <disabled> value
     *
     * @return \google\container\v1\HorizontalPodAutoscaling
     */
    public function clearDisabled(){
      return $this->_clear(1);
    }
    
    /**
     * Get <disabled> value
     *
     * @return boolean
     */
    public function getDisabled(){
      return $this->_get(1);
    }
    
    /**
     * Set <disabled> value
     *
     * @param boolean $value
     * @return \google\container\v1\HorizontalPodAutoscaling
     */
    public function setDisabled( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\container\v1 {

  class LegacyAbac extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $enabled = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.LegacyAbac');

      // OPTIONAL BOOL enabled = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "enabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <enabled> has a value
     *
     * @return boolean
     */
    public function hasEnabled(){
      return $this->_has(1);
    }
    
    /**
     * Clear <enabled> value
     *
     * @return \google\container\v1\LegacyAbac
     */
    public function clearEnabled(){
      return $this->_clear(1);
    }
    
    /**
     * Get <enabled> value
     *
     * @return boolean
     */
    public function getEnabled(){
      return $this->_get(1);
    }
    
    /**
     * Set <enabled> value
     *
     * @param boolean $value
     * @return \google\container\v1\LegacyAbac
     */
    public function setEnabled( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\container\v1\Cluster {

  class Status extends \DrSlump\Protobuf\Enum {
    const STATUS_UNSPECIFIED = 0;
    const PROVISIONING = 1;
    const RUNNING = 2;
    const RECONCILING = 3;
    const STOPPING = 4;
    const ERROR = 5;
  }
}
namespace google\container\v1\Cluster {

  class ResourceLabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.Cluster.ResourceLabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\container\v1\Cluster\ResourceLabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster\ResourceLabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\container\v1\Cluster\ResourceLabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster\ResourceLabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\container\v1 {

  class Cluster extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $description = null;
    
    /**  @var int */
    public $initial_node_count = null;
    
    /**  @var \google\container\v1\NodeConfig */
    public $node_config = null;
    
    /**  @var \google\container\v1\MasterAuth */
    public $master_auth = null;
    
    /**  @var string */
    public $logging_service = null;
    
    /**  @var string */
    public $monitoring_service = null;
    
    /**  @var string */
    public $network = null;
    
    /**  @var string */
    public $cluster_ipv4_cidr = null;
    
    /**  @var \google\container\v1\AddonsConfig */
    public $addons_config = null;
    
    /**  @var string */
    public $subnetwork = null;
    
    /**  @var \google\container\v1\NodePool[]  */
    public $node_pools = array();
    
    /**  @var string[]  */
    public $locations = array();
    
    /**  @var boolean */
    public $enable_kubernetes_alpha = null;
    
    /**  @var \google\container\v1\Cluster\ResourceLabelsEntry[]  */
    public $resource_labels = array();
    
    /**  @var string */
    public $label_fingerprint = null;
    
    /**  @var \google\container\v1\LegacyAbac */
    public $legacy_abac = null;
    
    /**  @var string */
    public $self_link = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $endpoint = null;
    
    /**  @var string */
    public $initial_cluster_version = null;
    
    /**  @var string */
    public $current_master_version = null;
    
    /**  @var string */
    public $current_node_version = null;
    
    /**  @var string */
    public $create_time = null;
    
    /**  @var int - \google\container\v1\Cluster\Status */
    public $status = null;
    
    /**  @var string */
    public $status_message = null;
    
    /**  @var int */
    public $node_ipv4_cidr_size = null;
    
    /**  @var string */
    public $services_ipv4_cidr = null;
    
    /**  @var string[]  */
    public $instance_group_urls = array();
    
    /**  @var int */
    public $current_node_count = null;
    
    /**  @var string */
    public $expire_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.Cluster');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 initial_node_count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "initial_node_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_config = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "node_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\NodeConfig';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE master_auth = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "master_auth";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\MasterAuth';
      $descriptor->addField($f);

      // OPTIONAL STRING logging_service = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "logging_service";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING monitoring_service = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "monitoring_service";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING network = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "network";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_ipv4_cidr = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "cluster_ipv4_cidr";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE addons_config = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "addons_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\AddonsConfig';
      $descriptor->addField($f);

      // OPTIONAL STRING subnetwork = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "subnetwork";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE node_pools = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "node_pools";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\container\v1\NodePool';
      $descriptor->addField($f);

      // REPEATED STRING locations = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "locations";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL enable_kubernetes_alpha = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "enable_kubernetes_alpha";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE resource_labels = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "resource_labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\container\v1\Cluster\ResourceLabelsEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING label_fingerprint = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "label_fingerprint";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE legacy_abac = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "legacy_abac";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\LegacyAbac';
      $descriptor->addField($f);

      // OPTIONAL STRING self_link = 100
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 100;
      $f->name      = "self_link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 101
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 101;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING endpoint = 102
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 102;
      $f->name      = "endpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING initial_cluster_version = 103
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 103;
      $f->name      = "initial_cluster_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING current_master_version = 104
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 104;
      $f->name      = "current_master_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING current_node_version = 105
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 105;
      $f->name      = "current_node_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING create_time = 106
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 106;
      $f->name      = "create_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM status = 107
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 107;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\Cluster\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING status_message = 108
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 108;
      $f->name      = "status_message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 node_ipv4_cidr_size = 109
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 109;
      $f->name      = "node_ipv4_cidr_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING services_ipv4_cidr = 110
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 110;
      $f->name      = "services_ipv4_cidr";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING instance_group_urls = 111
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 111;
      $f->name      = "instance_group_urls";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 current_node_count = 112
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 112;
      $f->name      = "current_node_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING expire_time = 113
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 113;
      $f->name      = "expire_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setDescription( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <initial_node_count> has a value
     *
     * @return boolean
     */
    public function hasInitialNodeCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <initial_node_count> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearInitialNodeCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <initial_node_count> value
     *
     * @return int
     */
    public function getInitialNodeCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <initial_node_count> value
     *
     * @param int $value
     * @return \google\container\v1\Cluster
     */
    public function setInitialNodeCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <node_config> has a value
     *
     * @return boolean
     */
    public function hasNodeConfig(){
      return $this->_has(4);
    }
    
    /**
     * Clear <node_config> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearNodeConfig(){
      return $this->_clear(4);
    }
    
    /**
     * Get <node_config> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function getNodeConfig(){
      return $this->_get(4);
    }
    
    /**
     * Set <node_config> value
     *
     * @param \google\container\v1\NodeConfig $value
     * @return \google\container\v1\Cluster
     */
    public function setNodeConfig(\google\container\v1\NodeConfig $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <master_auth> has a value
     *
     * @return boolean
     */
    public function hasMasterAuth(){
      return $this->_has(5);
    }
    
    /**
     * Clear <master_auth> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearMasterAuth(){
      return $this->_clear(5);
    }
    
    /**
     * Get <master_auth> value
     *
     * @return \google\container\v1\MasterAuth
     */
    public function getMasterAuth(){
      return $this->_get(5);
    }
    
    /**
     * Set <master_auth> value
     *
     * @param \google\container\v1\MasterAuth $value
     * @return \google\container\v1\Cluster
     */
    public function setMasterAuth(\google\container\v1\MasterAuth $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <logging_service> has a value
     *
     * @return boolean
     */
    public function hasLoggingService(){
      return $this->_has(6);
    }
    
    /**
     * Clear <logging_service> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearLoggingService(){
      return $this->_clear(6);
    }
    
    /**
     * Get <logging_service> value
     *
     * @return string
     */
    public function getLoggingService(){
      return $this->_get(6);
    }
    
    /**
     * Set <logging_service> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setLoggingService( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <monitoring_service> has a value
     *
     * @return boolean
     */
    public function hasMonitoringService(){
      return $this->_has(7);
    }
    
    /**
     * Clear <monitoring_service> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearMonitoringService(){
      return $this->_clear(7);
    }
    
    /**
     * Get <monitoring_service> value
     *
     * @return string
     */
    public function getMonitoringService(){
      return $this->_get(7);
    }
    
    /**
     * Set <monitoring_service> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setMonitoringService( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <network> has a value
     *
     * @return boolean
     */
    public function hasNetwork(){
      return $this->_has(8);
    }
    
    /**
     * Clear <network> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearNetwork(){
      return $this->_clear(8);
    }
    
    /**
     * Get <network> value
     *
     * @return string
     */
    public function getNetwork(){
      return $this->_get(8);
    }
    
    /**
     * Set <network> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setNetwork( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <cluster_ipv4_cidr> has a value
     *
     * @return boolean
     */
    public function hasClusterIpv4Cidr(){
      return $this->_has(9);
    }
    
    /**
     * Clear <cluster_ipv4_cidr> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearClusterIpv4Cidr(){
      return $this->_clear(9);
    }
    
    /**
     * Get <cluster_ipv4_cidr> value
     *
     * @return string
     */
    public function getClusterIpv4Cidr(){
      return $this->_get(9);
    }
    
    /**
     * Set <cluster_ipv4_cidr> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setClusterIpv4Cidr( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <addons_config> has a value
     *
     * @return boolean
     */
    public function hasAddonsConfig(){
      return $this->_has(10);
    }
    
    /**
     * Clear <addons_config> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearAddonsConfig(){
      return $this->_clear(10);
    }
    
    /**
     * Get <addons_config> value
     *
     * @return \google\container\v1\AddonsConfig
     */
    public function getAddonsConfig(){
      return $this->_get(10);
    }
    
    /**
     * Set <addons_config> value
     *
     * @param \google\container\v1\AddonsConfig $value
     * @return \google\container\v1\Cluster
     */
    public function setAddonsConfig(\google\container\v1\AddonsConfig $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <subnetwork> has a value
     *
     * @return boolean
     */
    public function hasSubnetwork(){
      return $this->_has(11);
    }
    
    /**
     * Clear <subnetwork> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearSubnetwork(){
      return $this->_clear(11);
    }
    
    /**
     * Get <subnetwork> value
     *
     * @return string
     */
    public function getSubnetwork(){
      return $this->_get(11);
    }
    
    /**
     * Set <subnetwork> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setSubnetwork( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <node_pools> has a value
     *
     * @return boolean
     */
    public function hasNodePools(){
      return $this->_has(12);
    }
    
    /**
     * Clear <node_pools> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearNodePools(){
      return $this->_clear(12);
    }
    
    /**
     * Get <node_pools> value
     *
     * @param int $idx
     * @return \google\container\v1\NodePool
     */
    public function getNodePools($idx = NULL){
      return $this->_get(12, $idx);
    }
    
    /**
     * Set <node_pools> value
     *
     * @param \google\container\v1\NodePool $value
     * @return \google\container\v1\Cluster
     */
    public function setNodePools(\google\container\v1\NodePool $value, $idx = NULL){
      return $this->_set(12, $value, $idx);
    }
    
    /**
     * Get all elements of <node_pools>
     *
     * @return \google\container\v1\NodePool[]
     */
    public function getNodePoolsList(){
     return $this->_get(12);
    }
    
    /**
     * Add a new element to <node_pools>
     *
     * @param \google\container\v1\NodePool $value
     * @return \google\container\v1\Cluster
     */
    public function addNodePools(\google\container\v1\NodePool $value){
     return $this->_add(12, $value);
    }
    
    /**
     * Check if <locations> has a value
     *
     * @return boolean
     */
    public function hasLocations(){
      return $this->_has(13);
    }
    
    /**
     * Clear <locations> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearLocations(){
      return $this->_clear(13);
    }
    
    /**
     * Get <locations> value
     *
     * @param int $idx
     * @return string
     */
    public function getLocations($idx = NULL){
      return $this->_get(13, $idx);
    }
    
    /**
     * Set <locations> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setLocations( $value, $idx = NULL){
      return $this->_set(13, $value, $idx);
    }
    
    /**
     * Get all elements of <locations>
     *
     * @return string[]
     */
    public function getLocationsList(){
     return $this->_get(13);
    }
    
    /**
     * Add a new element to <locations>
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function addLocations( $value){
     return $this->_add(13, $value);
    }
    
    /**
     * Check if <enable_kubernetes_alpha> has a value
     *
     * @return boolean
     */
    public function hasEnableKubernetesAlpha(){
      return $this->_has(14);
    }
    
    /**
     * Clear <enable_kubernetes_alpha> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearEnableKubernetesAlpha(){
      return $this->_clear(14);
    }
    
    /**
     * Get <enable_kubernetes_alpha> value
     *
     * @return boolean
     */
    public function getEnableKubernetesAlpha(){
      return $this->_get(14);
    }
    
    /**
     * Set <enable_kubernetes_alpha> value
     *
     * @param boolean $value
     * @return \google\container\v1\Cluster
     */
    public function setEnableKubernetesAlpha( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <resource_labels> has a value
     *
     * @return boolean
     */
    public function hasResourceLabels(){
      return $this->_has(15);
    }
    
    /**
     * Clear <resource_labels> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearResourceLabels(){
      return $this->_clear(15);
    }
    
    /**
     * Get <resource_labels> value
     *
     * @param int $idx
     * @return \google\container\v1\Cluster\ResourceLabelsEntry
     */
    public function getResourceLabels($idx = NULL){
      return $this->_get(15, $idx);
    }
    
    /**
     * Set <resource_labels> value
     *
     * @param \google\container\v1\Cluster\ResourceLabelsEntry $value
     * @return \google\container\v1\Cluster
     */
    public function setResourceLabels(\google\container\v1\Cluster\ResourceLabelsEntry $value, $idx = NULL){
      return $this->_set(15, $value, $idx);
    }
    
    /**
     * Get all elements of <resource_labels>
     *
     * @return \google\container\v1\Cluster\ResourceLabelsEntry[]
     */
    public function getResourceLabelsList(){
     return $this->_get(15);
    }
    
    /**
     * Add a new element to <resource_labels>
     *
     * @param \google\container\v1\Cluster\ResourceLabelsEntry $value
     * @return \google\container\v1\Cluster
     */
    public function addResourceLabels(\google\container\v1\Cluster\ResourceLabelsEntry $value){
     return $this->_add(15, $value);
    }
    
    /**
     * Check if <label_fingerprint> has a value
     *
     * @return boolean
     */
    public function hasLabelFingerprint(){
      return $this->_has(16);
    }
    
    /**
     * Clear <label_fingerprint> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearLabelFingerprint(){
      return $this->_clear(16);
    }
    
    /**
     * Get <label_fingerprint> value
     *
     * @return string
     */
    public function getLabelFingerprint(){
      return $this->_get(16);
    }
    
    /**
     * Set <label_fingerprint> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setLabelFingerprint( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <legacy_abac> has a value
     *
     * @return boolean
     */
    public function hasLegacyAbac(){
      return $this->_has(18);
    }
    
    /**
     * Clear <legacy_abac> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearLegacyAbac(){
      return $this->_clear(18);
    }
    
    /**
     * Get <legacy_abac> value
     *
     * @return \google\container\v1\LegacyAbac
     */
    public function getLegacyAbac(){
      return $this->_get(18);
    }
    
    /**
     * Set <legacy_abac> value
     *
     * @param \google\container\v1\LegacyAbac $value
     * @return \google\container\v1\Cluster
     */
    public function setLegacyAbac(\google\container\v1\LegacyAbac $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <self_link> has a value
     *
     * @return boolean
     */
    public function hasSelfLink(){
      return $this->_has(100);
    }
    
    /**
     * Clear <self_link> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearSelfLink(){
      return $this->_clear(100);
    }
    
    /**
     * Get <self_link> value
     *
     * @return string
     */
    public function getSelfLink(){
      return $this->_get(100);
    }
    
    /**
     * Set <self_link> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setSelfLink( $value){
      return $this->_set(100, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(101);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearZone(){
      return $this->_clear(101);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(101);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setZone( $value){
      return $this->_set(101, $value);
    }
    
    /**
     * Check if <endpoint> has a value
     *
     * @return boolean
     */
    public function hasEndpoint(){
      return $this->_has(102);
    }
    
    /**
     * Clear <endpoint> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearEndpoint(){
      return $this->_clear(102);
    }
    
    /**
     * Get <endpoint> value
     *
     * @return string
     */
    public function getEndpoint(){
      return $this->_get(102);
    }
    
    /**
     * Set <endpoint> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setEndpoint( $value){
      return $this->_set(102, $value);
    }
    
    /**
     * Check if <initial_cluster_version> has a value
     *
     * @return boolean
     */
    public function hasInitialClusterVersion(){
      return $this->_has(103);
    }
    
    /**
     * Clear <initial_cluster_version> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearInitialClusterVersion(){
      return $this->_clear(103);
    }
    
    /**
     * Get <initial_cluster_version> value
     *
     * @return string
     */
    public function getInitialClusterVersion(){
      return $this->_get(103);
    }
    
    /**
     * Set <initial_cluster_version> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setInitialClusterVersion( $value){
      return $this->_set(103, $value);
    }
    
    /**
     * Check if <current_master_version> has a value
     *
     * @return boolean
     */
    public function hasCurrentMasterVersion(){
      return $this->_has(104);
    }
    
    /**
     * Clear <current_master_version> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearCurrentMasterVersion(){
      return $this->_clear(104);
    }
    
    /**
     * Get <current_master_version> value
     *
     * @return string
     */
    public function getCurrentMasterVersion(){
      return $this->_get(104);
    }
    
    /**
     * Set <current_master_version> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setCurrentMasterVersion( $value){
      return $this->_set(104, $value);
    }
    
    /**
     * Check if <current_node_version> has a value
     *
     * @return boolean
     */
    public function hasCurrentNodeVersion(){
      return $this->_has(105);
    }
    
    /**
     * Clear <current_node_version> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearCurrentNodeVersion(){
      return $this->_clear(105);
    }
    
    /**
     * Get <current_node_version> value
     *
     * @return string
     */
    public function getCurrentNodeVersion(){
      return $this->_get(105);
    }
    
    /**
     * Set <current_node_version> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setCurrentNodeVersion( $value){
      return $this->_set(105, $value);
    }
    
    /**
     * Check if <create_time> has a value
     *
     * @return boolean
     */
    public function hasCreateTime(){
      return $this->_has(106);
    }
    
    /**
     * Clear <create_time> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearCreateTime(){
      return $this->_clear(106);
    }
    
    /**
     * Get <create_time> value
     *
     * @return string
     */
    public function getCreateTime(){
      return $this->_get(106);
    }
    
    /**
     * Set <create_time> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setCreateTime( $value){
      return $this->_set(106, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(107);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearStatus(){
      return $this->_clear(107);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \google\container\v1\Cluster\Status
     */
    public function getStatus(){
      return $this->_get(107);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \google\container\v1\Cluster\Status $value
     * @return \google\container\v1\Cluster
     */
    public function setStatus( $value){
      return $this->_set(107, $value);
    }
    
    /**
     * Check if <status_message> has a value
     *
     * @return boolean
     */
    public function hasStatusMessage(){
      return $this->_has(108);
    }
    
    /**
     * Clear <status_message> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearStatusMessage(){
      return $this->_clear(108);
    }
    
    /**
     * Get <status_message> value
     *
     * @return string
     */
    public function getStatusMessage(){
      return $this->_get(108);
    }
    
    /**
     * Set <status_message> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setStatusMessage( $value){
      return $this->_set(108, $value);
    }
    
    /**
     * Check if <node_ipv4_cidr_size> has a value
     *
     * @return boolean
     */
    public function hasNodeIpv4CidrSize(){
      return $this->_has(109);
    }
    
    /**
     * Clear <node_ipv4_cidr_size> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearNodeIpv4CidrSize(){
      return $this->_clear(109);
    }
    
    /**
     * Get <node_ipv4_cidr_size> value
     *
     * @return int
     */
    public function getNodeIpv4CidrSize(){
      return $this->_get(109);
    }
    
    /**
     * Set <node_ipv4_cidr_size> value
     *
     * @param int $value
     * @return \google\container\v1\Cluster
     */
    public function setNodeIpv4CidrSize( $value){
      return $this->_set(109, $value);
    }
    
    /**
     * Check if <services_ipv4_cidr> has a value
     *
     * @return boolean
     */
    public function hasServicesIpv4Cidr(){
      return $this->_has(110);
    }
    
    /**
     * Clear <services_ipv4_cidr> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearServicesIpv4Cidr(){
      return $this->_clear(110);
    }
    
    /**
     * Get <services_ipv4_cidr> value
     *
     * @return string
     */
    public function getServicesIpv4Cidr(){
      return $this->_get(110);
    }
    
    /**
     * Set <services_ipv4_cidr> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setServicesIpv4Cidr( $value){
      return $this->_set(110, $value);
    }
    
    /**
     * Check if <instance_group_urls> has a value
     *
     * @return boolean
     */
    public function hasInstanceGroupUrls(){
      return $this->_has(111);
    }
    
    /**
     * Clear <instance_group_urls> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearInstanceGroupUrls(){
      return $this->_clear(111);
    }
    
    /**
     * Get <instance_group_urls> value
     *
     * @param int $idx
     * @return string
     */
    public function getInstanceGroupUrls($idx = NULL){
      return $this->_get(111, $idx);
    }
    
    /**
     * Set <instance_group_urls> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setInstanceGroupUrls( $value, $idx = NULL){
      return $this->_set(111, $value, $idx);
    }
    
    /**
     * Get all elements of <instance_group_urls>
     *
     * @return string[]
     */
    public function getInstanceGroupUrlsList(){
     return $this->_get(111);
    }
    
    /**
     * Add a new element to <instance_group_urls>
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function addInstanceGroupUrls( $value){
     return $this->_add(111, $value);
    }
    
    /**
     * Check if <current_node_count> has a value
     *
     * @return boolean
     */
    public function hasCurrentNodeCount(){
      return $this->_has(112);
    }
    
    /**
     * Clear <current_node_count> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearCurrentNodeCount(){
      return $this->_clear(112);
    }
    
    /**
     * Get <current_node_count> value
     *
     * @return int
     */
    public function getCurrentNodeCount(){
      return $this->_get(112);
    }
    
    /**
     * Set <current_node_count> value
     *
     * @param int $value
     * @return \google\container\v1\Cluster
     */
    public function setCurrentNodeCount( $value){
      return $this->_set(112, $value);
    }
    
    /**
     * Check if <expire_time> has a value
     *
     * @return boolean
     */
    public function hasExpireTime(){
      return $this->_has(113);
    }
    
    /**
     * Clear <expire_time> value
     *
     * @return \google\container\v1\Cluster
     */
    public function clearExpireTime(){
      return $this->_clear(113);
    }
    
    /**
     * Get <expire_time> value
     *
     * @return string
     */
    public function getExpireTime(){
      return $this->_get(113);
    }
    
    /**
     * Set <expire_time> value
     *
     * @param string $value
     * @return \google\container\v1\Cluster
     */
    public function setExpireTime( $value){
      return $this->_set(113, $value);
    }
  }
}

namespace google\container\v1 {

  class ClusterUpdate extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $desired_node_version = null;
    
    /**  @var string */
    public $desired_monitoring_service = null;
    
    /**  @var \google\container\v1\AddonsConfig */
    public $desired_addons_config = null;
    
    /**  @var string */
    public $desired_node_pool_id = null;
    
    /**  @var string */
    public $desired_image_type = null;
    
    /**  @var \google\container\v1\NodePoolAutoscaling */
    public $desired_node_pool_autoscaling = null;
    
    /**  @var string[]  */
    public $desired_locations = array();
    
    /**  @var string */
    public $desired_master_version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.ClusterUpdate');

      // OPTIONAL STRING desired_node_version = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "desired_node_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING desired_monitoring_service = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "desired_monitoring_service";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE desired_addons_config = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "desired_addons_config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\AddonsConfig';
      $descriptor->addField($f);

      // OPTIONAL STRING desired_node_pool_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "desired_node_pool_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING desired_image_type = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "desired_image_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE desired_node_pool_autoscaling = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "desired_node_pool_autoscaling";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\NodePoolAutoscaling';
      $descriptor->addField($f);

      // REPEATED STRING desired_locations = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "desired_locations";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING desired_master_version = 100
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 100;
      $f->name      = "desired_master_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <desired_node_version> has a value
     *
     * @return boolean
     */
    public function hasDesiredNodeVersion(){
      return $this->_has(4);
    }
    
    /**
     * Clear <desired_node_version> value
     *
     * @return \google\container\v1\ClusterUpdate
     */
    public function clearDesiredNodeVersion(){
      return $this->_clear(4);
    }
    
    /**
     * Get <desired_node_version> value
     *
     * @return string
     */
    public function getDesiredNodeVersion(){
      return $this->_get(4);
    }
    
    /**
     * Set <desired_node_version> value
     *
     * @param string $value
     * @return \google\container\v1\ClusterUpdate
     */
    public function setDesiredNodeVersion( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <desired_monitoring_service> has a value
     *
     * @return boolean
     */
    public function hasDesiredMonitoringService(){
      return $this->_has(5);
    }
    
    /**
     * Clear <desired_monitoring_service> value
     *
     * @return \google\container\v1\ClusterUpdate
     */
    public function clearDesiredMonitoringService(){
      return $this->_clear(5);
    }
    
    /**
     * Get <desired_monitoring_service> value
     *
     * @return string
     */
    public function getDesiredMonitoringService(){
      return $this->_get(5);
    }
    
    /**
     * Set <desired_monitoring_service> value
     *
     * @param string $value
     * @return \google\container\v1\ClusterUpdate
     */
    public function setDesiredMonitoringService( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <desired_addons_config> has a value
     *
     * @return boolean
     */
    public function hasDesiredAddonsConfig(){
      return $this->_has(6);
    }
    
    /**
     * Clear <desired_addons_config> value
     *
     * @return \google\container\v1\ClusterUpdate
     */
    public function clearDesiredAddonsConfig(){
      return $this->_clear(6);
    }
    
    /**
     * Get <desired_addons_config> value
     *
     * @return \google\container\v1\AddonsConfig
     */
    public function getDesiredAddonsConfig(){
      return $this->_get(6);
    }
    
    /**
     * Set <desired_addons_config> value
     *
     * @param \google\container\v1\AddonsConfig $value
     * @return \google\container\v1\ClusterUpdate
     */
    public function setDesiredAddonsConfig(\google\container\v1\AddonsConfig $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <desired_node_pool_id> has a value
     *
     * @return boolean
     */
    public function hasDesiredNodePoolId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <desired_node_pool_id> value
     *
     * @return \google\container\v1\ClusterUpdate
     */
    public function clearDesiredNodePoolId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <desired_node_pool_id> value
     *
     * @return string
     */
    public function getDesiredNodePoolId(){
      return $this->_get(7);
    }
    
    /**
     * Set <desired_node_pool_id> value
     *
     * @param string $value
     * @return \google\container\v1\ClusterUpdate
     */
    public function setDesiredNodePoolId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <desired_image_type> has a value
     *
     * @return boolean
     */
    public function hasDesiredImageType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <desired_image_type> value
     *
     * @return \google\container\v1\ClusterUpdate
     */
    public function clearDesiredImageType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <desired_image_type> value
     *
     * @return string
     */
    public function getDesiredImageType(){
      return $this->_get(8);
    }
    
    /**
     * Set <desired_image_type> value
     *
     * @param string $value
     * @return \google\container\v1\ClusterUpdate
     */
    public function setDesiredImageType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <desired_node_pool_autoscaling> has a value
     *
     * @return boolean
     */
    public function hasDesiredNodePoolAutoscaling(){
      return $this->_has(9);
    }
    
    /**
     * Clear <desired_node_pool_autoscaling> value
     *
     * @return \google\container\v1\ClusterUpdate
     */
    public function clearDesiredNodePoolAutoscaling(){
      return $this->_clear(9);
    }
    
    /**
     * Get <desired_node_pool_autoscaling> value
     *
     * @return \google\container\v1\NodePoolAutoscaling
     */
    public function getDesiredNodePoolAutoscaling(){
      return $this->_get(9);
    }
    
    /**
     * Set <desired_node_pool_autoscaling> value
     *
     * @param \google\container\v1\NodePoolAutoscaling $value
     * @return \google\container\v1\ClusterUpdate
     */
    public function setDesiredNodePoolAutoscaling(\google\container\v1\NodePoolAutoscaling $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <desired_locations> has a value
     *
     * @return boolean
     */
    public function hasDesiredLocations(){
      return $this->_has(10);
    }
    
    /**
     * Clear <desired_locations> value
     *
     * @return \google\container\v1\ClusterUpdate
     */
    public function clearDesiredLocations(){
      return $this->_clear(10);
    }
    
    /**
     * Get <desired_locations> value
     *
     * @param int $idx
     * @return string
     */
    public function getDesiredLocations($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <desired_locations> value
     *
     * @param string $value
     * @return \google\container\v1\ClusterUpdate
     */
    public function setDesiredLocations( $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <desired_locations>
     *
     * @return string[]
     */
    public function getDesiredLocationsList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <desired_locations>
     *
     * @param string $value
     * @return \google\container\v1\ClusterUpdate
     */
    public function addDesiredLocations( $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <desired_master_version> has a value
     *
     * @return boolean
     */
    public function hasDesiredMasterVersion(){
      return $this->_has(100);
    }
    
    /**
     * Clear <desired_master_version> value
     *
     * @return \google\container\v1\ClusterUpdate
     */
    public function clearDesiredMasterVersion(){
      return $this->_clear(100);
    }
    
    /**
     * Get <desired_master_version> value
     *
     * @return string
     */
    public function getDesiredMasterVersion(){
      return $this->_get(100);
    }
    
    /**
     * Set <desired_master_version> value
     *
     * @param string $value
     * @return \google\container\v1\ClusterUpdate
     */
    public function setDesiredMasterVersion( $value){
      return $this->_set(100, $value);
    }
  }
}

namespace google\container\v1\Operation {

  class Status extends \DrSlump\Protobuf\Enum {
    const STATUS_UNSPECIFIED = 0;
    const PENDING = 1;
    const RUNNING = 2;
    const DONE = 3;
    const ABORTING = 4;
  }
}
namespace google\container\v1\Operation {

  class Type extends \DrSlump\Protobuf\Enum {
    const TYPE_UNSPECIFIED = 0;
    const CREATE_CLUSTER = 1;
    const DELETE_CLUSTER = 2;
    const UPGRADE_MASTER = 3;
    const UPGRADE_NODES = 4;
    const REPAIR_CLUSTER = 5;
    const UPDATE_CLUSTER = 6;
    const CREATE_NODE_POOL = 7;
    const DELETE_NODE_POOL = 8;
    const SET_NODE_POOL_MANAGEMENT = 9;
    const AUTO_REPAIR_NODES = 10;
    const AUTO_UPGRADE_NODES = 11;
    const SET_LABELS = 12;
    const SET_MASTER_AUTH = 13;
  }
}
namespace google\container\v1 {

  class Operation extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var int - \google\container\v1\Operation\Type */
    public $operation_type = null;
    
    /**  @var int - \google\container\v1\Operation\Status */
    public $status = null;
    
    /**  @var string */
    public $detail = null;
    
    /**  @var string */
    public $status_message = null;
    
    /**  @var string */
    public $self_link = null;
    
    /**  @var string */
    public $target_link = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.Operation');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM operation_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "operation_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\Operation\Type';
      $descriptor->addField($f);

      // OPTIONAL ENUM status = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\Operation\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING detail = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "detail";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING status_message = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "status_message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING self_link = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "self_link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING target_link = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "target_link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\container\v1\Operation
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\container\v1\Operation
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\Operation
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\Operation
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <operation_type> has a value
     *
     * @return boolean
     */
    public function hasOperationType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <operation_type> value
     *
     * @return \google\container\v1\Operation
     */
    public function clearOperationType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <operation_type> value
     *
     * @return int - \google\container\v1\Operation\Type
     */
    public function getOperationType(){
      return $this->_get(3);
    }
    
    /**
     * Set <operation_type> value
     *
     * @param int - \google\container\v1\Operation\Type $value
     * @return \google\container\v1\Operation
     */
    public function setOperationType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(4);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\container\v1\Operation
     */
    public function clearStatus(){
      return $this->_clear(4);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \google\container\v1\Operation\Status
     */
    public function getStatus(){
      return $this->_get(4);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \google\container\v1\Operation\Status $value
     * @return \google\container\v1\Operation
     */
    public function setStatus( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <detail> has a value
     *
     * @return boolean
     */
    public function hasDetail(){
      return $this->_has(8);
    }
    
    /**
     * Clear <detail> value
     *
     * @return \google\container\v1\Operation
     */
    public function clearDetail(){
      return $this->_clear(8);
    }
    
    /**
     * Get <detail> value
     *
     * @return string
     */
    public function getDetail(){
      return $this->_get(8);
    }
    
    /**
     * Set <detail> value
     *
     * @param string $value
     * @return \google\container\v1\Operation
     */
    public function setDetail( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <status_message> has a value
     *
     * @return boolean
     */
    public function hasStatusMessage(){
      return $this->_has(5);
    }
    
    /**
     * Clear <status_message> value
     *
     * @return \google\container\v1\Operation
     */
    public function clearStatusMessage(){
      return $this->_clear(5);
    }
    
    /**
     * Get <status_message> value
     *
     * @return string
     */
    public function getStatusMessage(){
      return $this->_get(5);
    }
    
    /**
     * Set <status_message> value
     *
     * @param string $value
     * @return \google\container\v1\Operation
     */
    public function setStatusMessage( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <self_link> has a value
     *
     * @return boolean
     */
    public function hasSelfLink(){
      return $this->_has(6);
    }
    
    /**
     * Clear <self_link> value
     *
     * @return \google\container\v1\Operation
     */
    public function clearSelfLink(){
      return $this->_clear(6);
    }
    
    /**
     * Get <self_link> value
     *
     * @return string
     */
    public function getSelfLink(){
      return $this->_get(6);
    }
    
    /**
     * Set <self_link> value
     *
     * @param string $value
     * @return \google\container\v1\Operation
     */
    public function setSelfLink( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <target_link> has a value
     *
     * @return boolean
     */
    public function hasTargetLink(){
      return $this->_has(7);
    }
    
    /**
     * Clear <target_link> value
     *
     * @return \google\container\v1\Operation
     */
    public function clearTargetLink(){
      return $this->_clear(7);
    }
    
    /**
     * Get <target_link> value
     *
     * @return string
     */
    public function getTargetLink(){
      return $this->_get(7);
    }
    
    /**
     * Set <target_link> value
     *
     * @param string $value
     * @return \google\container\v1\Operation
     */
    public function setTargetLink( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\container\v1 {

  class CreateClusterRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var \google\container\v1\Cluster */
    public $cluster = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.CreateClusterRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cluster = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\Cluster';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\CreateClusterRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\CreateClusterRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\CreateClusterRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\CreateClusterRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \google\container\v1\CreateClusterRequest
     */
    public function clearCluster(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster> value
     *
     * @return \google\container\v1\Cluster
     */
    public function getCluster(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster> value
     *
     * @param \google\container\v1\Cluster $value
     * @return \google\container\v1\CreateClusterRequest
     */
    public function setCluster(\google\container\v1\Cluster $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\container\v1 {

  class GetClusterRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.GetClusterRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\GetClusterRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\GetClusterRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\GetClusterRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\GetClusterRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\GetClusterRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\GetClusterRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\container\v1 {

  class UpdateClusterRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var \google\container\v1\ClusterUpdate */
    public $update = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.UpdateClusterRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE update = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "update";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\ClusterUpdate';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\UpdateClusterRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\UpdateClusterRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\UpdateClusterRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\UpdateClusterRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\UpdateClusterRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\UpdateClusterRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <update> has a value
     *
     * @return boolean
     */
    public function hasUpdate(){
      return $this->_has(4);
    }
    
    /**
     * Clear <update> value
     *
     * @return \google\container\v1\UpdateClusterRequest
     */
    public function clearUpdate(){
      return $this->_clear(4);
    }
    
    /**
     * Get <update> value
     *
     * @return \google\container\v1\ClusterUpdate
     */
    public function getUpdate(){
      return $this->_get(4);
    }
    
    /**
     * Set <update> value
     *
     * @param \google\container\v1\ClusterUpdate $value
     * @return \google\container\v1\UpdateClusterRequest
     */
    public function setUpdate(\google\container\v1\ClusterUpdate $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\container\v1\SetMasterAuthRequest {

  class Action extends \DrSlump\Protobuf\Enum {
    const UNKNOWN = 0;
    const SET_PASSWORD = 1;
    const GENERATE_PASSWORD = 2;
  }
}
namespace google\container\v1 {

  class SetMasterAuthRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var int - \google\container\v1\SetMasterAuthRequest\Action */
    public $action = null;
    
    /**  @var \google\container\v1\MasterAuth */
    public $update = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.SetMasterAuthRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM action = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "action";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\SetMasterAuthRequest\Action';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE update = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "update";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\MasterAuth';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <action> has a value
     *
     * @return boolean
     */
    public function hasAction(){
      return $this->_has(4);
    }
    
    /**
     * Clear <action> value
     *
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function clearAction(){
      return $this->_clear(4);
    }
    
    /**
     * Get <action> value
     *
     * @return int - \google\container\v1\SetMasterAuthRequest\Action
     */
    public function getAction(){
      return $this->_get(4);
    }
    
    /**
     * Set <action> value
     *
     * @param int - \google\container\v1\SetMasterAuthRequest\Action $value
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function setAction( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <update> has a value
     *
     * @return boolean
     */
    public function hasUpdate(){
      return $this->_has(5);
    }
    
    /**
     * Clear <update> value
     *
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function clearUpdate(){
      return $this->_clear(5);
    }
    
    /**
     * Get <update> value
     *
     * @return \google\container\v1\MasterAuth
     */
    public function getUpdate(){
      return $this->_get(5);
    }
    
    /**
     * Set <update> value
     *
     * @param \google\container\v1\MasterAuth $value
     * @return \google\container\v1\SetMasterAuthRequest
     */
    public function setUpdate(\google\container\v1\MasterAuth $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\container\v1 {

  class DeleteClusterRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.DeleteClusterRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\DeleteClusterRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\DeleteClusterRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\DeleteClusterRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\DeleteClusterRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\DeleteClusterRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\DeleteClusterRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\container\v1 {

  class ListClustersRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.ListClustersRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\ListClustersRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\ListClustersRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\ListClustersRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\ListClustersRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\container\v1 {

  class ListClustersResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\container\v1\Cluster[]  */
    public $clusters = array();
    
    /**  @var string[]  */
    public $missing_zones = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.ListClustersResponse');

      // REPEATED MESSAGE clusters = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "clusters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\container\v1\Cluster';
      $descriptor->addField($f);

      // REPEATED STRING missing_zones = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "missing_zones";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <clusters> has a value
     *
     * @return boolean
     */
    public function hasClusters(){
      return $this->_has(1);
    }
    
    /**
     * Clear <clusters> value
     *
     * @return \google\container\v1\ListClustersResponse
     */
    public function clearClusters(){
      return $this->_clear(1);
    }
    
    /**
     * Get <clusters> value
     *
     * @param int $idx
     * @return \google\container\v1\Cluster
     */
    public function getClusters($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <clusters> value
     *
     * @param \google\container\v1\Cluster $value
     * @return \google\container\v1\ListClustersResponse
     */
    public function setClusters(\google\container\v1\Cluster $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <clusters>
     *
     * @return \google\container\v1\Cluster[]
     */
    public function getClustersList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <clusters>
     *
     * @param \google\container\v1\Cluster $value
     * @return \google\container\v1\ListClustersResponse
     */
    public function addClusters(\google\container\v1\Cluster $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <missing_zones> has a value
     *
     * @return boolean
     */
    public function hasMissingZones(){
      return $this->_has(2);
    }
    
    /**
     * Clear <missing_zones> value
     *
     * @return \google\container\v1\ListClustersResponse
     */
    public function clearMissingZones(){
      return $this->_clear(2);
    }
    
    /**
     * Get <missing_zones> value
     *
     * @param int $idx
     * @return string
     */
    public function getMissingZones($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <missing_zones> value
     *
     * @param string $value
     * @return \google\container\v1\ListClustersResponse
     */
    public function setMissingZones( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <missing_zones>
     *
     * @return string[]
     */
    public function getMissingZonesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <missing_zones>
     *
     * @param string $value
     * @return \google\container\v1\ListClustersResponse
     */
    public function addMissingZones( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\container\v1 {

  class GetOperationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $operation_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.GetOperationRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING operation_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "operation_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\GetOperationRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\GetOperationRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\GetOperationRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\GetOperationRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <operation_id> has a value
     *
     * @return boolean
     */
    public function hasOperationId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <operation_id> value
     *
     * @return \google\container\v1\GetOperationRequest
     */
    public function clearOperationId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <operation_id> value
     *
     * @return string
     */
    public function getOperationId(){
      return $this->_get(3);
    }
    
    /**
     * Set <operation_id> value
     *
     * @param string $value
     * @return \google\container\v1\GetOperationRequest
     */
    public function setOperationId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\container\v1 {

  class ListOperationsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.ListOperationsRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\ListOperationsRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\ListOperationsRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\ListOperationsRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\ListOperationsRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\container\v1 {

  class CancelOperationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $operation_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.CancelOperationRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING operation_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "operation_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\CancelOperationRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\CancelOperationRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\CancelOperationRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\CancelOperationRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <operation_id> has a value
     *
     * @return boolean
     */
    public function hasOperationId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <operation_id> value
     *
     * @return \google\container\v1\CancelOperationRequest
     */
    public function clearOperationId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <operation_id> value
     *
     * @return string
     */
    public function getOperationId(){
      return $this->_get(3);
    }
    
    /**
     * Set <operation_id> value
     *
     * @param string $value
     * @return \google\container\v1\CancelOperationRequest
     */
    public function setOperationId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\container\v1 {

  class ListOperationsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\container\v1\Operation[]  */
    public $operations = array();
    
    /**  @var string[]  */
    public $missing_zones = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.ListOperationsResponse');

      // REPEATED MESSAGE operations = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "operations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\container\v1\Operation';
      $descriptor->addField($f);

      // REPEATED STRING missing_zones = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "missing_zones";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <operations> has a value
     *
     * @return boolean
     */
    public function hasOperations(){
      return $this->_has(1);
    }
    
    /**
     * Clear <operations> value
     *
     * @return \google\container\v1\ListOperationsResponse
     */
    public function clearOperations(){
      return $this->_clear(1);
    }
    
    /**
     * Get <operations> value
     *
     * @param int $idx
     * @return \google\container\v1\Operation
     */
    public function getOperations($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <operations> value
     *
     * @param \google\container\v1\Operation $value
     * @return \google\container\v1\ListOperationsResponse
     */
    public function setOperations(\google\container\v1\Operation $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <operations>
     *
     * @return \google\container\v1\Operation[]
     */
    public function getOperationsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <operations>
     *
     * @param \google\container\v1\Operation $value
     * @return \google\container\v1\ListOperationsResponse
     */
    public function addOperations(\google\container\v1\Operation $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <missing_zones> has a value
     *
     * @return boolean
     */
    public function hasMissingZones(){
      return $this->_has(2);
    }
    
    /**
     * Clear <missing_zones> value
     *
     * @return \google\container\v1\ListOperationsResponse
     */
    public function clearMissingZones(){
      return $this->_clear(2);
    }
    
    /**
     * Get <missing_zones> value
     *
     * @param int $idx
     * @return string
     */
    public function getMissingZones($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <missing_zones> value
     *
     * @param string $value
     * @return \google\container\v1\ListOperationsResponse
     */
    public function setMissingZones( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <missing_zones>
     *
     * @return string[]
     */
    public function getMissingZonesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <missing_zones>
     *
     * @param string $value
     * @return \google\container\v1\ListOperationsResponse
     */
    public function addMissingZones( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\container\v1 {

  class GetServerConfigRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.GetServerConfigRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\GetServerConfigRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\GetServerConfigRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\GetServerConfigRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\GetServerConfigRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\container\v1 {

  class ServerConfig extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $default_cluster_version = null;
    
    /**  @var string[]  */
    public $valid_node_versions = array();
    
    /**  @var string */
    public $default_image_type = null;
    
    /**  @var string[]  */
    public $valid_image_types = array();
    
    /**  @var string[]  */
    public $valid_master_versions = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.ServerConfig');

      // OPTIONAL STRING default_cluster_version = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "default_cluster_version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING valid_node_versions = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "valid_node_versions";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING default_image_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "default_image_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING valid_image_types = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "valid_image_types";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED STRING valid_master_versions = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "valid_master_versions";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <default_cluster_version> has a value
     *
     * @return boolean
     */
    public function hasDefaultClusterVersion(){
      return $this->_has(1);
    }
    
    /**
     * Clear <default_cluster_version> value
     *
     * @return \google\container\v1\ServerConfig
     */
    public function clearDefaultClusterVersion(){
      return $this->_clear(1);
    }
    
    /**
     * Get <default_cluster_version> value
     *
     * @return string
     */
    public function getDefaultClusterVersion(){
      return $this->_get(1);
    }
    
    /**
     * Set <default_cluster_version> value
     *
     * @param string $value
     * @return \google\container\v1\ServerConfig
     */
    public function setDefaultClusterVersion( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <valid_node_versions> has a value
     *
     * @return boolean
     */
    public function hasValidNodeVersions(){
      return $this->_has(3);
    }
    
    /**
     * Clear <valid_node_versions> value
     *
     * @return \google\container\v1\ServerConfig
     */
    public function clearValidNodeVersions(){
      return $this->_clear(3);
    }
    
    /**
     * Get <valid_node_versions> value
     *
     * @param int $idx
     * @return string
     */
    public function getValidNodeVersions($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <valid_node_versions> value
     *
     * @param string $value
     * @return \google\container\v1\ServerConfig
     */
    public function setValidNodeVersions( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <valid_node_versions>
     *
     * @return string[]
     */
    public function getValidNodeVersionsList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <valid_node_versions>
     *
     * @param string $value
     * @return \google\container\v1\ServerConfig
     */
    public function addValidNodeVersions( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <default_image_type> has a value
     *
     * @return boolean
     */
    public function hasDefaultImageType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <default_image_type> value
     *
     * @return \google\container\v1\ServerConfig
     */
    public function clearDefaultImageType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <default_image_type> value
     *
     * @return string
     */
    public function getDefaultImageType(){
      return $this->_get(4);
    }
    
    /**
     * Set <default_image_type> value
     *
     * @param string $value
     * @return \google\container\v1\ServerConfig
     */
    public function setDefaultImageType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <valid_image_types> has a value
     *
     * @return boolean
     */
    public function hasValidImageTypes(){
      return $this->_has(5);
    }
    
    /**
     * Clear <valid_image_types> value
     *
     * @return \google\container\v1\ServerConfig
     */
    public function clearValidImageTypes(){
      return $this->_clear(5);
    }
    
    /**
     * Get <valid_image_types> value
     *
     * @param int $idx
     * @return string
     */
    public function getValidImageTypes($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <valid_image_types> value
     *
     * @param string $value
     * @return \google\container\v1\ServerConfig
     */
    public function setValidImageTypes( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <valid_image_types>
     *
     * @return string[]
     */
    public function getValidImageTypesList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <valid_image_types>
     *
     * @param string $value
     * @return \google\container\v1\ServerConfig
     */
    public function addValidImageTypes( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <valid_master_versions> has a value
     *
     * @return boolean
     */
    public function hasValidMasterVersions(){
      return $this->_has(6);
    }
    
    /**
     * Clear <valid_master_versions> value
     *
     * @return \google\container\v1\ServerConfig
     */
    public function clearValidMasterVersions(){
      return $this->_clear(6);
    }
    
    /**
     * Get <valid_master_versions> value
     *
     * @param int $idx
     * @return string
     */
    public function getValidMasterVersions($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <valid_master_versions> value
     *
     * @param string $value
     * @return \google\container\v1\ServerConfig
     */
    public function setValidMasterVersions( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <valid_master_versions>
     *
     * @return string[]
     */
    public function getValidMasterVersionsList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <valid_master_versions>
     *
     * @param string $value
     * @return \google\container\v1\ServerConfig
     */
    public function addValidMasterVersions( $value){
     return $this->_add(6, $value);
    }
  }
}

namespace google\container\v1 {

  class CreateNodePoolRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var \google\container\v1\NodePool */
    public $node_pool = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.CreateNodePoolRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_pool = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "node_pool";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\NodePool';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\CreateNodePoolRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\CreateNodePoolRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\CreateNodePoolRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\CreateNodePoolRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\CreateNodePoolRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\CreateNodePoolRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <node_pool> has a value
     *
     * @return boolean
     */
    public function hasNodePool(){
      return $this->_has(4);
    }
    
    /**
     * Clear <node_pool> value
     *
     * @return \google\container\v1\CreateNodePoolRequest
     */
    public function clearNodePool(){
      return $this->_clear(4);
    }
    
    /**
     * Get <node_pool> value
     *
     * @return \google\container\v1\NodePool
     */
    public function getNodePool(){
      return $this->_get(4);
    }
    
    /**
     * Set <node_pool> value
     *
     * @param \google\container\v1\NodePool $value
     * @return \google\container\v1\CreateNodePoolRequest
     */
    public function setNodePool(\google\container\v1\NodePool $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\container\v1 {

  class DeleteNodePoolRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var string */
    public $node_pool_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.DeleteNodePoolRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING node_pool_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "node_pool_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\DeleteNodePoolRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\DeleteNodePoolRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\DeleteNodePoolRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\DeleteNodePoolRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\DeleteNodePoolRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\DeleteNodePoolRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <node_pool_id> has a value
     *
     * @return boolean
     */
    public function hasNodePoolId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <node_pool_id> value
     *
     * @return \google\container\v1\DeleteNodePoolRequest
     */
    public function clearNodePoolId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <node_pool_id> value
     *
     * @return string
     */
    public function getNodePoolId(){
      return $this->_get(4);
    }
    
    /**
     * Set <node_pool_id> value
     *
     * @param string $value
     * @return \google\container\v1\DeleteNodePoolRequest
     */
    public function setNodePoolId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\container\v1 {

  class ListNodePoolsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.ListNodePoolsRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\ListNodePoolsRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\ListNodePoolsRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\ListNodePoolsRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\ListNodePoolsRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\ListNodePoolsRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\ListNodePoolsRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\container\v1 {

  class GetNodePoolRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var string */
    public $node_pool_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.GetNodePoolRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING node_pool_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "node_pool_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\GetNodePoolRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\GetNodePoolRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\GetNodePoolRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\GetNodePoolRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\GetNodePoolRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\GetNodePoolRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <node_pool_id> has a value
     *
     * @return boolean
     */
    public function hasNodePoolId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <node_pool_id> value
     *
     * @return \google\container\v1\GetNodePoolRequest
     */
    public function clearNodePoolId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <node_pool_id> value
     *
     * @return string
     */
    public function getNodePoolId(){
      return $this->_get(4);
    }
    
    /**
     * Set <node_pool_id> value
     *
     * @param string $value
     * @return \google\container\v1\GetNodePoolRequest
     */
    public function setNodePoolId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\container\v1\NodePool {

  class Status extends \DrSlump\Protobuf\Enum {
    const STATUS_UNSPECIFIED = 0;
    const PROVISIONING = 1;
    const RUNNING = 2;
    const RUNNING_WITH_ERROR = 3;
    const RECONCILING = 4;
    const STOPPING = 5;
    const ERROR = 6;
  }
}
namespace google\container\v1 {

  class NodePool extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var \google\container\v1\NodeConfig */
    public $config = null;
    
    /**  @var int */
    public $initial_node_count = null;
    
    /**  @var string */
    public $self_link = null;
    
    /**  @var string */
    public $version = null;
    
    /**  @var string[]  */
    public $instance_group_urls = array();
    
    /**  @var int - \google\container\v1\NodePool\Status */
    public $status = null;
    
    /**  @var string */
    public $status_message = null;
    
    /**  @var \google\container\v1\NodePoolAutoscaling */
    public $autoscaling = null;
    
    /**  @var \google\container\v1\NodeManagement */
    public $management = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.NodePool');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE config = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "config";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\NodeConfig';
      $descriptor->addField($f);

      // OPTIONAL INT32 initial_node_count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "initial_node_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING self_link = 100
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 100;
      $f->name      = "self_link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING version = 101
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 101;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING instance_group_urls = 102
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 102;
      $f->name      = "instance_group_urls";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL ENUM status = 103
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 103;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\NodePool\Status';
      $descriptor->addField($f);

      // OPTIONAL STRING status_message = 104
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 104;
      $f->name      = "status_message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE autoscaling = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "autoscaling";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\NodePoolAutoscaling';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE management = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "management";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\NodeManagement';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\container\v1\NodePool
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <config> has a value
     *
     * @return boolean
     */
    public function hasConfig(){
      return $this->_has(2);
    }
    
    /**
     * Clear <config> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearConfig(){
      return $this->_clear(2);
    }
    
    /**
     * Get <config> value
     *
     * @return \google\container\v1\NodeConfig
     */
    public function getConfig(){
      return $this->_get(2);
    }
    
    /**
     * Set <config> value
     *
     * @param \google\container\v1\NodeConfig $value
     * @return \google\container\v1\NodePool
     */
    public function setConfig(\google\container\v1\NodeConfig $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <initial_node_count> has a value
     *
     * @return boolean
     */
    public function hasInitialNodeCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <initial_node_count> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearInitialNodeCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <initial_node_count> value
     *
     * @return int
     */
    public function getInitialNodeCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <initial_node_count> value
     *
     * @param int $value
     * @return \google\container\v1\NodePool
     */
    public function setInitialNodeCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <self_link> has a value
     *
     * @return boolean
     */
    public function hasSelfLink(){
      return $this->_has(100);
    }
    
    /**
     * Clear <self_link> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearSelfLink(){
      return $this->_clear(100);
    }
    
    /**
     * Get <self_link> value
     *
     * @return string
     */
    public function getSelfLink(){
      return $this->_get(100);
    }
    
    /**
     * Set <self_link> value
     *
     * @param string $value
     * @return \google\container\v1\NodePool
     */
    public function setSelfLink( $value){
      return $this->_set(100, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(101);
    }
    
    /**
     * Clear <version> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearVersion(){
      return $this->_clear(101);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(101);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \google\container\v1\NodePool
     */
    public function setVersion( $value){
      return $this->_set(101, $value);
    }
    
    /**
     * Check if <instance_group_urls> has a value
     *
     * @return boolean
     */
    public function hasInstanceGroupUrls(){
      return $this->_has(102);
    }
    
    /**
     * Clear <instance_group_urls> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearInstanceGroupUrls(){
      return $this->_clear(102);
    }
    
    /**
     * Get <instance_group_urls> value
     *
     * @param int $idx
     * @return string
     */
    public function getInstanceGroupUrls($idx = NULL){
      return $this->_get(102, $idx);
    }
    
    /**
     * Set <instance_group_urls> value
     *
     * @param string $value
     * @return \google\container\v1\NodePool
     */
    public function setInstanceGroupUrls( $value, $idx = NULL){
      return $this->_set(102, $value, $idx);
    }
    
    /**
     * Get all elements of <instance_group_urls>
     *
     * @return string[]
     */
    public function getInstanceGroupUrlsList(){
     return $this->_get(102);
    }
    
    /**
     * Add a new element to <instance_group_urls>
     *
     * @param string $value
     * @return \google\container\v1\NodePool
     */
    public function addInstanceGroupUrls( $value){
     return $this->_add(102, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(103);
    }
    
    /**
     * Clear <status> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearStatus(){
      return $this->_clear(103);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \google\container\v1\NodePool\Status
     */
    public function getStatus(){
      return $this->_get(103);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \google\container\v1\NodePool\Status $value
     * @return \google\container\v1\NodePool
     */
    public function setStatus( $value){
      return $this->_set(103, $value);
    }
    
    /**
     * Check if <status_message> has a value
     *
     * @return boolean
     */
    public function hasStatusMessage(){
      return $this->_has(104);
    }
    
    /**
     * Clear <status_message> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearStatusMessage(){
      return $this->_clear(104);
    }
    
    /**
     * Get <status_message> value
     *
     * @return string
     */
    public function getStatusMessage(){
      return $this->_get(104);
    }
    
    /**
     * Set <status_message> value
     *
     * @param string $value
     * @return \google\container\v1\NodePool
     */
    public function setStatusMessage( $value){
      return $this->_set(104, $value);
    }
    
    /**
     * Check if <autoscaling> has a value
     *
     * @return boolean
     */
    public function hasAutoscaling(){
      return $this->_has(4);
    }
    
    /**
     * Clear <autoscaling> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearAutoscaling(){
      return $this->_clear(4);
    }
    
    /**
     * Get <autoscaling> value
     *
     * @return \google\container\v1\NodePoolAutoscaling
     */
    public function getAutoscaling(){
      return $this->_get(4);
    }
    
    /**
     * Set <autoscaling> value
     *
     * @param \google\container\v1\NodePoolAutoscaling $value
     * @return \google\container\v1\NodePool
     */
    public function setAutoscaling(\google\container\v1\NodePoolAutoscaling $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <management> has a value
     *
     * @return boolean
     */
    public function hasManagement(){
      return $this->_has(5);
    }
    
    /**
     * Clear <management> value
     *
     * @return \google\container\v1\NodePool
     */
    public function clearManagement(){
      return $this->_clear(5);
    }
    
    /**
     * Get <management> value
     *
     * @return \google\container\v1\NodeManagement
     */
    public function getManagement(){
      return $this->_get(5);
    }
    
    /**
     * Set <management> value
     *
     * @param \google\container\v1\NodeManagement $value
     * @return \google\container\v1\NodePool
     */
    public function setManagement(\google\container\v1\NodeManagement $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\container\v1 {

  class NodeManagement extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $auto_upgrade = null;
    
    /**  @var boolean */
    public $auto_repair = null;
    
    /**  @var \google\container\v1\AutoUpgradeOptions */
    public $upgrade_options = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.NodeManagement');

      // OPTIONAL BOOL auto_upgrade = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "auto_upgrade";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL auto_repair = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "auto_repair";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE upgrade_options = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "upgrade_options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\AutoUpgradeOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <auto_upgrade> has a value
     *
     * @return boolean
     */
    public function hasAutoUpgrade(){
      return $this->_has(1);
    }
    
    /**
     * Clear <auto_upgrade> value
     *
     * @return \google\container\v1\NodeManagement
     */
    public function clearAutoUpgrade(){
      return $this->_clear(1);
    }
    
    /**
     * Get <auto_upgrade> value
     *
     * @return boolean
     */
    public function getAutoUpgrade(){
      return $this->_get(1);
    }
    
    /**
     * Set <auto_upgrade> value
     *
     * @param boolean $value
     * @return \google\container\v1\NodeManagement
     */
    public function setAutoUpgrade( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <auto_repair> has a value
     *
     * @return boolean
     */
    public function hasAutoRepair(){
      return $this->_has(2);
    }
    
    /**
     * Clear <auto_repair> value
     *
     * @return \google\container\v1\NodeManagement
     */
    public function clearAutoRepair(){
      return $this->_clear(2);
    }
    
    /**
     * Get <auto_repair> value
     *
     * @return boolean
     */
    public function getAutoRepair(){
      return $this->_get(2);
    }
    
    /**
     * Set <auto_repair> value
     *
     * @param boolean $value
     * @return \google\container\v1\NodeManagement
     */
    public function setAutoRepair( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <upgrade_options> has a value
     *
     * @return boolean
     */
    public function hasUpgradeOptions(){
      return $this->_has(10);
    }
    
    /**
     * Clear <upgrade_options> value
     *
     * @return \google\container\v1\NodeManagement
     */
    public function clearUpgradeOptions(){
      return $this->_clear(10);
    }
    
    /**
     * Get <upgrade_options> value
     *
     * @return \google\container\v1\AutoUpgradeOptions
     */
    public function getUpgradeOptions(){
      return $this->_get(10);
    }
    
    /**
     * Set <upgrade_options> value
     *
     * @param \google\container\v1\AutoUpgradeOptions $value
     * @return \google\container\v1\NodeManagement
     */
    public function setUpgradeOptions(\google\container\v1\AutoUpgradeOptions $value){
      return $this->_set(10, $value);
    }
  }
}

namespace google\container\v1 {

  class AutoUpgradeOptions extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $auto_upgrade_start_time = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.AutoUpgradeOptions');

      // OPTIONAL STRING auto_upgrade_start_time = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "auto_upgrade_start_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <auto_upgrade_start_time> has a value
     *
     * @return boolean
     */
    public function hasAutoUpgradeStartTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <auto_upgrade_start_time> value
     *
     * @return \google\container\v1\AutoUpgradeOptions
     */
    public function clearAutoUpgradeStartTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <auto_upgrade_start_time> value
     *
     * @return string
     */
    public function getAutoUpgradeStartTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <auto_upgrade_start_time> value
     *
     * @param string $value
     * @return \google\container\v1\AutoUpgradeOptions
     */
    public function setAutoUpgradeStartTime( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\container\v1\AutoUpgradeOptions
     */
    public function clearDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\container\v1\AutoUpgradeOptions
     */
    public function setDescription( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\container\v1 {

  class SetNodePoolManagementRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var string */
    public $node_pool_id = null;
    
    /**  @var \google\container\v1\NodeManagement */
    public $management = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.SetNodePoolManagementRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING node_pool_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "node_pool_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE management = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "management";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\container\v1\NodeManagement';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <node_pool_id> has a value
     *
     * @return boolean
     */
    public function hasNodePoolId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <node_pool_id> value
     *
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function clearNodePoolId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <node_pool_id> value
     *
     * @return string
     */
    public function getNodePoolId(){
      return $this->_get(4);
    }
    
    /**
     * Set <node_pool_id> value
     *
     * @param string $value
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function setNodePoolId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <management> has a value
     *
     * @return boolean
     */
    public function hasManagement(){
      return $this->_has(5);
    }
    
    /**
     * Clear <management> value
     *
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function clearManagement(){
      return $this->_clear(5);
    }
    
    /**
     * Get <management> value
     *
     * @return \google\container\v1\NodeManagement
     */
    public function getManagement(){
      return $this->_get(5);
    }
    
    /**
     * Set <management> value
     *
     * @param \google\container\v1\NodeManagement $value
     * @return \google\container\v1\SetNodePoolManagementRequest
     */
    public function setManagement(\google\container\v1\NodeManagement $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\container\v1 {

  class RollbackNodePoolUpgradeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var string */
    public $node_pool_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.RollbackNodePoolUpgradeRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING node_pool_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "node_pool_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\RollbackNodePoolUpgradeRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\RollbackNodePoolUpgradeRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\RollbackNodePoolUpgradeRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\RollbackNodePoolUpgradeRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\RollbackNodePoolUpgradeRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\RollbackNodePoolUpgradeRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <node_pool_id> has a value
     *
     * @return boolean
     */
    public function hasNodePoolId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <node_pool_id> value
     *
     * @return \google\container\v1\RollbackNodePoolUpgradeRequest
     */
    public function clearNodePoolId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <node_pool_id> value
     *
     * @return string
     */
    public function getNodePoolId(){
      return $this->_get(4);
    }
    
    /**
     * Set <node_pool_id> value
     *
     * @param string $value
     * @return \google\container\v1\RollbackNodePoolUpgradeRequest
     */
    public function setNodePoolId( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\container\v1 {

  class ListNodePoolsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\container\v1\NodePool[]  */
    public $node_pools = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.ListNodePoolsResponse');

      // REPEATED MESSAGE node_pools = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node_pools";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\container\v1\NodePool';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <node_pools> has a value
     *
     * @return boolean
     */
    public function hasNodePools(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node_pools> value
     *
     * @return \google\container\v1\ListNodePoolsResponse
     */
    public function clearNodePools(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node_pools> value
     *
     * @param int $idx
     * @return \google\container\v1\NodePool
     */
    public function getNodePools($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <node_pools> value
     *
     * @param \google\container\v1\NodePool $value
     * @return \google\container\v1\ListNodePoolsResponse
     */
    public function setNodePools(\google\container\v1\NodePool $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <node_pools>
     *
     * @return \google\container\v1\NodePool[]
     */
    public function getNodePoolsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <node_pools>
     *
     * @param \google\container\v1\NodePool $value
     * @return \google\container\v1\ListNodePoolsResponse
     */
    public function addNodePools(\google\container\v1\NodePool $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\container\v1 {

  class NodePoolAutoscaling extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $enabled = null;
    
    /**  @var int */
    public $min_node_count = null;
    
    /**  @var int */
    public $max_node_count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.NodePoolAutoscaling');

      // OPTIONAL BOOL enabled = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "enabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 min_node_count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "min_node_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 max_node_count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "max_node_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <enabled> has a value
     *
     * @return boolean
     */
    public function hasEnabled(){
      return $this->_has(1);
    }
    
    /**
     * Clear <enabled> value
     *
     * @return \google\container\v1\NodePoolAutoscaling
     */
    public function clearEnabled(){
      return $this->_clear(1);
    }
    
    /**
     * Get <enabled> value
     *
     * @return boolean
     */
    public function getEnabled(){
      return $this->_get(1);
    }
    
    /**
     * Set <enabled> value
     *
     * @param boolean $value
     * @return \google\container\v1\NodePoolAutoscaling
     */
    public function setEnabled( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <min_node_count> has a value
     *
     * @return boolean
     */
    public function hasMinNodeCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <min_node_count> value
     *
     * @return \google\container\v1\NodePoolAutoscaling
     */
    public function clearMinNodeCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <min_node_count> value
     *
     * @return int
     */
    public function getMinNodeCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <min_node_count> value
     *
     * @param int $value
     * @return \google\container\v1\NodePoolAutoscaling
     */
    public function setMinNodeCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <max_node_count> has a value
     *
     * @return boolean
     */
    public function hasMaxNodeCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <max_node_count> value
     *
     * @return \google\container\v1\NodePoolAutoscaling
     */
    public function clearMaxNodeCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <max_node_count> value
     *
     * @return int
     */
    public function getMaxNodeCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <max_node_count> value
     *
     * @param int $value
     * @return \google\container\v1\NodePoolAutoscaling
     */
    public function setMaxNodeCount( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\container\v1\SetLabelsRequest {

  class ResourceLabelsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.SetLabelsRequest.ResourceLabelsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\container\v1\SetLabelsRequest\ResourceLabelsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\container\v1\SetLabelsRequest\ResourceLabelsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\container\v1\SetLabelsRequest\ResourceLabelsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\container\v1\SetLabelsRequest\ResourceLabelsEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\container\v1 {

  class SetLabelsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var \google\container\v1\SetLabelsRequest\ResourceLabelsEntry[]  */
    public $resource_labels = array();
    
    /**  @var string */
    public $label_fingerprint = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.SetLabelsRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE resource_labels = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "resource_labels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\container\v1\SetLabelsRequest\ResourceLabelsEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING label_fingerprint = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "label_fingerprint";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\SetLabelsRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\SetLabelsRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\SetLabelsRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\SetLabelsRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\SetLabelsRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\SetLabelsRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <resource_labels> has a value
     *
     * @return boolean
     */
    public function hasResourceLabels(){
      return $this->_has(4);
    }
    
    /**
     * Clear <resource_labels> value
     *
     * @return \google\container\v1\SetLabelsRequest
     */
    public function clearResourceLabels(){
      return $this->_clear(4);
    }
    
    /**
     * Get <resource_labels> value
     *
     * @param int $idx
     * @return \google\container\v1\SetLabelsRequest\ResourceLabelsEntry
     */
    public function getResourceLabels($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <resource_labels> value
     *
     * @param \google\container\v1\SetLabelsRequest\ResourceLabelsEntry $value
     * @return \google\container\v1\SetLabelsRequest
     */
    public function setResourceLabels(\google\container\v1\SetLabelsRequest\ResourceLabelsEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <resource_labels>
     *
     * @return \google\container\v1\SetLabelsRequest\ResourceLabelsEntry[]
     */
    public function getResourceLabelsList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <resource_labels>
     *
     * @param \google\container\v1\SetLabelsRequest\ResourceLabelsEntry $value
     * @return \google\container\v1\SetLabelsRequest
     */
    public function addResourceLabels(\google\container\v1\SetLabelsRequest\ResourceLabelsEntry $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <label_fingerprint> has a value
     *
     * @return boolean
     */
    public function hasLabelFingerprint(){
      return $this->_has(5);
    }
    
    /**
     * Clear <label_fingerprint> value
     *
     * @return \google\container\v1\SetLabelsRequest
     */
    public function clearLabelFingerprint(){
      return $this->_clear(5);
    }
    
    /**
     * Get <label_fingerprint> value
     *
     * @return string
     */
    public function getLabelFingerprint(){
      return $this->_get(5);
    }
    
    /**
     * Set <label_fingerprint> value
     *
     * @param string $value
     * @return \google\container\v1\SetLabelsRequest
     */
    public function setLabelFingerprint( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\container\v1 {

  class SetLegacyAbacRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var boolean */
    public $enabled = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.SetLegacyAbacRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL enabled = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "enabled";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\SetLegacyAbacRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\SetLegacyAbacRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\SetLegacyAbacRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\SetLegacyAbacRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\SetLegacyAbacRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\SetLegacyAbacRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <enabled> has a value
     *
     * @return boolean
     */
    public function hasEnabled(){
      return $this->_has(4);
    }
    
    /**
     * Clear <enabled> value
     *
     * @return \google\container\v1\SetLegacyAbacRequest
     */
    public function clearEnabled(){
      return $this->_clear(4);
    }
    
    /**
     * Get <enabled> value
     *
     * @return boolean
     */
    public function getEnabled(){
      return $this->_get(4);
    }
    
    /**
     * Set <enabled> value
     *
     * @param boolean $value
     * @return \google\container\v1\SetLegacyAbacRequest
     */
    public function setEnabled( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\container\v1 {

  class StartIPRotationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.StartIPRotationRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\StartIPRotationRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\StartIPRotationRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\StartIPRotationRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\StartIPRotationRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\StartIPRotationRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\StartIPRotationRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\container\v1 {

  class CompleteIPRotationRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $zone = null;
    
    /**  @var string */
    public $cluster_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.container.v1.CompleteIPRotationRequest');

      // OPTIONAL STRING project_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING zone = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "zone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\container\v1\CompleteIPRotationRequest
     */
    public function clearProjectId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(1);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\container\v1\CompleteIPRotationRequest
     */
    public function setProjectId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <zone> has a value
     *
     * @return boolean
     */
    public function hasZone(){
      return $this->_has(2);
    }
    
    /**
     * Clear <zone> value
     *
     * @return \google\container\v1\CompleteIPRotationRequest
     */
    public function clearZone(){
      return $this->_clear(2);
    }
    
    /**
     * Get <zone> value
     *
     * @return string
     */
    public function getZone(){
      return $this->_get(2);
    }
    
    /**
     * Set <zone> value
     *
     * @param string $value
     * @return \google\container\v1\CompleteIPRotationRequest
     */
    public function setZone( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\container\v1\CompleteIPRotationRequest
     */
    public function clearClusterId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\container\v1\CompleteIPRotationRequest
     */
    public function setClusterId( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\container\v1 {

  class ClusterManagerClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\container\v1\ListClustersRequest $input
     */
    public function ListClusters(\google\container\v1\ListClustersRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/ListClusters', $argument, '\google\container\v1\ListClustersResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\GetClusterRequest $input
     */
    public function GetCluster(\google\container\v1\GetClusterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/GetCluster', $argument, '\google\container\v1\Cluster::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\CreateClusterRequest $input
     */
    public function CreateCluster(\google\container\v1\CreateClusterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/CreateCluster', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\UpdateClusterRequest $input
     */
    public function UpdateCluster(\google\container\v1\UpdateClusterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/UpdateCluster', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\SetMasterAuthRequest $input
     */
    public function SetMasterAuth(\google\container\v1\SetMasterAuthRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/SetMasterAuth', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\DeleteClusterRequest $input
     */
    public function DeleteCluster(\google\container\v1\DeleteClusterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/DeleteCluster', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\ListOperationsRequest $input
     */
    public function ListOperations(\google\container\v1\ListOperationsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/ListOperations', $argument, '\google\container\v1\ListOperationsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\GetOperationRequest $input
     */
    public function GetOperation(\google\container\v1\GetOperationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/GetOperation', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\CancelOperationRequest $input
     */
    public function CancelOperation(\google\container\v1\CancelOperationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/CancelOperation', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\GetServerConfigRequest $input
     */
    public function GetServerConfig(\google\container\v1\GetServerConfigRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/GetServerConfig', $argument, '\google\container\v1\ServerConfig::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\ListNodePoolsRequest $input
     */
    public function ListNodePools(\google\container\v1\ListNodePoolsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/ListNodePools', $argument, '\google\container\v1\ListNodePoolsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\GetNodePoolRequest $input
     */
    public function GetNodePool(\google\container\v1\GetNodePoolRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/GetNodePool', $argument, '\google\container\v1\NodePool::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\CreateNodePoolRequest $input
     */
    public function CreateNodePool(\google\container\v1\CreateNodePoolRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/CreateNodePool', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\DeleteNodePoolRequest $input
     */
    public function DeleteNodePool(\google\container\v1\DeleteNodePoolRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/DeleteNodePool', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\RollbackNodePoolUpgradeRequest $input
     */
    public function RollbackNodePoolUpgrade(\google\container\v1\RollbackNodePoolUpgradeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/RollbackNodePoolUpgrade', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\SetNodePoolManagementRequest $input
     */
    public function SetNodePoolManagement(\google\container\v1\SetNodePoolManagementRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/SetNodePoolManagement', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\SetLabelsRequest $input
     */
    public function SetLabels(\google\container\v1\SetLabelsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/SetLabels', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\SetLegacyAbacRequest $input
     */
    public function SetLegacyAbac(\google\container\v1\SetLegacyAbacRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/SetLegacyAbac', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\StartIPRotationRequest $input
     */
    public function StartIPRotation(\google\container\v1\StartIPRotationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/StartIPRotation', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\container\v1\CompleteIPRotationRequest $input
     */
    public function CompleteIPRotation(\google\container\v1\CompleteIPRotationRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.container.v1.ClusterManager/CompleteIPRotation', $argument, '\google\container\v1\Operation::deserialize', $metadata, $options);
    }
  }
}
