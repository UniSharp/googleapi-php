<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/iam/admin/v1/iam.proto
//   Date: 2017-06-13 04:25:52

namespace google\iam\admin\v1 {

  class ServiceAccountKeyAlgorithm extends \DrSlump\Protobuf\Enum {
    const KEY_ALG_UNSPECIFIED = 0;
    const KEY_ALG_RSA_1024 = 1;
    const KEY_ALG_RSA_2048 = 2;
  }
}
namespace google\iam\admin\v1 {

  class ServiceAccountPrivateKeyType extends \DrSlump\Protobuf\Enum {
    const TYPE_UNSPECIFIED = 0;
    const TYPE_PKCS12_FILE = 1;
    const TYPE_GOOGLE_CREDENTIALS_FILE = 2;
  }
}
namespace google\iam\admin\v1 {

  class ServiceAccountPublicKeyType extends \DrSlump\Protobuf\Enum {
    const TYPE_NONE = 0;
    const TYPE_X509_PEM_FILE = 1;
    const TYPE_RAW_PUBLIC_KEY = 2;
  }
}
namespace google\iam\admin\v1 {

  class ServiceAccount extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $project_id = null;
    
    /**  @var string */
    public $unique_id = null;
    
    /**  @var string */
    public $email = null;
    
    /**  @var string */
    public $display_name = null;
    
    /**  @var string */
    public $etag = null;
    
    /**  @var string */
    public $oauth2_client_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.ServiceAccount');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING project_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING unique_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "unique_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING email = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "email";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING display_name = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "display_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES etag = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "etag";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING oauth2_client_id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "oauth2_client_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <project_id> value
     *
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function clearProjectId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(2);
    }
    
    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function setProjectId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unique_id> has a value
     *
     * @return boolean
     */
    public function hasUniqueId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <unique_id> value
     *
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function clearUniqueId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <unique_id> value
     *
     * @return string
     */
    public function getUniqueId(){
      return $this->_get(4);
    }
    
    /**
     * Set <unique_id> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function setUniqueId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <email> has a value
     *
     * @return boolean
     */
    public function hasEmail(){
      return $this->_has(5);
    }
    
    /**
     * Clear <email> value
     *
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function clearEmail(){
      return $this->_clear(5);
    }
    
    /**
     * Get <email> value
     *
     * @return string
     */
    public function getEmail(){
      return $this->_get(5);
    }
    
    /**
     * Set <email> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function setEmail( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <display_name> has a value
     *
     * @return boolean
     */
    public function hasDisplayName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <display_name> value
     *
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function clearDisplayName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <display_name> value
     *
     * @return string
     */
    public function getDisplayName(){
      return $this->_get(6);
    }
    
    /**
     * Set <display_name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function setDisplayName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <etag> has a value
     *
     * @return boolean
     */
    public function hasEtag(){
      return $this->_has(7);
    }
    
    /**
     * Clear <etag> value
     *
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function clearEtag(){
      return $this->_clear(7);
    }
    
    /**
     * Get <etag> value
     *
     * @return string
     */
    public function getEtag(){
      return $this->_get(7);
    }
    
    /**
     * Set <etag> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function setEtag( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <oauth2_client_id> has a value
     *
     * @return boolean
     */
    public function hasOauth2ClientId(){
      return $this->_has(9);
    }
    
    /**
     * Clear <oauth2_client_id> value
     *
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function clearOauth2ClientId(){
      return $this->_clear(9);
    }
    
    /**
     * Get <oauth2_client_id> value
     *
     * @return string
     */
    public function getOauth2ClientId(){
      return $this->_get(9);
    }
    
    /**
     * Set <oauth2_client_id> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function setOauth2ClientId( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class CreateServiceAccountRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $account_id = null;
    
    /**  @var \google\iam\admin\v1\ServiceAccount */
    public $service_account = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.CreateServiceAccountRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING account_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "account_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE service_account = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "service_account";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\iam\admin\v1\ServiceAccount';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\CreateServiceAccountRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\CreateServiceAccountRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <account_id> has a value
     *
     * @return boolean
     */
    public function hasAccountId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <account_id> value
     *
     * @return \google\iam\admin\v1\CreateServiceAccountRequest
     */
    public function clearAccountId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <account_id> value
     *
     * @return string
     */
    public function getAccountId(){
      return $this->_get(2);
    }
    
    /**
     * Set <account_id> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\CreateServiceAccountRequest
     */
    public function setAccountId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <service_account> has a value
     *
     * @return boolean
     */
    public function hasServiceAccount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <service_account> value
     *
     * @return \google\iam\admin\v1\CreateServiceAccountRequest
     */
    public function clearServiceAccount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <service_account> value
     *
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function getServiceAccount(){
      return $this->_get(3);
    }
    
    /**
     * Set <service_account> value
     *
     * @param \google\iam\admin\v1\ServiceAccount $value
     * @return \google\iam\admin\v1\CreateServiceAccountRequest
     */
    public function setServiceAccount(\google\iam\admin\v1\ServiceAccount $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class ListServiceAccountsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int */
    public $page_size = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.ListServiceAccountsRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_size = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_size";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\ListServiceAccountsRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ListServiceAccountsRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_size> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_size> value
     *
     * @return \google\iam\admin\v1\ListServiceAccountsRequest
     */
    public function clearPageSize(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_size> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_size> value
     *
     * @param int $value
     * @return \google\iam\admin\v1\ListServiceAccountsRequest
     */
    public function setPageSize( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\iam\admin\v1\ListServiceAccountsRequest
     */
    public function clearPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ListServiceAccountsRequest
     */
    public function setPageToken( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class ListServiceAccountsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\iam\admin\v1\ServiceAccount[]  */
    public $accounts = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.ListServiceAccountsResponse');

      // REPEATED MESSAGE accounts = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "accounts";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\iam\admin\v1\ServiceAccount';
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <accounts> has a value
     *
     * @return boolean
     */
    public function hasAccounts(){
      return $this->_has(1);
    }
    
    /**
     * Clear <accounts> value
     *
     * @return \google\iam\admin\v1\ListServiceAccountsResponse
     */
    public function clearAccounts(){
      return $this->_clear(1);
    }
    
    /**
     * Get <accounts> value
     *
     * @param int $idx
     * @return \google\iam\admin\v1\ServiceAccount
     */
    public function getAccounts($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <accounts> value
     *
     * @param \google\iam\admin\v1\ServiceAccount $value
     * @return \google\iam\admin\v1\ListServiceAccountsResponse
     */
    public function setAccounts(\google\iam\admin\v1\ServiceAccount $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <accounts>
     *
     * @return \google\iam\admin\v1\ServiceAccount[]
     */
    public function getAccountsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <accounts>
     *
     * @param \google\iam\admin\v1\ServiceAccount $value
     * @return \google\iam\admin\v1\ListServiceAccountsResponse
     */
    public function addAccounts(\google\iam\admin\v1\ServiceAccount $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\iam\admin\v1\ListServiceAccountsResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ListServiceAccountsResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class GetServiceAccountRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.GetServiceAccountRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\GetServiceAccountRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\GetServiceAccountRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class DeleteServiceAccountRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.DeleteServiceAccountRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\DeleteServiceAccountRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\DeleteServiceAccountRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\iam\admin\v1\ListServiceAccountKeysRequest {

  class KeyType extends \DrSlump\Protobuf\Enum {
    const KEY_TYPE_UNSPECIFIED = 0;
    const USER_MANAGED = 1;
    const SYSTEM_MANAGED = 2;
  }
}
namespace google\iam\admin\v1 {

  class ListServiceAccountKeysRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \google\iam\admin\v1\ListServiceAccountKeysRequest\KeyType[]  */
    public $key_types = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.ListServiceAccountKeysRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED ENUM key_types = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "key_types";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\iam\admin\v1\ListServiceAccountKeysRequest\KeyType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\ListServiceAccountKeysRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ListServiceAccountKeysRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <key_types> has a value
     *
     * @return boolean
     */
    public function hasKeyTypes(){
      return $this->_has(2);
    }
    
    /**
     * Clear <key_types> value
     *
     * @return \google\iam\admin\v1\ListServiceAccountKeysRequest
     */
    public function clearKeyTypes(){
      return $this->_clear(2);
    }
    
    /**
     * Get <key_types> value
     *
     * @param int $idx
     * @return int - \google\iam\admin\v1\ListServiceAccountKeysRequest\KeyType
     */
    public function getKeyTypes($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <key_types> value
     *
     * @param int - \google\iam\admin\v1\ListServiceAccountKeysRequest\KeyType $value
     * @return \google\iam\admin\v1\ListServiceAccountKeysRequest
     */
    public function setKeyTypes( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <key_types>
     *
     * @return int - \google\iam\admin\v1\ListServiceAccountKeysRequest\KeyType[]
     */
    public function getKeyTypesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <key_types>
     *
     * @param int - \google\iam\admin\v1\ListServiceAccountKeysRequest\KeyType $value
     * @return \google\iam\admin\v1\ListServiceAccountKeysRequest
     */
    public function addKeyTypes( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class ListServiceAccountKeysResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\iam\admin\v1\ServiceAccountKey[]  */
    public $keys = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.ListServiceAccountKeysResponse');

      // REPEATED MESSAGE keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\iam\admin\v1\ServiceAccountKey';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }
    
    /**
     * Clear <keys> value
     *
     * @return \google\iam\admin\v1\ListServiceAccountKeysResponse
     */
    public function clearKeys(){
      return $this->_clear(1);
    }
    
    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <keys> value
     *
     * @param \google\iam\admin\v1\ServiceAccountKey $value
     * @return \google\iam\admin\v1\ListServiceAccountKeysResponse
     */
    public function setKeys(\google\iam\admin\v1\ServiceAccountKey $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <keys>
     *
     * @return \google\iam\admin\v1\ServiceAccountKey[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <keys>
     *
     * @param \google\iam\admin\v1\ServiceAccountKey $value
     * @return \google\iam\admin\v1\ListServiceAccountKeysResponse
     */
    public function addKeys(\google\iam\admin\v1\ServiceAccountKey $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class GetServiceAccountKeyRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \google\iam\admin\v1\ServiceAccountPublicKeyType */
    public $public_key_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.GetServiceAccountKeyRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM public_key_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "public_key_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\iam\admin\v1\ServiceAccountPublicKeyType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\GetServiceAccountKeyRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\GetServiceAccountKeyRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <public_key_type> has a value
     *
     * @return boolean
     */
    public function hasPublicKeyType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <public_key_type> value
     *
     * @return \google\iam\admin\v1\GetServiceAccountKeyRequest
     */
    public function clearPublicKeyType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <public_key_type> value
     *
     * @return int - \google\iam\admin\v1\ServiceAccountPublicKeyType
     */
    public function getPublicKeyType(){
      return $this->_get(2);
    }
    
    /**
     * Set <public_key_type> value
     *
     * @param int - \google\iam\admin\v1\ServiceAccountPublicKeyType $value
     * @return \google\iam\admin\v1\GetServiceAccountKeyRequest
     */
    public function setPublicKeyType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class ServiceAccountKey extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \google\iam\admin\v1\ServiceAccountPrivateKeyType */
    public $private_key_type = null;
    
    /**  @var int - \google\iam\admin\v1\ServiceAccountKeyAlgorithm */
    public $key_algorithm = null;
    
    /**  @var string */
    public $private_key_data = null;
    
    /**  @var string */
    public $public_key_data = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $valid_after_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $valid_before_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.ServiceAccountKey');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM private_key_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "private_key_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\iam\admin\v1\ServiceAccountPrivateKeyType';
      $descriptor->addField($f);

      // OPTIONAL ENUM key_algorithm = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "key_algorithm";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\iam\admin\v1\ServiceAccountKeyAlgorithm';
      $descriptor->addField($f);

      // OPTIONAL BYTES private_key_data = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "private_key_data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES public_key_data = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "public_key_data";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_after_time = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "valid_after_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_before_time = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "valid_before_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <private_key_type> has a value
     *
     * @return boolean
     */
    public function hasPrivateKeyType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <private_key_type> value
     *
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function clearPrivateKeyType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <private_key_type> value
     *
     * @return int - \google\iam\admin\v1\ServiceAccountPrivateKeyType
     */
    public function getPrivateKeyType(){
      return $this->_get(2);
    }
    
    /**
     * Set <private_key_type> value
     *
     * @param int - \google\iam\admin\v1\ServiceAccountPrivateKeyType $value
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function setPrivateKeyType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <key_algorithm> has a value
     *
     * @return boolean
     */
    public function hasKeyAlgorithm(){
      return $this->_has(8);
    }
    
    /**
     * Clear <key_algorithm> value
     *
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function clearKeyAlgorithm(){
      return $this->_clear(8);
    }
    
    /**
     * Get <key_algorithm> value
     *
     * @return int - \google\iam\admin\v1\ServiceAccountKeyAlgorithm
     */
    public function getKeyAlgorithm(){
      return $this->_get(8);
    }
    
    /**
     * Set <key_algorithm> value
     *
     * @param int - \google\iam\admin\v1\ServiceAccountKeyAlgorithm $value
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function setKeyAlgorithm( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <private_key_data> has a value
     *
     * @return boolean
     */
    public function hasPrivateKeyData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <private_key_data> value
     *
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function clearPrivateKeyData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <private_key_data> value
     *
     * @return string
     */
    public function getPrivateKeyData(){
      return $this->_get(3);
    }
    
    /**
     * Set <private_key_data> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function setPrivateKeyData( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <public_key_data> has a value
     *
     * @return boolean
     */
    public function hasPublicKeyData(){
      return $this->_has(7);
    }
    
    /**
     * Clear <public_key_data> value
     *
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function clearPublicKeyData(){
      return $this->_clear(7);
    }
    
    /**
     * Get <public_key_data> value
     *
     * @return string
     */
    public function getPublicKeyData(){
      return $this->_get(7);
    }
    
    /**
     * Set <public_key_data> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function setPublicKeyData( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <valid_after_time> has a value
     *
     * @return boolean
     */
    public function hasValidAfterTime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <valid_after_time> value
     *
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function clearValidAfterTime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <valid_after_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getValidAfterTime(){
      return $this->_get(4);
    }
    
    /**
     * Set <valid_after_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function setValidAfterTime(\google\protobuf\Timestamp $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <valid_before_time> has a value
     *
     * @return boolean
     */
    public function hasValidBeforeTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <valid_before_time> value
     *
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function clearValidBeforeTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <valid_before_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getValidBeforeTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <valid_before_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\iam\admin\v1\ServiceAccountKey
     */
    public function setValidBeforeTime(\google\protobuf\Timestamp $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class CreateServiceAccountKeyRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var int - \google\iam\admin\v1\ServiceAccountPrivateKeyType */
    public $private_key_type = null;
    
    /**  @var int - \google\iam\admin\v1\ServiceAccountKeyAlgorithm */
    public $key_algorithm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.CreateServiceAccountKeyRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM private_key_type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "private_key_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\iam\admin\v1\ServiceAccountPrivateKeyType';
      $descriptor->addField($f);

      // OPTIONAL ENUM key_algorithm = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "key_algorithm";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\iam\admin\v1\ServiceAccountKeyAlgorithm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\CreateServiceAccountKeyRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\CreateServiceAccountKeyRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <private_key_type> has a value
     *
     * @return boolean
     */
    public function hasPrivateKeyType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <private_key_type> value
     *
     * @return \google\iam\admin\v1\CreateServiceAccountKeyRequest
     */
    public function clearPrivateKeyType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <private_key_type> value
     *
     * @return int - \google\iam\admin\v1\ServiceAccountPrivateKeyType
     */
    public function getPrivateKeyType(){
      return $this->_get(2);
    }
    
    /**
     * Set <private_key_type> value
     *
     * @param int - \google\iam\admin\v1\ServiceAccountPrivateKeyType $value
     * @return \google\iam\admin\v1\CreateServiceAccountKeyRequest
     */
    public function setPrivateKeyType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <key_algorithm> has a value
     *
     * @return boolean
     */
    public function hasKeyAlgorithm(){
      return $this->_has(3);
    }
    
    /**
     * Clear <key_algorithm> value
     *
     * @return \google\iam\admin\v1\CreateServiceAccountKeyRequest
     */
    public function clearKeyAlgorithm(){
      return $this->_clear(3);
    }
    
    /**
     * Get <key_algorithm> value
     *
     * @return int - \google\iam\admin\v1\ServiceAccountKeyAlgorithm
     */
    public function getKeyAlgorithm(){
      return $this->_get(3);
    }
    
    /**
     * Set <key_algorithm> value
     *
     * @param int - \google\iam\admin\v1\ServiceAccountKeyAlgorithm $value
     * @return \google\iam\admin\v1\CreateServiceAccountKeyRequest
     */
    public function setKeyAlgorithm( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class DeleteServiceAccountKeyRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.DeleteServiceAccountKeyRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\DeleteServiceAccountKeyRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\DeleteServiceAccountKeyRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class SignBlobRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $bytes_to_sign = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.SignBlobRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES bytes_to_sign = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bytes_to_sign";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\SignBlobRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\SignBlobRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bytes_to_sign> has a value
     *
     * @return boolean
     */
    public function hasBytesToSign(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bytes_to_sign> value
     *
     * @return \google\iam\admin\v1\SignBlobRequest
     */
    public function clearBytesToSign(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bytes_to_sign> value
     *
     * @return string
     */
    public function getBytesToSign(){
      return $this->_get(2);
    }
    
    /**
     * Set <bytes_to_sign> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\SignBlobRequest
     */
    public function setBytesToSign( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class SignBlobResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key_id = null;
    
    /**  @var string */
    public $signature = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.SignBlobResponse');

      // OPTIONAL STRING key_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES signature = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "signature";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key_id> has a value
     *
     * @return boolean
     */
    public function hasKeyId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key_id> value
     *
     * @return \google\iam\admin\v1\SignBlobResponse
     */
    public function clearKeyId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key_id> value
     *
     * @return string
     */
    public function getKeyId(){
      return $this->_get(1);
    }
    
    /**
     * Set <key_id> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\SignBlobResponse
     */
    public function setKeyId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <signature> has a value
     *
     * @return boolean
     */
    public function hasSignature(){
      return $this->_has(2);
    }
    
    /**
     * Clear <signature> value
     *
     * @return \google\iam\admin\v1\SignBlobResponse
     */
    public function clearSignature(){
      return $this->_clear(2);
    }
    
    /**
     * Get <signature> value
     *
     * @return string
     */
    public function getSignature(){
      return $this->_get(2);
    }
    
    /**
     * Set <signature> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\SignBlobResponse
     */
    public function setSignature( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class Role extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.Role');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\iam\admin\v1\Role
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\Role
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \google\iam\admin\v1\Role
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\Role
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <description> value
     *
     * @return \google\iam\admin\v1\Role
     */
    public function clearDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\Role
     */
    public function setDescription( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class QueryGrantableRolesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $full_resource_name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.QueryGrantableRolesRequest');

      // OPTIONAL STRING full_resource_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "full_resource_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <full_resource_name> has a value
     *
     * @return boolean
     */
    public function hasFullResourceName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <full_resource_name> value
     *
     * @return \google\iam\admin\v1\QueryGrantableRolesRequest
     */
    public function clearFullResourceName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <full_resource_name> value
     *
     * @return string
     */
    public function getFullResourceName(){
      return $this->_get(1);
    }
    
    /**
     * Set <full_resource_name> value
     *
     * @param string $value
     * @return \google\iam\admin\v1\QueryGrantableRolesRequest
     */
    public function setFullResourceName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class QueryGrantableRolesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\iam\admin\v1\Role[]  */
    public $roles = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.iam.admin.v1.QueryGrantableRolesResponse');

      // REPEATED MESSAGE roles = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "roles";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\iam\admin\v1\Role';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <roles> has a value
     *
     * @return boolean
     */
    public function hasRoles(){
      return $this->_has(1);
    }
    
    /**
     * Clear <roles> value
     *
     * @return \google\iam\admin\v1\QueryGrantableRolesResponse
     */
    public function clearRoles(){
      return $this->_clear(1);
    }
    
    /**
     * Get <roles> value
     *
     * @param int $idx
     * @return \google\iam\admin\v1\Role
     */
    public function getRoles($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <roles> value
     *
     * @param \google\iam\admin\v1\Role $value
     * @return \google\iam\admin\v1\QueryGrantableRolesResponse
     */
    public function setRoles(\google\iam\admin\v1\Role $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <roles>
     *
     * @return \google\iam\admin\v1\Role[]
     */
    public function getRolesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <roles>
     *
     * @param \google\iam\admin\v1\Role $value
     * @return \google\iam\admin\v1\QueryGrantableRolesResponse
     */
    public function addRoles(\google\iam\admin\v1\Role $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\iam\admin\v1 {

  class IAMClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\iam\admin\v1\ListServiceAccountsRequest $input
     */
    public function ListServiceAccounts(\google\iam\admin\v1\ListServiceAccountsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/ListServiceAccounts', $argument, '\google\iam\admin\v1\ListServiceAccountsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\GetServiceAccountRequest $input
     */
    public function GetServiceAccount(\google\iam\admin\v1\GetServiceAccountRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/GetServiceAccount', $argument, '\google\iam\admin\v1\ServiceAccount::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\CreateServiceAccountRequest $input
     */
    public function CreateServiceAccount(\google\iam\admin\v1\CreateServiceAccountRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/CreateServiceAccount', $argument, '\google\iam\admin\v1\ServiceAccount::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\ServiceAccount $input
     */
    public function UpdateServiceAccount(\google\iam\admin\v1\ServiceAccount $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/UpdateServiceAccount', $argument, '\google\iam\admin\v1\ServiceAccount::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\DeleteServiceAccountRequest $input
     */
    public function DeleteServiceAccount(\google\iam\admin\v1\DeleteServiceAccountRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/DeleteServiceAccount', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\ListServiceAccountKeysRequest $input
     */
    public function ListServiceAccountKeys(\google\iam\admin\v1\ListServiceAccountKeysRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/ListServiceAccountKeys', $argument, '\google\iam\admin\v1\ListServiceAccountKeysResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\GetServiceAccountKeyRequest $input
     */
    public function GetServiceAccountKey(\google\iam\admin\v1\GetServiceAccountKeyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/GetServiceAccountKey', $argument, '\google\iam\admin\v1\ServiceAccountKey::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\CreateServiceAccountKeyRequest $input
     */
    public function CreateServiceAccountKey(\google\iam\admin\v1\CreateServiceAccountKeyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/CreateServiceAccountKey', $argument, '\google\iam\admin\v1\ServiceAccountKey::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\DeleteServiceAccountKeyRequest $input
     */
    public function DeleteServiceAccountKey(\google\iam\admin\v1\DeleteServiceAccountKeyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/DeleteServiceAccountKey', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\SignBlobRequest $input
     */
    public function SignBlob(\google\iam\admin\v1\SignBlobRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/SignBlob', $argument, '\google\iam\admin\v1\SignBlobResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\GetIamPolicyRequest $input
     */
    public function GetIamPolicy(\google\iam\v1\GetIamPolicyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/GetIamPolicy', $argument, '\google\iam\v1\Policy::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\SetIamPolicyRequest $input
     */
    public function SetIamPolicy(\google\iam\v1\SetIamPolicyRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/SetIamPolicy', $argument, '\google\iam\v1\Policy::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\v1\TestIamPermissionsRequest $input
     */
    public function TestIamPermissions(\google\iam\v1\TestIamPermissionsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/TestIamPermissions', $argument, '\google\iam\v1\TestIamPermissionsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\iam\admin\v1\QueryGrantableRolesRequest $input
     */
    public function QueryGrantableRoles(\google\iam\admin\v1\QueryGrantableRolesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.iam.admin.v1.IAM/QueryGrantableRoles', $argument, '\google\iam\admin\v1\QueryGrantableRolesResponse::deserialize', $metadata, $options);
    }
  }
}
