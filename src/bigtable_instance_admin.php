<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/bigtable/admin/v2/bigtable_instance_admin.proto
//   Date: 2017-06-13 04:23:35

namespace google\bigtable\admin\v2\CreateInstanceRequest {

  class ClustersEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var \google\bigtable\admin\v2\Cluster */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.CreateInstanceRequest.ClustersEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\admin\v2\Cluster';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return \google\bigtable\admin\v2\Cluster
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param \google\bigtable\admin\v2\Cluster $value
     * @return \google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry
     */
    public function setValue(\google\bigtable\admin\v2\Cluster $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class CreateInstanceRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var string */
    public $instance_id = null;
    
    /**  @var \google\bigtable\admin\v2\Instance */
    public $instance = null;
    
    /**  @var \google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry[]  */
    public $clusters = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.CreateInstanceRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING instance_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "instance_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE instance = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "instance";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\admin\v2\Instance';
      $descriptor->addField($f);

      // REPEATED MESSAGE clusters = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "clusters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <instance_id> has a value
     *
     * @return boolean
     */
    public function hasInstanceId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <instance_id> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function clearInstanceId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <instance_id> value
     *
     * @return string
     */
    public function getInstanceId(){
      return $this->_get(2);
    }
    
    /**
     * Set <instance_id> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function setInstanceId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <instance> has a value
     *
     * @return boolean
     */
    public function hasInstance(){
      return $this->_has(3);
    }
    
    /**
     * Clear <instance> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function clearInstance(){
      return $this->_clear(3);
    }
    
    /**
     * Get <instance> value
     *
     * @return \google\bigtable\admin\v2\Instance
     */
    public function getInstance(){
      return $this->_get(3);
    }
    
    /**
     * Set <instance> value
     *
     * @param \google\bigtable\admin\v2\Instance $value
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function setInstance(\google\bigtable\admin\v2\Instance $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <clusters> has a value
     *
     * @return boolean
     */
    public function hasClusters(){
      return $this->_has(4);
    }
    
    /**
     * Clear <clusters> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function clearClusters(){
      return $this->_clear(4);
    }
    
    /**
     * Get <clusters> value
     *
     * @param int $idx
     * @return \google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry
     */
    public function getClusters($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <clusters> value
     *
     * @param \google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry $value
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function setClusters(\google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <clusters>
     *
     * @return \google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry[]
     */
    public function getClustersList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <clusters>
     *
     * @param \google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry $value
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function addClusters(\google\bigtable\admin\v2\CreateInstanceRequest\ClustersEntry $value){
     return $this->_add(4, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class GetInstanceRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.GetInstanceRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\v2\GetInstanceRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\GetInstanceRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class ListInstancesRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.ListInstancesRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\bigtable\admin\v2\ListInstancesRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListInstancesRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\bigtable\admin\v2\ListInstancesRequest
     */
    public function clearPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListInstancesRequest
     */
    public function setPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class ListInstancesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\admin\v2\Instance[]  */
    public $instances = array();
    
    /**  @var string[]  */
    public $failed_locations = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.ListInstancesResponse');

      // REPEATED MESSAGE instances = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "instances";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\admin\v2\Instance';
      $descriptor->addField($f);

      // REPEATED STRING failed_locations = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "failed_locations";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <instances> has a value
     *
     * @return boolean
     */
    public function hasInstances(){
      return $this->_has(1);
    }
    
    /**
     * Clear <instances> value
     *
     * @return \google\bigtable\admin\v2\ListInstancesResponse
     */
    public function clearInstances(){
      return $this->_clear(1);
    }
    
    /**
     * Get <instances> value
     *
     * @param int $idx
     * @return \google\bigtable\admin\v2\Instance
     */
    public function getInstances($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <instances> value
     *
     * @param \google\bigtable\admin\v2\Instance $value
     * @return \google\bigtable\admin\v2\ListInstancesResponse
     */
    public function setInstances(\google\bigtable\admin\v2\Instance $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <instances>
     *
     * @return \google\bigtable\admin\v2\Instance[]
     */
    public function getInstancesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <instances>
     *
     * @param \google\bigtable\admin\v2\Instance $value
     * @return \google\bigtable\admin\v2\ListInstancesResponse
     */
    public function addInstances(\google\bigtable\admin\v2\Instance $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <failed_locations> has a value
     *
     * @return boolean
     */
    public function hasFailedLocations(){
      return $this->_has(2);
    }
    
    /**
     * Clear <failed_locations> value
     *
     * @return \google\bigtable\admin\v2\ListInstancesResponse
     */
    public function clearFailedLocations(){
      return $this->_clear(2);
    }
    
    /**
     * Get <failed_locations> value
     *
     * @param int $idx
     * @return string
     */
    public function getFailedLocations($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <failed_locations> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListInstancesResponse
     */
    public function setFailedLocations( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <failed_locations>
     *
     * @return string[]
     */
    public function getFailedLocationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <failed_locations>
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListInstancesResponse
     */
    public function addFailedLocations( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\bigtable\admin\v2\ListInstancesResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListInstancesResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class DeleteInstanceRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.DeleteInstanceRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\v2\DeleteInstanceRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\DeleteInstanceRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class CreateClusterRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var string */
    public $cluster_id = null;
    
    /**  @var \google\bigtable\admin\v2\Cluster */
    public $cluster = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.CreateClusterRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cluster_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cluster_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cluster = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cluster";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\admin\v2\Cluster';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\bigtable\admin\v2\CreateClusterRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\CreateClusterRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cluster_id> has a value
     *
     * @return boolean
     */
    public function hasClusterId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cluster_id> value
     *
     * @return \google\bigtable\admin\v2\CreateClusterRequest
     */
    public function clearClusterId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cluster_id> value
     *
     * @return string
     */
    public function getClusterId(){
      return $this->_get(2);
    }
    
    /**
     * Set <cluster_id> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\CreateClusterRequest
     */
    public function setClusterId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cluster> has a value
     *
     * @return boolean
     */
    public function hasCluster(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cluster> value
     *
     * @return \google\bigtable\admin\v2\CreateClusterRequest
     */
    public function clearCluster(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cluster> value
     *
     * @return \google\bigtable\admin\v2\Cluster
     */
    public function getCluster(){
      return $this->_get(3);
    }
    
    /**
     * Set <cluster> value
     *
     * @param \google\bigtable\admin\v2\Cluster $value
     * @return \google\bigtable\admin\v2\CreateClusterRequest
     */
    public function setCluster(\google\bigtable\admin\v2\Cluster $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class GetClusterRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.GetClusterRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\v2\GetClusterRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\GetClusterRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class ListClustersRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $parent = null;
    
    /**  @var string */
    public $page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.ListClustersRequest');

      // OPTIONAL STRING parent = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parent";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING page_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parent> has a value
     *
     * @return boolean
     */
    public function hasParent(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parent> value
     *
     * @return \google\bigtable\admin\v2\ListClustersRequest
     */
    public function clearParent(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parent> value
     *
     * @return string
     */
    public function getParent(){
      return $this->_get(1);
    }
    
    /**
     * Set <parent> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListClustersRequest
     */
    public function setParent( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_token> has a value
     *
     * @return boolean
     */
    public function hasPageToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_token> value
     *
     * @return \google\bigtable\admin\v2\ListClustersRequest
     */
    public function clearPageToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_token> value
     *
     * @return string
     */
    public function getPageToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_token> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListClustersRequest
     */
    public function setPageToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class ListClustersResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\admin\v2\Cluster[]  */
    public $clusters = array();
    
    /**  @var string[]  */
    public $failed_locations = array();
    
    /**  @var string */
    public $next_page_token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.ListClustersResponse');

      // REPEATED MESSAGE clusters = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "clusters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\bigtable\admin\v2\Cluster';
      $descriptor->addField($f);

      // REPEATED STRING failed_locations = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "failed_locations";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING next_page_token = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "next_page_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <clusters> has a value
     *
     * @return boolean
     */
    public function hasClusters(){
      return $this->_has(1);
    }
    
    /**
     * Clear <clusters> value
     *
     * @return \google\bigtable\admin\v2\ListClustersResponse
     */
    public function clearClusters(){
      return $this->_clear(1);
    }
    
    /**
     * Get <clusters> value
     *
     * @param int $idx
     * @return \google\bigtable\admin\v2\Cluster
     */
    public function getClusters($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <clusters> value
     *
     * @param \google\bigtable\admin\v2\Cluster $value
     * @return \google\bigtable\admin\v2\ListClustersResponse
     */
    public function setClusters(\google\bigtable\admin\v2\Cluster $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <clusters>
     *
     * @return \google\bigtable\admin\v2\Cluster[]
     */
    public function getClustersList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <clusters>
     *
     * @param \google\bigtable\admin\v2\Cluster $value
     * @return \google\bigtable\admin\v2\ListClustersResponse
     */
    public function addClusters(\google\bigtable\admin\v2\Cluster $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <failed_locations> has a value
     *
     * @return boolean
     */
    public function hasFailedLocations(){
      return $this->_has(2);
    }
    
    /**
     * Clear <failed_locations> value
     *
     * @return \google\bigtable\admin\v2\ListClustersResponse
     */
    public function clearFailedLocations(){
      return $this->_clear(2);
    }
    
    /**
     * Get <failed_locations> value
     *
     * @param int $idx
     * @return string
     */
    public function getFailedLocations($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <failed_locations> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListClustersResponse
     */
    public function setFailedLocations( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <failed_locations>
     *
     * @return string[]
     */
    public function getFailedLocationsList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <failed_locations>
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListClustersResponse
     */
    public function addFailedLocations( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <next_page_token> has a value
     *
     * @return boolean
     */
    public function hasNextPageToken(){
      return $this->_has(3);
    }
    
    /**
     * Clear <next_page_token> value
     *
     * @return \google\bigtable\admin\v2\ListClustersResponse
     */
    public function clearNextPageToken(){
      return $this->_clear(3);
    }
    
    /**
     * Get <next_page_token> value
     *
     * @return string
     */
    public function getNextPageToken(){
      return $this->_get(3);
    }
    
    /**
     * Set <next_page_token> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\ListClustersResponse
     */
    public function setNextPageToken( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class DeleteClusterRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.DeleteClusterRequest');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\bigtable\admin\v2\DeleteClusterRequest
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\bigtable\admin\v2\DeleteClusterRequest
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class CreateInstanceMetadata extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\admin\v2\CreateInstanceRequest */
    public $original_request = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $request_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $finish_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.CreateInstanceMetadata');

      // OPTIONAL MESSAGE original_request = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "original_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\admin\v2\CreateInstanceRequest';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE request_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "request_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE finish_time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "finish_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <original_request> has a value
     *
     * @return boolean
     */
    public function hasOriginalRequest(){
      return $this->_has(1);
    }
    
    /**
     * Clear <original_request> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceMetadata
     */
    public function clearOriginalRequest(){
      return $this->_clear(1);
    }
    
    /**
     * Get <original_request> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceRequest
     */
    public function getOriginalRequest(){
      return $this->_get(1);
    }
    
    /**
     * Set <original_request> value
     *
     * @param \google\bigtable\admin\v2\CreateInstanceRequest $value
     * @return \google\bigtable\admin\v2\CreateInstanceMetadata
     */
    public function setOriginalRequest(\google\bigtable\admin\v2\CreateInstanceRequest $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <request_time> has a value
     *
     * @return boolean
     */
    public function hasRequestTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <request_time> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceMetadata
     */
    public function clearRequestTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <request_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getRequestTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <request_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\bigtable\admin\v2\CreateInstanceMetadata
     */
    public function setRequestTime(\google\protobuf\Timestamp $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <finish_time> has a value
     *
     * @return boolean
     */
    public function hasFinishTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <finish_time> value
     *
     * @return \google\bigtable\admin\v2\CreateInstanceMetadata
     */
    public function clearFinishTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <finish_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getFinishTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <finish_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\bigtable\admin\v2\CreateInstanceMetadata
     */
    public function setFinishTime(\google\protobuf\Timestamp $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class UpdateClusterMetadata extends \DrSlump\Protobuf\Message {

    /**  @var \google\bigtable\admin\v2\Cluster */
    public $original_request = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $request_time = null;
    
    /**  @var \google\protobuf\Timestamp */
    public $finish_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.bigtable.admin.v2.UpdateClusterMetadata');

      // OPTIONAL MESSAGE original_request = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "original_request";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\bigtable\admin\v2\Cluster';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE request_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "request_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE finish_time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "finish_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Timestamp';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <original_request> has a value
     *
     * @return boolean
     */
    public function hasOriginalRequest(){
      return $this->_has(1);
    }
    
    /**
     * Clear <original_request> value
     *
     * @return \google\bigtable\admin\v2\UpdateClusterMetadata
     */
    public function clearOriginalRequest(){
      return $this->_clear(1);
    }
    
    /**
     * Get <original_request> value
     *
     * @return \google\bigtable\admin\v2\Cluster
     */
    public function getOriginalRequest(){
      return $this->_get(1);
    }
    
    /**
     * Set <original_request> value
     *
     * @param \google\bigtable\admin\v2\Cluster $value
     * @return \google\bigtable\admin\v2\UpdateClusterMetadata
     */
    public function setOriginalRequest(\google\bigtable\admin\v2\Cluster $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <request_time> has a value
     *
     * @return boolean
     */
    public function hasRequestTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <request_time> value
     *
     * @return \google\bigtable\admin\v2\UpdateClusterMetadata
     */
    public function clearRequestTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <request_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getRequestTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <request_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\bigtable\admin\v2\UpdateClusterMetadata
     */
    public function setRequestTime(\google\protobuf\Timestamp $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <finish_time> has a value
     *
     * @return boolean
     */
    public function hasFinishTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <finish_time> value
     *
     * @return \google\bigtable\admin\v2\UpdateClusterMetadata
     */
    public function clearFinishTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <finish_time> value
     *
     * @return \google\protobuf\Timestamp
     */
    public function getFinishTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <finish_time> value
     *
     * @param \google\protobuf\Timestamp $value
     * @return \google\bigtable\admin\v2\UpdateClusterMetadata
     */
    public function setFinishTime(\google\protobuf\Timestamp $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\bigtable\admin\v2 {

  class BigtableInstanceAdminClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\bigtable\admin\v2\CreateInstanceRequest $input
     */
    public function CreateInstance(\google\bigtable\admin\v2\CreateInstanceRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/CreateInstance', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\admin\v2\GetInstanceRequest $input
     */
    public function GetInstance(\google\bigtable\admin\v2\GetInstanceRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/GetInstance', $argument, '\google\bigtable\admin\v2\Instance::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\admin\v2\ListInstancesRequest $input
     */
    public function ListInstances(\google\bigtable\admin\v2\ListInstancesRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/ListInstances', $argument, '\google\bigtable\admin\v2\ListInstancesResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\admin\v2\Instance $input
     */
    public function UpdateInstance(\google\bigtable\admin\v2\Instance $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/UpdateInstance', $argument, '\google\bigtable\admin\v2\Instance::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\admin\v2\DeleteInstanceRequest $input
     */
    public function DeleteInstance(\google\bigtable\admin\v2\DeleteInstanceRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/DeleteInstance', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\admin\v2\CreateClusterRequest $input
     */
    public function CreateCluster(\google\bigtable\admin\v2\CreateClusterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/CreateCluster', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\admin\v2\GetClusterRequest $input
     */
    public function GetCluster(\google\bigtable\admin\v2\GetClusterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/GetCluster', $argument, '\google\bigtable\admin\v2\Cluster::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\admin\v2\ListClustersRequest $input
     */
    public function ListClusters(\google\bigtable\admin\v2\ListClustersRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/ListClusters', $argument, '\google\bigtable\admin\v2\ListClustersResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\admin\v2\Cluster $input
     */
    public function UpdateCluster(\google\bigtable\admin\v2\Cluster $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/UpdateCluster', $argument, '\google\longrunning\Operation::deserialize', $metadata, $options);
    }
    /**
     * @param google\bigtable\admin\v2\DeleteClusterRequest $input
     */
    public function DeleteCluster(\google\bigtable\admin\v2\DeleteClusterRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.bigtable.admin.v2.BigtableInstanceAdmin/DeleteCluster', $argument, '\google\protobuf\Empty::deserialize', $metadata, $options);
    }
  }
}
