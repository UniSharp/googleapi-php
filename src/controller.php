<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/devtools/clouddebugger/v2/controller.proto
//   Date: 2017-06-13 04:25:08

namespace google\devtools\clouddebugger\v2 {

  class RegisterDebuggeeRequest extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\clouddebugger\v2\Debuggee */
    public $debuggee = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.RegisterDebuggeeRequest');

      // OPTIONAL MESSAGE debuggee = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "debuggee";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\Debuggee';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <debuggee> has a value
     *
     * @return boolean
     */
    public function hasDebuggee(){
      return $this->_has(1);
    }
    
    /**
     * Clear <debuggee> value
     *
     * @return \google\devtools\clouddebugger\v2\RegisterDebuggeeRequest
     */
    public function clearDebuggee(){
      return $this->_clear(1);
    }
    
    /**
     * Get <debuggee> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function getDebuggee(){
      return $this->_get(1);
    }
    
    /**
     * Set <debuggee> value
     *
     * @param \google\devtools\clouddebugger\v2\Debuggee $value
     * @return \google\devtools\clouddebugger\v2\RegisterDebuggeeRequest
     */
    public function setDebuggee(\google\devtools\clouddebugger\v2\Debuggee $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class RegisterDebuggeeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\clouddebugger\v2\Debuggee */
    public $debuggee = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.RegisterDebuggeeResponse');

      // OPTIONAL MESSAGE debuggee = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "debuggee";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\Debuggee';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <debuggee> has a value
     *
     * @return boolean
     */
    public function hasDebuggee(){
      return $this->_has(1);
    }
    
    /**
     * Clear <debuggee> value
     *
     * @return \google\devtools\clouddebugger\v2\RegisterDebuggeeResponse
     */
    public function clearDebuggee(){
      return $this->_clear(1);
    }
    
    /**
     * Get <debuggee> value
     *
     * @return \google\devtools\clouddebugger\v2\Debuggee
     */
    public function getDebuggee(){
      return $this->_get(1);
    }
    
    /**
     * Set <debuggee> value
     *
     * @param \google\devtools\clouddebugger\v2\Debuggee $value
     * @return \google\devtools\clouddebugger\v2\RegisterDebuggeeResponse
     */
    public function setDebuggee(\google\devtools\clouddebugger\v2\Debuggee $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class ListActiveBreakpointsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $debuggee_id = null;
    
    /**  @var string */
    public $wait_token = null;
    
    /**  @var boolean */
    public $success_on_timeout = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest');

      // OPTIONAL STRING debuggee_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "debuggee_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING wait_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "wait_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL success_on_timeout = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "success_on_timeout";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <debuggee_id> has a value
     *
     * @return boolean
     */
    public function hasDebuggeeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <debuggee_id> value
     *
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsRequest
     */
    public function clearDebuggeeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <debuggee_id> value
     *
     * @return string
     */
    public function getDebuggeeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <debuggee_id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsRequest
     */
    public function setDebuggeeId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <wait_token> has a value
     *
     * @return boolean
     */
    public function hasWaitToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <wait_token> value
     *
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsRequest
     */
    public function clearWaitToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <wait_token> value
     *
     * @return string
     */
    public function getWaitToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <wait_token> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsRequest
     */
    public function setWaitToken( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <success_on_timeout> has a value
     *
     * @return boolean
     */
    public function hasSuccessOnTimeout(){
      return $this->_has(3);
    }
    
    /**
     * Clear <success_on_timeout> value
     *
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsRequest
     */
    public function clearSuccessOnTimeout(){
      return $this->_clear(3);
    }
    
    /**
     * Get <success_on_timeout> value
     *
     * @return boolean
     */
    public function getSuccessOnTimeout(){
      return $this->_get(3);
    }
    
    /**
     * Set <success_on_timeout> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsRequest
     */
    public function setSuccessOnTimeout( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class ListActiveBreakpointsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\devtools\clouddebugger\v2\Breakpoint[]  */
    public $breakpoints = array();
    
    /**  @var string */
    public $next_wait_token = null;
    
    /**  @var boolean */
    public $wait_expired = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse');

      // REPEATED MESSAGE breakpoints = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "breakpoints";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint';
      $descriptor->addField($f);

      // OPTIONAL STRING next_wait_token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "next_wait_token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL wait_expired = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "wait_expired";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <breakpoints> has a value
     *
     * @return boolean
     */
    public function hasBreakpoints(){
      return $this->_has(1);
    }
    
    /**
     * Clear <breakpoints> value
     *
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsResponse
     */
    public function clearBreakpoints(){
      return $this->_clear(1);
    }
    
    /**
     * Get <breakpoints> value
     *
     * @param int $idx
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function getBreakpoints($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <breakpoints> value
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint $value
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsResponse
     */
    public function setBreakpoints(\google\devtools\clouddebugger\v2\Breakpoint $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <breakpoints>
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint[]
     */
    public function getBreakpointsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <breakpoints>
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint $value
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsResponse
     */
    public function addBreakpoints(\google\devtools\clouddebugger\v2\Breakpoint $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <next_wait_token> has a value
     *
     * @return boolean
     */
    public function hasNextWaitToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <next_wait_token> value
     *
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsResponse
     */
    public function clearNextWaitToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <next_wait_token> value
     *
     * @return string
     */
    public function getNextWaitToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <next_wait_token> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsResponse
     */
    public function setNextWaitToken( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <wait_expired> has a value
     *
     * @return boolean
     */
    public function hasWaitExpired(){
      return $this->_has(3);
    }
    
    /**
     * Clear <wait_expired> value
     *
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsResponse
     */
    public function clearWaitExpired(){
      return $this->_clear(3);
    }
    
    /**
     * Get <wait_expired> value
     *
     * @return boolean
     */
    public function getWaitExpired(){
      return $this->_get(3);
    }
    
    /**
     * Set <wait_expired> value
     *
     * @param boolean $value
     * @return \google\devtools\clouddebugger\v2\ListActiveBreakpointsResponse
     */
    public function setWaitExpired( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class UpdateActiveBreakpointRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $debuggee_id = null;
    
    /**  @var \google\devtools\clouddebugger\v2\Breakpoint */
    public $breakpoint = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest');

      // OPTIONAL STRING debuggee_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "debuggee_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE breakpoint = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "breakpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\devtools\clouddebugger\v2\Breakpoint';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <debuggee_id> has a value
     *
     * @return boolean
     */
    public function hasDebuggeeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <debuggee_id> value
     *
     * @return \google\devtools\clouddebugger\v2\UpdateActiveBreakpointRequest
     */
    public function clearDebuggeeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <debuggee_id> value
     *
     * @return string
     */
    public function getDebuggeeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <debuggee_id> value
     *
     * @param string $value
     * @return \google\devtools\clouddebugger\v2\UpdateActiveBreakpointRequest
     */
    public function setDebuggeeId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <breakpoint> has a value
     *
     * @return boolean
     */
    public function hasBreakpoint(){
      return $this->_has(2);
    }
    
    /**
     * Clear <breakpoint> value
     *
     * @return \google\devtools\clouddebugger\v2\UpdateActiveBreakpointRequest
     */
    public function clearBreakpoint(){
      return $this->_clear(2);
    }
    
    /**
     * Get <breakpoint> value
     *
     * @return \google\devtools\clouddebugger\v2\Breakpoint
     */
    public function getBreakpoint(){
      return $this->_get(2);
    }
    
    /**
     * Set <breakpoint> value
     *
     * @param \google\devtools\clouddebugger\v2\Breakpoint $value
     * @return \google\devtools\clouddebugger\v2\UpdateActiveBreakpointRequest
     */
    public function setBreakpoint(\google\devtools\clouddebugger\v2\Breakpoint $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class UpdateActiveBreakpointResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\devtools\clouddebugger\v2 {

  class Controller2Client extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param google\devtools\clouddebugger\v2\RegisterDebuggeeRequest $input
     */
    public function RegisterDebuggee(\google\devtools\clouddebugger\v2\RegisterDebuggeeRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.clouddebugger.v2.Controller2/RegisterDebuggee', $argument, '\google\devtools\clouddebugger\v2\RegisterDebuggeeResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\clouddebugger\v2\ListActiveBreakpointsRequest $input
     */
    public function ListActiveBreakpoints(\google\devtools\clouddebugger\v2\ListActiveBreakpointsRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.clouddebugger.v2.Controller2/ListActiveBreakpoints', $argument, '\google\devtools\clouddebugger\v2\ListActiveBreakpointsResponse::deserialize', $metadata, $options);
    }
    /**
     * @param google\devtools\clouddebugger\v2\UpdateActiveBreakpointRequest $input
     */
    public function UpdateActiveBreakpoint(\google\devtools\clouddebugger\v2\UpdateActiveBreakpointRequest $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/google.devtools.clouddebugger.v2.Controller2/UpdateActiveBreakpoint', $argument, '\google\devtools\clouddebugger\v2\UpdateActiveBreakpointResponse::deserialize', $metadata, $options);
    }
  }
}
