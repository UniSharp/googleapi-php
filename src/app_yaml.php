<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/appengine/v1/app_yaml.proto
//   Date: 2017-06-13 04:23:25

namespace google\appengine\v1 {

  class AuthFailAction extends \DrSlump\Protobuf\Enum {
    const AUTH_FAIL_ACTION_UNSPECIFIED = 0;
    const AUTH_FAIL_ACTION_REDIRECT = 1;
    const AUTH_FAIL_ACTION_UNAUTHORIZED = 2;
  }
}
namespace google\appengine\v1 {

  class LoginRequirement extends \DrSlump\Protobuf\Enum {
    const LOGIN_UNSPECIFIED = 0;
    const LOGIN_OPTIONAL = 1;
    const LOGIN_ADMIN = 2;
    const LOGIN_REQUIRED = 3;
  }
}
namespace google\appengine\v1 {

  class SecurityLevel extends \DrSlump\Protobuf\Enum {
    const SECURE_UNSPECIFIED = 0;
    const SECURE_DEFAULT = 0;
    const SECURE_NEVER = 1;
    const SECURE_OPTIONAL = 2;
    const SECURE_ALWAYS = 3;
  }
}
namespace google\appengine\v1 {

  class ApiConfigHandler extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\appengine\v1\AuthFailAction */
    public $auth_fail_action = null;
    
    /**  @var int - \google\appengine\v1\LoginRequirement */
    public $login = null;
    
    /**  @var string */
    public $script = null;
    
    /**  @var int - \google\appengine\v1\SecurityLevel */
    public $security_level = null;
    
    /**  @var string */
    public $url = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.ApiConfigHandler');

      // OPTIONAL ENUM auth_fail_action = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "auth_fail_action";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\AuthFailAction';
      $descriptor->addField($f);

      // OPTIONAL ENUM login = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "login";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\LoginRequirement';
      $descriptor->addField($f);

      // OPTIONAL STRING script = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "script";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM security_level = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "security_level";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\SecurityLevel';
      $descriptor->addField($f);

      // OPTIONAL STRING url = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <auth_fail_action> has a value
     *
     * @return boolean
     */
    public function hasAuthFailAction(){
      return $this->_has(1);
    }
    
    /**
     * Clear <auth_fail_action> value
     *
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function clearAuthFailAction(){
      return $this->_clear(1);
    }
    
    /**
     * Get <auth_fail_action> value
     *
     * @return int - \google\appengine\v1\AuthFailAction
     */
    public function getAuthFailAction(){
      return $this->_get(1);
    }
    
    /**
     * Set <auth_fail_action> value
     *
     * @param int - \google\appengine\v1\AuthFailAction $value
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function setAuthFailAction( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <login> has a value
     *
     * @return boolean
     */
    public function hasLogin(){
      return $this->_has(2);
    }
    
    /**
     * Clear <login> value
     *
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function clearLogin(){
      return $this->_clear(2);
    }
    
    /**
     * Get <login> value
     *
     * @return int - \google\appengine\v1\LoginRequirement
     */
    public function getLogin(){
      return $this->_get(2);
    }
    
    /**
     * Set <login> value
     *
     * @param int - \google\appengine\v1\LoginRequirement $value
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function setLogin( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <script> has a value
     *
     * @return boolean
     */
    public function hasScript(){
      return $this->_has(3);
    }
    
    /**
     * Clear <script> value
     *
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function clearScript(){
      return $this->_clear(3);
    }
    
    /**
     * Get <script> value
     *
     * @return string
     */
    public function getScript(){
      return $this->_get(3);
    }
    
    /**
     * Set <script> value
     *
     * @param string $value
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function setScript( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <security_level> has a value
     *
     * @return boolean
     */
    public function hasSecurityLevel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <security_level> value
     *
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function clearSecurityLevel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <security_level> value
     *
     * @return int - \google\appengine\v1\SecurityLevel
     */
    public function getSecurityLevel(){
      return $this->_get(4);
    }
    
    /**
     * Set <security_level> value
     *
     * @param int - \google\appengine\v1\SecurityLevel $value
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function setSecurityLevel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(5);
    }
    
    /**
     * Clear <url> value
     *
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function clearUrl(){
      return $this->_clear(5);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(5);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \google\appengine\v1\ApiConfigHandler
     */
    public function setUrl( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\appengine\v1\ErrorHandler {

  class ErrorCode extends \DrSlump\Protobuf\Enum {
    const ERROR_CODE_UNSPECIFIED = 0;
    const ERROR_CODE_DEFAULT = 0;
    const ERROR_CODE_OVER_QUOTA = 1;
    const ERROR_CODE_DOS_API_DENIAL = 2;
    const ERROR_CODE_TIMEOUT = 3;
  }
}
namespace google\appengine\v1 {

  class ErrorHandler extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\appengine\v1\ErrorHandler\ErrorCode */
    public $error_code = null;
    
    /**  @var string */
    public $static_file = null;
    
    /**  @var string */
    public $mime_type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.ErrorHandler');

      // OPTIONAL ENUM error_code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "error_code";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\ErrorHandler\ErrorCode';
      $descriptor->addField($f);

      // OPTIONAL STRING static_file = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "static_file";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mime_type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mime_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <error_code> has a value
     *
     * @return boolean
     */
    public function hasErrorCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <error_code> value
     *
     * @return \google\appengine\v1\ErrorHandler
     */
    public function clearErrorCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <error_code> value
     *
     * @return int - \google\appengine\v1\ErrorHandler\ErrorCode
     */
    public function getErrorCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <error_code> value
     *
     * @param int - \google\appengine\v1\ErrorHandler\ErrorCode $value
     * @return \google\appengine\v1\ErrorHandler
     */
    public function setErrorCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <static_file> has a value
     *
     * @return boolean
     */
    public function hasStaticFile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <static_file> value
     *
     * @return \google\appengine\v1\ErrorHandler
     */
    public function clearStaticFile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <static_file> value
     *
     * @return string
     */
    public function getStaticFile(){
      return $this->_get(2);
    }
    
    /**
     * Set <static_file> value
     *
     * @param string $value
     * @return \google\appengine\v1\ErrorHandler
     */
    public function setStaticFile( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mime_type> has a value
     *
     * @return boolean
     */
    public function hasMimeType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mime_type> value
     *
     * @return \google\appengine\v1\ErrorHandler
     */
    public function clearMimeType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mime_type> value
     *
     * @return string
     */
    public function getMimeType(){
      return $this->_get(3);
    }
    
    /**
     * Set <mime_type> value
     *
     * @param string $value
     * @return \google\appengine\v1\ErrorHandler
     */
    public function setMimeType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\appengine\v1\UrlMap {

  class RedirectHttpResponseCode extends \DrSlump\Protobuf\Enum {
    const REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED = 0;
    const REDIRECT_HTTP_RESPONSE_CODE_301 = 1;
    const REDIRECT_HTTP_RESPONSE_CODE_302 = 2;
    const REDIRECT_HTTP_RESPONSE_CODE_303 = 3;
    const REDIRECT_HTTP_RESPONSE_CODE_307 = 4;
  }
}
namespace google\appengine\v1 {

  class UrlMap extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $url_regex = null;
    
    /**  @var \google\appengine\v1\StaticFilesHandler */
    public $static_files = null;
    
    /**  @var \google\appengine\v1\ScriptHandler */
    public $script = null;
    
    /**  @var \google\appengine\v1\ApiEndpointHandler */
    public $api_endpoint = null;
    
    /**  @var int - \google\appengine\v1\SecurityLevel */
    public $security_level = null;
    
    /**  @var int - \google\appengine\v1\LoginRequirement */
    public $login = null;
    
    /**  @var int - \google\appengine\v1\AuthFailAction */
    public $auth_fail_action = null;
    
    /**  @var int - \google\appengine\v1\UrlMap\RedirectHttpResponseCode */
    public $redirect_http_response_code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.UrlMap');

      // OPTIONAL STRING url_regex = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "url_regex";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE static_files = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "static_files";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\StaticFilesHandler';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE script = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "script";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\ScriptHandler';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE api_endpoint = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "api_endpoint";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\ApiEndpointHandler';
      $descriptor->addField($f);

      // OPTIONAL ENUM security_level = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "security_level";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\SecurityLevel';
      $descriptor->addField($f);

      // OPTIONAL ENUM login = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "login";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\LoginRequirement';
      $descriptor->addField($f);

      // OPTIONAL ENUM auth_fail_action = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "auth_fail_action";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\AuthFailAction';
      $descriptor->addField($f);

      // OPTIONAL ENUM redirect_http_response_code = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "redirect_http_response_code";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\appengine\v1\UrlMap\RedirectHttpResponseCode';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <url_regex> has a value
     *
     * @return boolean
     */
    public function hasUrlRegex(){
      return $this->_has(1);
    }
    
    /**
     * Clear <url_regex> value
     *
     * @return \google\appengine\v1\UrlMap
     */
    public function clearUrlRegex(){
      return $this->_clear(1);
    }
    
    /**
     * Get <url_regex> value
     *
     * @return string
     */
    public function getUrlRegex(){
      return $this->_get(1);
    }
    
    /**
     * Set <url_regex> value
     *
     * @param string $value
     * @return \google\appengine\v1\UrlMap
     */
    public function setUrlRegex( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <static_files> has a value
     *
     * @return boolean
     */
    public function hasStaticFiles(){
      return $this->_has(2);
    }
    
    /**
     * Clear <static_files> value
     *
     * @return \google\appengine\v1\UrlMap
     */
    public function clearStaticFiles(){
      return $this->_clear(2);
    }
    
    /**
     * Get <static_files> value
     *
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function getStaticFiles(){
      return $this->_get(2);
    }
    
    /**
     * Set <static_files> value
     *
     * @param \google\appengine\v1\StaticFilesHandler $value
     * @return \google\appengine\v1\UrlMap
     */
    public function setStaticFiles(\google\appengine\v1\StaticFilesHandler $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <script> has a value
     *
     * @return boolean
     */
    public function hasScript(){
      return $this->_has(3);
    }
    
    /**
     * Clear <script> value
     *
     * @return \google\appengine\v1\UrlMap
     */
    public function clearScript(){
      return $this->_clear(3);
    }
    
    /**
     * Get <script> value
     *
     * @return \google\appengine\v1\ScriptHandler
     */
    public function getScript(){
      return $this->_get(3);
    }
    
    /**
     * Set <script> value
     *
     * @param \google\appengine\v1\ScriptHandler $value
     * @return \google\appengine\v1\UrlMap
     */
    public function setScript(\google\appengine\v1\ScriptHandler $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <api_endpoint> has a value
     *
     * @return boolean
     */
    public function hasApiEndpoint(){
      return $this->_has(4);
    }
    
    /**
     * Clear <api_endpoint> value
     *
     * @return \google\appengine\v1\UrlMap
     */
    public function clearApiEndpoint(){
      return $this->_clear(4);
    }
    
    /**
     * Get <api_endpoint> value
     *
     * @return \google\appengine\v1\ApiEndpointHandler
     */
    public function getApiEndpoint(){
      return $this->_get(4);
    }
    
    /**
     * Set <api_endpoint> value
     *
     * @param \google\appengine\v1\ApiEndpointHandler $value
     * @return \google\appengine\v1\UrlMap
     */
    public function setApiEndpoint(\google\appengine\v1\ApiEndpointHandler $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <security_level> has a value
     *
     * @return boolean
     */
    public function hasSecurityLevel(){
      return $this->_has(5);
    }
    
    /**
     * Clear <security_level> value
     *
     * @return \google\appengine\v1\UrlMap
     */
    public function clearSecurityLevel(){
      return $this->_clear(5);
    }
    
    /**
     * Get <security_level> value
     *
     * @return int - \google\appengine\v1\SecurityLevel
     */
    public function getSecurityLevel(){
      return $this->_get(5);
    }
    
    /**
     * Set <security_level> value
     *
     * @param int - \google\appengine\v1\SecurityLevel $value
     * @return \google\appengine\v1\UrlMap
     */
    public function setSecurityLevel( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <login> has a value
     *
     * @return boolean
     */
    public function hasLogin(){
      return $this->_has(6);
    }
    
    /**
     * Clear <login> value
     *
     * @return \google\appengine\v1\UrlMap
     */
    public function clearLogin(){
      return $this->_clear(6);
    }
    
    /**
     * Get <login> value
     *
     * @return int - \google\appengine\v1\LoginRequirement
     */
    public function getLogin(){
      return $this->_get(6);
    }
    
    /**
     * Set <login> value
     *
     * @param int - \google\appengine\v1\LoginRequirement $value
     * @return \google\appengine\v1\UrlMap
     */
    public function setLogin( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <auth_fail_action> has a value
     *
     * @return boolean
     */
    public function hasAuthFailAction(){
      return $this->_has(7);
    }
    
    /**
     * Clear <auth_fail_action> value
     *
     * @return \google\appengine\v1\UrlMap
     */
    public function clearAuthFailAction(){
      return $this->_clear(7);
    }
    
    /**
     * Get <auth_fail_action> value
     *
     * @return int - \google\appengine\v1\AuthFailAction
     */
    public function getAuthFailAction(){
      return $this->_get(7);
    }
    
    /**
     * Set <auth_fail_action> value
     *
     * @param int - \google\appengine\v1\AuthFailAction $value
     * @return \google\appengine\v1\UrlMap
     */
    public function setAuthFailAction( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <redirect_http_response_code> has a value
     *
     * @return boolean
     */
    public function hasRedirectHttpResponseCode(){
      return $this->_has(8);
    }
    
    /**
     * Clear <redirect_http_response_code> value
     *
     * @return \google\appengine\v1\UrlMap
     */
    public function clearRedirectHttpResponseCode(){
      return $this->_clear(8);
    }
    
    /**
     * Get <redirect_http_response_code> value
     *
     * @return int - \google\appengine\v1\UrlMap\RedirectHttpResponseCode
     */
    public function getRedirectHttpResponseCode(){
      return $this->_get(8);
    }
    
    /**
     * Set <redirect_http_response_code> value
     *
     * @param int - \google\appengine\v1\UrlMap\RedirectHttpResponseCode $value
     * @return \google\appengine\v1\UrlMap
     */
    public function setRedirectHttpResponseCode( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace google\appengine\v1\StaticFilesHandler {

  class HttpHeadersEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.StaticFilesHandler.HttpHeadersEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \google\appengine\v1\StaticFilesHandler\HttpHeadersEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\appengine\v1\StaticFilesHandler\HttpHeadersEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \google\appengine\v1\StaticFilesHandler\HttpHeadersEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \google\appengine\v1\StaticFilesHandler\HttpHeadersEntry
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\appengine\v1 {

  class StaticFilesHandler extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $path = null;
    
    /**  @var string */
    public $upload_path_regex = null;
    
    /**  @var \google\appengine\v1\StaticFilesHandler\HttpHeadersEntry[]  */
    public $http_headers = array();
    
    /**  @var string */
    public $mime_type = null;
    
    /**  @var \google\protobuf\Duration */
    public $expiration = null;
    
    /**  @var boolean */
    public $require_matching_file = null;
    
    /**  @var boolean */
    public $application_readable = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.StaticFilesHandler');

      // OPTIONAL STRING path = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING upload_path_regex = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "upload_path_regex";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE http_headers = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "http_headers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\appengine\v1\StaticFilesHandler\HttpHeadersEntry';
      $descriptor->addField($f);

      // OPTIONAL STRING mime_type = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mime_type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE expiration = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "expiration";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Duration';
      $descriptor->addField($f);

      // OPTIONAL BOOL require_matching_file = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "require_matching_file";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL application_readable = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "application_readable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <path> has a value
     *
     * @return boolean
     */
    public function hasPath(){
      return $this->_has(1);
    }
    
    /**
     * Clear <path> value
     *
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function clearPath(){
      return $this->_clear(1);
    }
    
    /**
     * Get <path> value
     *
     * @return string
     */
    public function getPath(){
      return $this->_get(1);
    }
    
    /**
     * Set <path> value
     *
     * @param string $value
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function setPath( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <upload_path_regex> has a value
     *
     * @return boolean
     */
    public function hasUploadPathRegex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <upload_path_regex> value
     *
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function clearUploadPathRegex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <upload_path_regex> value
     *
     * @return string
     */
    public function getUploadPathRegex(){
      return $this->_get(2);
    }
    
    /**
     * Set <upload_path_regex> value
     *
     * @param string $value
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function setUploadPathRegex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <http_headers> has a value
     *
     * @return boolean
     */
    public function hasHttpHeaders(){
      return $this->_has(3);
    }
    
    /**
     * Clear <http_headers> value
     *
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function clearHttpHeaders(){
      return $this->_clear(3);
    }
    
    /**
     * Get <http_headers> value
     *
     * @param int $idx
     * @return \google\appengine\v1\StaticFilesHandler\HttpHeadersEntry
     */
    public function getHttpHeaders($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <http_headers> value
     *
     * @param \google\appengine\v1\StaticFilesHandler\HttpHeadersEntry $value
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function setHttpHeaders(\google\appengine\v1\StaticFilesHandler\HttpHeadersEntry $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <http_headers>
     *
     * @return \google\appengine\v1\StaticFilesHandler\HttpHeadersEntry[]
     */
    public function getHttpHeadersList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <http_headers>
     *
     * @param \google\appengine\v1\StaticFilesHandler\HttpHeadersEntry $value
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function addHttpHeaders(\google\appengine\v1\StaticFilesHandler\HttpHeadersEntry $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <mime_type> has a value
     *
     * @return boolean
     */
    public function hasMimeType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mime_type> value
     *
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function clearMimeType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mime_type> value
     *
     * @return string
     */
    public function getMimeType(){
      return $this->_get(4);
    }
    
    /**
     * Set <mime_type> value
     *
     * @param string $value
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function setMimeType( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <expiration> has a value
     *
     * @return boolean
     */
    public function hasExpiration(){
      return $this->_has(5);
    }
    
    /**
     * Clear <expiration> value
     *
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function clearExpiration(){
      return $this->_clear(5);
    }
    
    /**
     * Get <expiration> value
     *
     * @return \google\protobuf\Duration
     */
    public function getExpiration(){
      return $this->_get(5);
    }
    
    /**
     * Set <expiration> value
     *
     * @param \google\protobuf\Duration $value
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function setExpiration(\google\protobuf\Duration $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <require_matching_file> has a value
     *
     * @return boolean
     */
    public function hasRequireMatchingFile(){
      return $this->_has(6);
    }
    
    /**
     * Clear <require_matching_file> value
     *
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function clearRequireMatchingFile(){
      return $this->_clear(6);
    }
    
    /**
     * Get <require_matching_file> value
     *
     * @return boolean
     */
    public function getRequireMatchingFile(){
      return $this->_get(6);
    }
    
    /**
     * Set <require_matching_file> value
     *
     * @param boolean $value
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function setRequireMatchingFile( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <application_readable> has a value
     *
     * @return boolean
     */
    public function hasApplicationReadable(){
      return $this->_has(7);
    }
    
    /**
     * Clear <application_readable> value
     *
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function clearApplicationReadable(){
      return $this->_clear(7);
    }
    
    /**
     * Get <application_readable> value
     *
     * @return boolean
     */
    public function getApplicationReadable(){
      return $this->_get(7);
    }
    
    /**
     * Set <application_readable> value
     *
     * @param boolean $value
     * @return \google\appengine\v1\StaticFilesHandler
     */
    public function setApplicationReadable( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\appengine\v1 {

  class ScriptHandler extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $script_path = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.ScriptHandler');

      // OPTIONAL STRING script_path = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "script_path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <script_path> has a value
     *
     * @return boolean
     */
    public function hasScriptPath(){
      return $this->_has(1);
    }
    
    /**
     * Clear <script_path> value
     *
     * @return \google\appengine\v1\ScriptHandler
     */
    public function clearScriptPath(){
      return $this->_clear(1);
    }
    
    /**
     * Get <script_path> value
     *
     * @return string
     */
    public function getScriptPath(){
      return $this->_get(1);
    }
    
    /**
     * Set <script_path> value
     *
     * @param string $value
     * @return \google\appengine\v1\ScriptHandler
     */
    public function setScriptPath( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\appengine\v1 {

  class ApiEndpointHandler extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $script_path = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.ApiEndpointHandler');

      // OPTIONAL STRING script_path = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "script_path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <script_path> has a value
     *
     * @return boolean
     */
    public function hasScriptPath(){
      return $this->_has(1);
    }
    
    /**
     * Clear <script_path> value
     *
     * @return \google\appengine\v1\ApiEndpointHandler
     */
    public function clearScriptPath(){
      return $this->_clear(1);
    }
    
    /**
     * Get <script_path> value
     *
     * @return string
     */
    public function getScriptPath(){
      return $this->_get(1);
    }
    
    /**
     * Set <script_path> value
     *
     * @param string $value
     * @return \google\appengine\v1\ApiEndpointHandler
     */
    public function setScriptPath( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\appengine\v1 {

  class HealthCheck extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $disable_health_check = null;
    
    /**  @var string */
    public $host = null;
    
    /**  @var int */
    public $healthy_threshold = null;
    
    /**  @var int */
    public $unhealthy_threshold = null;
    
    /**  @var int */
    public $restart_threshold = null;
    
    /**  @var \google\protobuf\Duration */
    public $check_interval = null;
    
    /**  @var \google\protobuf\Duration */
    public $timeout = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.HealthCheck');

      // OPTIONAL BOOL disable_health_check = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "disable_health_check";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING host = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "host";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 healthy_threshold = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "healthy_threshold";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 unhealthy_threshold = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "unhealthy_threshold";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 restart_threshold = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "restart_threshold";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE check_interval = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "check_interval";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Duration';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE timeout = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "timeout";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Duration';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <disable_health_check> has a value
     *
     * @return boolean
     */
    public function hasDisableHealthCheck(){
      return $this->_has(1);
    }
    
    /**
     * Clear <disable_health_check> value
     *
     * @return \google\appengine\v1\HealthCheck
     */
    public function clearDisableHealthCheck(){
      return $this->_clear(1);
    }
    
    /**
     * Get <disable_health_check> value
     *
     * @return boolean
     */
    public function getDisableHealthCheck(){
      return $this->_get(1);
    }
    
    /**
     * Set <disable_health_check> value
     *
     * @param boolean $value
     * @return \google\appengine\v1\HealthCheck
     */
    public function setDisableHealthCheck( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <host> has a value
     *
     * @return boolean
     */
    public function hasHost(){
      return $this->_has(2);
    }
    
    /**
     * Clear <host> value
     *
     * @return \google\appengine\v1\HealthCheck
     */
    public function clearHost(){
      return $this->_clear(2);
    }
    
    /**
     * Get <host> value
     *
     * @return string
     */
    public function getHost(){
      return $this->_get(2);
    }
    
    /**
     * Set <host> value
     *
     * @param string $value
     * @return \google\appengine\v1\HealthCheck
     */
    public function setHost( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <healthy_threshold> has a value
     *
     * @return boolean
     */
    public function hasHealthyThreshold(){
      return $this->_has(3);
    }
    
    /**
     * Clear <healthy_threshold> value
     *
     * @return \google\appengine\v1\HealthCheck
     */
    public function clearHealthyThreshold(){
      return $this->_clear(3);
    }
    
    /**
     * Get <healthy_threshold> value
     *
     * @return int
     */
    public function getHealthyThreshold(){
      return $this->_get(3);
    }
    
    /**
     * Set <healthy_threshold> value
     *
     * @param int $value
     * @return \google\appengine\v1\HealthCheck
     */
    public function setHealthyThreshold( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <unhealthy_threshold> has a value
     *
     * @return boolean
     */
    public function hasUnhealthyThreshold(){
      return $this->_has(4);
    }
    
    /**
     * Clear <unhealthy_threshold> value
     *
     * @return \google\appengine\v1\HealthCheck
     */
    public function clearUnhealthyThreshold(){
      return $this->_clear(4);
    }
    
    /**
     * Get <unhealthy_threshold> value
     *
     * @return int
     */
    public function getUnhealthyThreshold(){
      return $this->_get(4);
    }
    
    /**
     * Set <unhealthy_threshold> value
     *
     * @param int $value
     * @return \google\appengine\v1\HealthCheck
     */
    public function setUnhealthyThreshold( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <restart_threshold> has a value
     *
     * @return boolean
     */
    public function hasRestartThreshold(){
      return $this->_has(5);
    }
    
    /**
     * Clear <restart_threshold> value
     *
     * @return \google\appengine\v1\HealthCheck
     */
    public function clearRestartThreshold(){
      return $this->_clear(5);
    }
    
    /**
     * Get <restart_threshold> value
     *
     * @return int
     */
    public function getRestartThreshold(){
      return $this->_get(5);
    }
    
    /**
     * Set <restart_threshold> value
     *
     * @param int $value
     * @return \google\appengine\v1\HealthCheck
     */
    public function setRestartThreshold( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <check_interval> has a value
     *
     * @return boolean
     */
    public function hasCheckInterval(){
      return $this->_has(6);
    }
    
    /**
     * Clear <check_interval> value
     *
     * @return \google\appengine\v1\HealthCheck
     */
    public function clearCheckInterval(){
      return $this->_clear(6);
    }
    
    /**
     * Get <check_interval> value
     *
     * @return \google\protobuf\Duration
     */
    public function getCheckInterval(){
      return $this->_get(6);
    }
    
    /**
     * Set <check_interval> value
     *
     * @param \google\protobuf\Duration $value
     * @return \google\appengine\v1\HealthCheck
     */
    public function setCheckInterval(\google\protobuf\Duration $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <timeout> has a value
     *
     * @return boolean
     */
    public function hasTimeout(){
      return $this->_has(7);
    }
    
    /**
     * Clear <timeout> value
     *
     * @return \google\appengine\v1\HealthCheck
     */
    public function clearTimeout(){
      return $this->_clear(7);
    }
    
    /**
     * Get <timeout> value
     *
     * @return \google\protobuf\Duration
     */
    public function getTimeout(){
      return $this->_get(7);
    }
    
    /**
     * Set <timeout> value
     *
     * @param \google\protobuf\Duration $value
     * @return \google\appengine\v1\HealthCheck
     */
    public function setTimeout(\google\protobuf\Duration $value){
      return $this->_set(7, $value);
    }
  }
}

namespace google\appengine\v1 {

  class Library extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $version = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.appengine.v1.Library');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING version = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <name> value
     *
     * @return \google\appengine\v1\Library
     */
    public function clearName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\appengine\v1\Library
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(2);
    }
    
    /**
     * Clear <version> value
     *
     * @return \google\appengine\v1\Library
     */
    public function clearVersion(){
      return $this->_clear(2);
    }
    
    /**
     * Get <version> value
     *
     * @return string
     */
    public function getVersion(){
      return $this->_get(2);
    }
    
    /**
     * Set <version> value
     *
     * @param string $value
     * @return \google\appengine\v1\Library
     */
    public function setVersion( $value){
      return $this->_set(2, $value);
    }
  }
}

